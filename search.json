[{"title":"Python实现2DPSK","url":"/p/d5a52b94/","content":"<p>最近写作业要画各种各样的波形（eg.2DPSK），就很烦，有的地方总画错(<del>真实原因是画的丑</del>)<br>然后就写了个程序画得整整齐齐来看，顺便加深理解。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>2DPSK简称为二进制差分相移键控，它不是利用载波相位的绝对数值传送数字信息，而是用前后码元的相对载波相位值传送数字信息。所谓相对载波相位是指本码与前一码元初相之差。——引自百度百科的定义</p>\n</blockquote>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>1.根据其定义，相位变化是由输入的码元(0&#x2F;1)决定的（默认初始参考相位为0）</p>\n<p>2.用一个数组delta将每次变化的相位记录下来，用deltaAdd累加每次的变化量形成最终的相位</p>\n<p>3.细节处理：</p>\n<p>要考虑每个周期产生的波形数量，其可通过下面这个公式计算出。</p>\n<p>$$<br>T_B &#x3D; f_c&#x2F;R_b<br>$$</p>\n<h2 id=\"程序实现\"><a href=\"#程序实现\" class=\"headerlink\" title=\"程序实现\"></a>程序实现</h2><p>主要用到<code>numpy</code>和 <code>matplotlib</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 预设用于检测的绝对码，Tb，fai0，fai1，后面可以作为参数输入</span></span><br><span class=\"line\">mustCode = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">Tb = <span class=\"number\">1.5</span>*<span class=\"number\">2</span>*np.pi <span class=\"comment\"># 一个波形周期</span></span><br><span class=\"line\">fai0 = <span class=\"number\">1.5</span>*np.pi <span class=\"comment\"># 码字为0时波形的移动相位：270°</span></span><br><span class=\"line\">fai1 = <span class=\"number\">0.5</span>*np.pi <span class=\"comment\"># 码字为1时波形的移动相位：90°</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(mustCode)):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> mustCode[i] == <span class=\"number\">1</span>:</span><br><span class=\"line\">        delta.append(fai1)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        delta.append(fai0)</span><br><span class=\"line\">    deltaAdd = deltaAdd + delta[i] <span class=\"comment\"># 累计每次的相位变化</span></span><br><span class=\"line\">    x1 = np.linspace((i+<span class=\"number\">1</span>)*Tb, i*Tb+<span class=\"number\">2</span>*Tb, <span class=\"number\">100</span>)</span><br><span class=\"line\">    y1 = np.sin(x1 + deltaAdd)</span><br><span class=\"line\">    plt.plot(x1,y1)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果截图\"><a href=\"#结果截图\" class=\"headerlink\" title=\"结果截图\"></a>结果截图</h2><p><img data-src=\"/p/d5a52b94/2DPSK011010.png\" alt=\"2DPSK--011010\"></p>\n<p>程序放在Github上：<a href=\"https://github.com/umm233/umm233.github.io/blob/master/article-code/2DPSK.py\">2DPSK波形程序实现</a></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>按思路写起来就是这样子，后面就是将那些预设的量用<code>input()</code>输入就好了。</p>\n<p>还有就是图像上的优化，怎么弄起来好看一些…比如将横坐标用pi的倍数来表示，加上网格等等。</p>\n<p>自己动手，丰衣足食😜</p>\n<p>PS.今年还剩下 43 天     ▓▓▓▓▓▓▓▓▓▓▓▓▓░░  88%</p>\n","categories":["通信原理"],"tags":["Python","DPSK"]},{"title":"年记·2018","url":"/p/6ad40d1c/","content":"<p>今年也许是大学里最开心的一年，也是相对充实的一年。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"今年最佳\"><a href=\"#今年最佳\" class=\"headerlink\" title=\"今年最佳\"></a>今年最佳</h2><blockquote>\n<p>8.23 国赛</p>\n</blockquote>\n<p>当时准备国赛，和队友熬了好多夜，苦不堪言。现在回忆起来，蛮感谢队友们一直坚持下去。（还有点怀念那段时光…orz</p>\n<blockquote>\n<p>10.1~10.7 同学叙旧</p>\n</blockquote>\n<p>国庆期间见了好几个高中同学，毕业后就很少见到了。国庆那会儿跑去找他们玩，一起瞎逛，聊天，互相吐槽，爆以前黑料等等，属于见了面就“嫌弃”…但，还是很亲切。</p>\n<blockquote>\n<p>12月 – 万万没想到</p>\n</blockquote>\n<p>今年的生日赶巧和另外一个同学一起过，是大学里非常佩服的一个人，感觉很神奇！那天晚上很开心，帮我们一起过生日的女孩子事后跟我说，我晚上笑的很开心😂。</p>\n<p>嗯，是很开心了！</p>\n<h2 id=\"书影音番剧\"><a href=\"#书影音番剧\" class=\"headerlink\" title=\"书影音番剧\"></a>书影音番剧</h2><h3 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h3><ol>\n<li>《房思琪的初恋乐园》 (看的真让人心里难受…)</li>\n<li>《嫌疑人X的献身》</li>\n<li>《我的天才女友》</li>\n</ol>\n<h3 id=\"影\"><a href=\"#影\" class=\"headerlink\" title=\"影\"></a>影</h3><ol>\n<li>《世界奇妙物语》(春&#x2F;秋)</li>\n<li>《昨日青空》</li>\n<li>《无问西东》</li>\n<li>《超时空同居》</li>\n<li>《头号玩家》</li>\n<li>《我不是药神》</li>\n<li>《小偷家族》</li>\n<li>《动物世界》</li>\n<li>《狄仁杰之四大天王》</li>\n<li>等等（印象里这些吧</li>\n</ol>\n<h3 id=\"音\"><a href=\"#音\" class=\"headerlink\" title=\"音\"></a>音</h3><blockquote>\n<p>比较喜欢的</p>\n</blockquote>\n<ol>\n<li>曹方&#x2F;张希 - 《认真地老去》</li>\n<li>齐一 - 《这个年纪》</li>\n<li>房东的猫 - 《云烟成雨》</li>\n<li>Pianoboy - 《The truth that you leave》</li>\n<li>Charli XCX - 《After the Afterparty (feat. Lil Yachty)》</li>\n<li>AGA - 《Wonderful U (Demo Version)》</li>\n</ol>\n<h3 id=\"剧\"><a href=\"#剧\" class=\"headerlink\" title=\"剧\"></a>剧</h3><ol>\n<li>《迷失太空》(第一&#x2F;二季)</li>\n<li>《少年谢尔顿》(第二季)</li>\n<li>《我的天才女友》</li>\n<li>《西部世界》(第二季)</li>\n<li>《魔法觉醒》(第一季)</li>\n<li>《怪奇物语》（第一&#x2F;二季）</li>\n<li>《我是大哥大》</li>\n</ol>\n<p>能想起来的就这些…</p>\n<h3 id=\"番\"><a href=\"#番\" class=\"headerlink\" title=\"番\"></a>番</h3><blockquote>\n<p>18年开始入坑追番…所以看的比较多（逃…</p>\n</blockquote>\n<ol>\n<li>《青春猪头少年不会梦到兔女郎学姐》</li>\n<li>《凸变英雄》</li>\n<li>《小林家的龙女仆》</li>\n<li>《凹凸世界》(第一&#x2F;二季)</li>\n<li>《Re：从零开始的异世界生活》</li>\n<li>《齐木楠雄的灾难》(第二季)</li>\n<li>《我的英雄学院》(第一&#x2F;二季)</li>\n<li>《欢迎来到实力至上主义的教室》</li>\n<li>《镇魂街》</li>\n<li>《刺客伍六七》</li>\n<li>《樱花庄的宠物女孩》</li>\n</ol>\n<p>可能还有，不记了…</p>\n<h3 id=\"umm…\"><a href=\"#umm…\" class=\"headerlink\" title=\"umm…\"></a>umm…</h3><p>书 * 3，影 * 10，音 * 6，番 * 11，剧 * 7</p>\n<p>书看的还是比较少…来年要加油了。</p>\n<h2 id=\"19年的期待\"><a href=\"#19年的期待\" class=\"headerlink\" title=\"19年的期待\"></a>19年的期待</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 多看书</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客坚持写下来</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 稳重一点(指性格和体重)</li>\n<li><input disabled=\"\" type=\"checkbox\"> 多运动(宅不会让我变胖…运动可以)</li>\n</ul>\n<p>20年的时候，如果完成项超过一半就很棒了！<br>年少清狂，不轻狂。</p>\n<p>To 20年回头看这篇的我：</p>\n<ol>\n<li>一句话评论一下19年的我过得怎么样</li>\n<li>写的总结的时候，心情怎么样</li>\n</ol>\n<p>就酱…</p>\n","categories":["日常"],"tags":["Note"]},{"title":"年记·2019","url":"/p/9176ff8a/","content":"<p><strong>TL;DR</strong></p>\n<p>平平淡淡</p>\n<span id=\"more\"></span>\n\n<h2 id=\"点滴\"><a href=\"#点滴\" class=\"headerlink\" title=\"点滴\"></a>点滴</h2><p>8月 六级过了</p>\n<blockquote>\n<p>六级终(ju)于(ran)过了</p>\n</blockquote>\n<p>12.25 圣诞节</p>\n<blockquote>\n<p>今年圣诞节也有一起过，虽然下了雨</p>\n<p>Merry Christmas~</p>\n</blockquote>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><ol>\n<li><p>《银河系漫游指南》</p>\n<blockquote>\n<p>怀疑是自己的一场梦</p>\n</blockquote>\n</li>\n<li><p>《褚时健传》</p>\n<blockquote>\n<p>很传奇的一个人</p>\n</blockquote>\n</li>\n<li><p>《1984》</p>\n</li>\n<li><p>《孤独患者》</p>\n</li>\n<li><p>《你今天真好看》</p>\n</li>\n<li><p>《流浪地球》</p>\n</li>\n</ol>\n<h2 id=\"影\"><a href=\"#影\" class=\"headerlink\" title=\"影\"></a>影</h2><ol>\n<li><p>《流浪地球》</p>\n</li>\n<li><p>《狗十三》</p>\n</li>\n<li><p>《调音师》</p>\n<blockquote>\n<p>同名微电影也很不错</p>\n</blockquote>\n</li>\n<li><p>《奇迹男孩》</p>\n</li>\n<li><p>《海上钢琴师》</p>\n</li>\n<li><p>《绿皮书》</p>\n</li>\n<li><p>《江湖告急》</p>\n</li>\n<li><p>《美丽人生》</p>\n<blockquote>\n<p>2020 要重映，幸运</p>\n<p>看着泪目</p>\n</blockquote>\n</li>\n<li><p>《无间道》</p>\n</li>\n<li><p>《触不可及》</p>\n</li>\n<li><p>《V字仇杀队》</p>\n</li>\n<li><p>《寄生虫》</p>\n</li>\n<li><p>《罗小黑战记》</p>\n</li>\n<li><p>《哪吒之魔童降世》</p>\n<blockquote>\n<p>梗很多，不知不觉让你开怀，期待2020的《姜子牙》</p>\n</blockquote>\n</li>\n<li><p>《何以为家》</p>\n</li>\n<li><p>《小鬼当家》</p>\n</li>\n<li><p>《天使爱美丽》</p>\n</li>\n<li><p>《波西米亚狂想曲》</p>\n</li>\n<li><p>《银翼杀手》</p>\n<blockquote>\n<p>故事背景在2019.11</p>\n<p>我刚好在2019.11月看的（强行凑巧）</p>\n</blockquote>\n</li>\n<li><p>《银翼杀手 2049》</p>\n</li>\n<li><p>《小丑》</p>\n</li>\n<li><p>《小鬼当家》</p>\n<blockquote>\n<p>Merry Christmas!</p>\n</blockquote>\n</li>\n<li><p>《忠犬八公的故事》</p>\n</li>\n</ol>\n<h2 id=\"音\"><a href=\"#音\" class=\"headerlink\" title=\"音\"></a>音</h2><ol>\n<li>孟凡明 - 《只只》</li>\n<li>房东的猫 - 《云烟成雨》</li>\n<li>卢巧音，王力宏 - 《好心分手》</li>\n</ol>\n<h2 id=\"番\"><a href=\"#番\" class=\"headerlink\" title=\"番\"></a>番</h2><ol>\n<li><p>《进击的巨人》</p>\n<blockquote>\n<p>想知道真相</p>\n</blockquote>\n</li>\n<li><p>《鬼灭之刃》</p>\n</li>\n<li><p>《这个勇者明明很强却过于慎重》</p>\n</li>\n<li><p>《伍六七之最强发型师》</p>\n</li>\n<li><p>《OVERLOAD》</p>\n</li>\n<li><p>《她与她的猫》</p>\n</li>\n</ol>\n<h2 id=\"剧\"><a href=\"#剧\" class=\"headerlink\" title=\"剧\"></a>剧</h2><ol>\n<li><p>《3年A班》</p>\n</li>\n<li><p>《爱，死亡和机器人》</p>\n<blockquote>\n<p>每一集一个小故事</p>\n</blockquote>\n</li>\n<li><p>《切尔诺贝利》</p>\n<blockquote>\n<p>讲诉当年核电站事故</p>\n</blockquote>\n</li>\n<li><p>《切尔诺贝利·禁区》</p>\n</li>\n<li><p>《轮到你了》</p>\n<blockquote>\n<p>看的时候就觉得有点像《白夜行》</p>\n</blockquote>\n</li>\n<li><p>《难以置信》</p>\n<blockquote>\n<p>当你说的真话，所遭受的一切被所有人怀疑，不相信的时候，有多难受</p>\n</blockquote>\n</li>\n<li><p>《小谢尔顿》 第二季</p>\n</li>\n<li><p>《权力的游戏》第八季</p>\n<blockquote>\n<p>摇铃，shame…</p>\n</blockquote>\n</li>\n<li><p>《Rick and Morty》第四季</p>\n</li>\n</ol>\n<h2 id=\"umm…\"><a href=\"#umm…\" class=\"headerlink\" title=\"umm…\"></a>umm…</h2><p>书 * 6，影 * 23，音 * 3，番 * 6，剧 * 9</p>\n<h2 id=\"2020-的期待\"><a href=\"#2020-的期待\" class=\"headerlink\" title=\"2020 的期待\"></a>2020 的期待</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 《魔神英雄传之七魂龙神丸》</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 多看书</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 博客继续写下去</li>\n</ul>\n<p>2019 过去了，来到2020，2019的时候我问自己日后写这篇博客的时候的心情——平静</p>\n<p>2019，过的还行，平平淡淡的，没什么太大的波澜，性格感觉比以前要稳重一点，就是觉得过得很快，来不及回味</p>\n<p>2020年，新的年代，记得要过得开心哦~</p>\n<blockquote class=\"blockquote-center\">\n<p>微笑面对生活 :-)</p>\n\n</blockquote>\n","categories":["日常"],"tags":["Note"]},{"title":"PC视频在投影仪上无线播放","url":"/p/3c189c3f/","content":"<p>分享一下如何通过无线（不借助额外的线缆）的方式在投影仪上播放 PC 上的视频文件</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>设备：极米投影<br>PC：Win10系统<br>网络：设备处于同一局域网内</p>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p>iOS 设备可以通过 AirPlay 很方便就可以将视频投到投影仪上</p>\n<p>ps. 还可以通过 nplayer，将网页上的视频投到投影上</p>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><h4 id=\"Miracast\"><a href=\"#Miracast\" class=\"headerlink\" title=\"Miracast\"></a>Miracast</h4><p>Windows 上想要投屏到投影仪，可以通过 Miracast 的方式来实现，这种方式需要 PC 以及投影仪都支持该功能。</p>\n<p>对于 Miracast 的介绍可以看下<a href=\"https://www.wi-fi.org/discover-wi-fi/miracast\">Miracast</a></p>\n<blockquote>\n<p>Standards-based Miracast advances life without wires</p>\n</blockquote>\n<p>在极米投屏中打开 Miracast 等待连接，然后点击电脑的操作中心中的<code>连接</code>，选择投影设备进行连接。在电脑顶部会出现一个<code>正在连接到你的设备</code>的 bar。</p>\n<p><img data-src=\"/p/3c189c3f/win-connect.jpg\"></p>\n<p>理论上，这样就可以了，应该很快就可以投过去了，但我等了好一会，．&lt;{&#x3D;．．．．<br>然后弹出一条消息：<code>无法连接到设备</code></p>\n<p><img data-src=\"/p/3c189c3f/miracast-cant-connect.jpg\"></p>\n<p>然后去查了下，Miracast 好像被极米阉割&#x2F;禁用了，给我搞无语了😶…</p>\n<h4 id=\"SMB\"><a href=\"#SMB\" class=\"headerlink\" title=\"SMB\"></a>SMB</h4><p>以前<a href=\"https://github.com/ttttmr\">@tmr</a>介绍过一种如何通过SMB在移动端直接访问PC上的视频的方法，为了避免安全问题可以通过配置了火绒和入站和出站规则来限制连接者的IP。</p>\n<blockquote>\n<p>SMB: 一种用于提供对资源的共享访问的网络通信协议<br>Windows下需要在<code>控制面板-&gt;程序和功能-&gt;启用或关闭 Windows 功能</code>中启用对SMB协议的支持选项</p>\n</blockquote>\n<p>然后对含有视频的本地文件夹右键，<code>属性-&gt;共享-&gt;高级共享</code>指定用户访问以及读写权限等，建议新建一个本地用户进行操作，分配给该用户共享文件夹的访问权限，避免使用主用户。</p>\n<p>有了 SMB 之后，极米的资源管理器支持添加设备，在这里面列出了检索到的设备，查找PC的IP对应的设备，输入用户名和密码，进行访问。</p>\n<p>这样就可以在投影上直接访问PC文件，不需要连线以及U盘中转，只需要共享一下文件夹或者将视频放入已共享的文件夹内。</p>\n<p>选择视频后，如果有外挂字幕可以放在同一个文件夹内，极米播放器内可以选择字幕以及调整字幕等，实际测试，字幕名称需要和视频名称一样才会被识别加载进入字幕选项中。</p>\n<h4 id=\"DLNA\"><a href=\"#DLNA\" class=\"headerlink\" title=\"DLNA\"></a>DLNA</h4><p>Windows 直接在视频文件上右键，选择<code>播放到设备</code>，这里会显示同一局域网或者通过蓝牙连接的设备。选择投影设备就可以播放。</p>\n<p>有个缺点就是外挂字幕不能添加到视频内，解决方法也有，就是使用 ffmpeg 合并字幕到视频中。</p>\n<h3 id=\"投影-App-推荐\"><a href=\"#投影-App-推荐\" class=\"headerlink\" title=\"投影 App 推荐\"></a>投影 App 推荐</h3><ul>\n<li>VLC：视频播放及连接SMB服务器</li>\n</ul>\n<blockquote>\n<p>遇到一些视频播放没有声音，可以修改<code>设置-&gt;音频-&gt;高级-&gt;音频输出</code>，修改为<code>OpenSL ES</code>试试，我这样就可以了</p>\n</blockquote>\n<ul>\n<li><p>WeTV：腾讯视频海外版</p>\n</li>\n<li><p>爱奇艺万能播放器：PC 端视频投屏到投影，自动将当前文件夹下的其他视频加入到播放列表中，当前视频播放完可以自动续播其他视频（<a href=\"https://m.okjike.com/users/A4B1F86C-A284-47C8-A572-911803273236\">瞎看</a>推荐的，真不错！）</p>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>比较一下各种方式的视频投影的优缺点：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">方式</th>\n<th align=\"center\">优点</th>\n<th align=\"center\">缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">iOS</td>\n<td align=\"center\">AirPlay 直接投屏播放，不支持字幕设置</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">Miracast</td>\n<td align=\"center\">无线投屏</td>\n<td align=\"center\">设备不支持</td>\n</tr>\n<tr>\n<td align=\"center\">SMB</td>\n<td align=\"center\">视频文件可以直接在投影上访问，投影上可以对字幕进行选择与配置</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"center\">DLNA</td>\n<td align=\"center\">可以直接在投影上播放视频</td>\n<td align=\"center\">不支持字幕配置</td>\n</tr>\n</tbody></table>\n","categories":["日常"],"tags":["Projector","XGMI","Windows","SMB"]},{"title":"Github SSH Key 泄露的影响","url":"/p/617eedb3/","content":"<p>由于前段时间 Github 私钥泄露，Github 出于谨慎更换了密钥。这里简单谈谈对使用者的使用和解决办法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近更新项目到 Github, <code>git pull</code> 的时候出现问题，控制台打印：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @</span><br><span class=\"line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class=\"line\">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class=\"line\">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class=\"line\">It is also possible that a host key has just been changed.</span><br><span class=\"line\">The fingerprint for the RSA key sent by the remote host is</span><br><span class=\"line\">SHA256:uNiVztksCsDhcc0u9e8BujQXVUpKZIDTMczCvj3tD2s.</span><br><span class=\"line\">Please contact your system administrator.</span><br><span class=\"line\">Add correct host key in ~/.ssh/known_hosts to get rid of this message.</span><br><span class=\"line\">Host key for github.com has changed and you have requested strict checking.</span><br><span class=\"line\">Host key verification failed.</span><br></pre></td></tr></table></figure>\n\n<p>看到这个联想起之前 Github 密钥泄露，但看没出事情也就没关注：</p>\n<blockquote>\n<p>GitHub 宣布更换其 SSH 密钥。原因是本周早些时候，它发现 GitHub.com 的 RSA SSH 私钥在一个公开的库内短暂暴露。</p>\n<p>via <a href=\"https://www.solidot.org/story?sid=74486\">GitHub.com 短暂暴露其 SSH 私钥</a></p>\n</blockquote>\n<p>里面提到 github 对于这件事的一篇 blog: <a href=\"https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/\">We updated our RSA SSH host key</a></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>Github 更换私钥会影响到通过 RSA SSH 密钥进行 Github 身份验证。因为更换了私钥，那么相对应的公钥也需要进行修改，Github 博客中给出了解决方法：</p>\n<ol>\n<li><p>通过运行以下命令删除旧密钥：</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -R github.com</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这行命令是从 known_hosts 文件中删除属于主机名(Github)的所有键。</p>\n</blockquote>\n</li>\n<li><p>添加新的 RSA SSH 公钥到 <code>~/.ssh/known_hosts</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>执行之后，重新 <code>git pull</code>，如果仍存在之前的密钥问题，可能是<code>known_hosts</code>中仍存在旧密钥影响的。</p>\n<p>需要进入<code>~/.ssh/known_hosts</code>，手动将其中 Github 旧的相关密钥条目手动删除，只保留新添加的密钥。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.solidot.org/story?sid=74486\">GitHub.com 短暂暴露其 SSH 私钥</a></li>\n<li><a href=\"https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/\">We updated our RSA SSH host key</a></li>\n</ul>\n<blockquote class=\"blockquote-center\">\n<p>Enjoy Spring!<br>Happy Spring~</p>\n\n</blockquote>\n\n","categories":["日常"],"tags":["Github","SSH"]},{"title":"如何为 GithubPoster 添加 loader","url":"/p/c88bf4c7/","content":"<p>去年年末看到 GithubPoster，然后联想到常用的 app，有一个想法，就是给经常打开的 即刻 做一个全年动态统计，看看每天发了几条，什么时候发的比较频繁。</p>\n<span id=\"more\"></span>\n\n<p>一开始做的比较简单，是通过获取全年里所有即刻动态的时间，生成一个json文件，通过 GithubPoster 的 json 的方式读取生成。</p>\n<p>后面看到可以通过 loader 集成到 GithubPoster，有点类似 RSSHub 的 router。</p>\n<p>需要修改的文件可以参考：<a href=\"https://github.com/yihong0618/GitHubPoster/pull/37/files#\">Add feature: 即刻</a></p>\n<h2 id=\"本地运行\"><a href=\"#本地运行\" class=\"headerlink\" title=\"本地运行\"></a>本地运行</h2><p>第一步本地环境搭建，新建一个虚拟环境安装 GithubPoster 所需依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># create new enviroument GithubPoster</span></span><br><span class=\"line\">python3 -m venv GithubPoster</span><br><span class=\"line\"><span class=\"comment\"># active the GithubPoster enviroument</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> GithubPoster/bin/activate</span><br><span class=\"line\"><span class=\"comment\"># install GithubPoster</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:yihong0618/GitHubPoster.git</span><br><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>在源码文件夹(<code>path/to/GitHubPoster</code>)中执行就可以运行 GithubPoster 生成相应的统计 svg</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m github_poster jike --jike_cookie <span class=\"string\">&quot;your jike cookie&quot;</span> --jike_user_id <span class=\"string\">&#x27;your jike user id&#x27;</span> --year 2021 --me <span class=\"string\">&quot;your name&quot;</span> --with-animation --animation-time 14 --count_type <span class=\"string\">&#x27;like&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>在<code>github_poster/loader</code>目录下新建一个 loader，大致模板：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">JikeLoader</span>(<span class=\"title class_ inherited__\">BaseLoader</span>):</span><br><span class=\"line\">    track_color = <span class=\"string\">&quot;#FFE411&quot;</span></span><br><span class=\"line\">    unit = <span class=\"string\">&quot;times&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, from_year, to_year, _<span class=\"built_in\">type</span>, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 对象初始化时操作</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_loader_arguments</span>(<span class=\"params\">cls, parser</span>):</span><br><span class=\"line\">        <span class=\"comment\"># add argument for loader</span></span><br><span class=\"line\">        parser.add_argument(</span><br><span class=\"line\">            <span class=\"string\">&quot;--your-argument-name&quot;</span>,</span><br><span class=\"line\">            dest=<span class=\"string\">&quot;your-argument-name&quot;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\">            required=<span class=\"literal\">False</span>,</span><br><span class=\"line\">            <span class=\"built_in\">help</span>=<span class=\"string\">&quot;some tips&quot;</span>,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_api_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># get api data</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">make_track_dict</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># generate statistics data</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_all_track_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># loader main func</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">self</span>.number_by_date_dict, <span class=\"variable language_\">self</span>.year_list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>__init__</code>：函数内对一些变量进行初始化</li>\n<li><code>add_loader_arguments</code>：读取 loader 需要的用户输入的参数</li>\n<li><code>get_api_data</code>：获取接口数据的函数</li>\n<li><code>make_track_dict</code>：处理<code>get_api_data</code>获取到的数据，生成统计数据，一个个的字典值，时间以及每天的次数，如 <code>&quot;2022-01-01&quot;: 123&quot;</code></li>\n<li><code>get_all_track_data</code>：这个函数，我理解的是 loader 的主函数，GithubPoster 会执行这个函数获取需要的数据<ul>\n<li><code>number_by_date_dict</code>中存储的是key是<code>yyyy-mm-dd</code>, value是统计数值，eg. <code>&quot;2022-01-19&quot;: 1</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h2><p>代码之外的一些配置，将 loader 的信息集成到 github_poster 中</p>\n<ol>\n<li><code>config.py</code>：在<code>TYPE_INFO_DICT</code>这个字典中配置type名称，用于svg标题中显示：</li>\n</ol>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ &quot;jike&quot;: &quot;Jike&quot;,</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>__init__.py</code>：添加 loader</li>\n</ol>\n<ul>\n<li><code>LOADER_DICT</code>中添加loader简称与loader的对应关系</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ &quot;jike&quot;: JikeLoader,</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>__all__ </code>这个元组里添加loader：</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ &quot;JikeLoader&quot;,</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/c88bf4c7/init_diff.png\" alt=\"__init__.py diff\"></p>\n<ol start=\"3\">\n<li><code>config.py</code>：添加一些loader相关的常量配置，如api地址等</li>\n</ol>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ JIKE_GRAPHQL_URL = &quot;https://web-api.okjike.com/api/graphql&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+ JIKE_PERSON_URL = &quot;https://web.okjike.com/u/&#123;user_id&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>README.md</code>：添加loader的使用说明，以及一些参数的获取方法。</li>\n<li><code>README-EN.md</code>：同<code>README.md</code></li>\n</ol>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>使用的是 VS Code 的 Debugger。配置 <code>launch.json</code> 配置运行参数：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.2.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurations&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GithubPoster&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;python&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;request&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;launch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;github_poster&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;justMyCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;args&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;jike&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--year&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;2022&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--jike_cookie&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;xxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--without-type-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--count_type&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;like&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--jike_user_id&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;xxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--with-animation&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;--animation-time&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;10&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置后，根据参数进入到对应程序，触发断点，就可以进行调试了。按照上面的配置，执行命令就会变成：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m github_poster jike --year 2022 --jike_cookie <span class=\"string\">&quot;xxx&quot;</span> --without-type-name --count_type like --jike_user_id xxx</span><br><span class=\"line\">--with-animation --animation-time 10</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>loader的编写大部分都可以参考其他的loader来做，比如使用session和cookie获取数据就可以直接参考着来写就行。</p>\n<p>另外，如果是从html解析数据，那么可以抽离出来放到<code>/html_parser/your_parse.py</code>里比较好。</p>\n<p>GithubPoster 生成的图可以用来做年度总结呀，可以看看自己一年轨迹等等，挺有意思的</p>\n<blockquote>\n<p>看着一些数据会发出“呀，都这么久了吗？这么多吗？”的感叹哈哈</p>\n</blockquote>\n<p>最后感谢<a href=\"https://github.com/yihong0618\">伊洪老师</a>，编写loader这个过程中指导了我很多~</p>\n","categories":["日常"],"tags":["GithubPoster","loader"]},{"title":"解决魅族恢复备份时无法识别备份包","url":"/p/d7c85fa7/","content":"<p>记录魅族重装恢复时无法识别备份包的解决方法，适用于魅族16，其他设备未经测试。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><ol>\n<li><p>魅族手机可以使用换机助手备份手机应用数据到一个zip格式的包中，手机重置后可以通过换机助手恢复。但有的时候将备份包移动到第三方设备（PC、U盘等）后，出现无法解析识别该备份包的情况。</p>\n</li>\n<li><p>备份包在PC上查看时不显示</p>\n</li>\n<li><p>另外若备份包过大，可以移出到第三方设备，但可能无法将其移动回手机里。当然这也可以解决</p>\n<p> 备份目录结构如下：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">│   app.info</span><br><span class=\"line\">│</span><br><span class=\"line\">├───AlarmClock</span><br><span class=\"line\">│       AlarmClock.xml</span><br><span class=\"line\">│</span><br><span class=\"line\">├───App</span><br><span class=\"line\">│       com.xxx.yyy.apk</span><br><span class=\"line\">│       com.xxx.yyy.zip</span><br><span class=\"line\">│</span><br><span class=\"line\">├───CallLog</span><br><span class=\"line\">│       backup.xml</span><br><span class=\"line\">│       calllog.vcl</span><br><span class=\"line\">│</span><br><span class=\"line\">├───Contact</span><br><span class=\"line\">│       backup.xml</span><br><span class=\"line\">│       contact.vcf</span><br><span class=\"line\">│</span><br><span class=\"line\">├───Launcher</span><br><span class=\"line\">│       launcher_backup.json</span><br><span class=\"line\">│</span><br><span class=\"line\">├───Sms</span><br><span class=\"line\">│       backup.xml</span><br><span class=\"line\">│       sms.vmsg</span><br><span class=\"line\">│</span><br><span class=\"line\">└───WlanPwd</span><br><span class=\"line\">        backup.xml</span><br><span class=\"line\">        wifi_config</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>其中：</p>\n<ul>\n<li><p><code>AlarmClock</code>: 闹钟相关设置</p>\n</li>\n<li><p><code>App</code>: app数据</p>\n</li>\n<li><p><code>CallLog</code>: 通话记录</p>\n</li>\n<li><p><code>Contact</code>: 联系人信息</p>\n</li>\n<li><p><code>Launcher</code>: 桌面布局</p>\n</li>\n<li><p><code>Sms</code>: 短信备份</p>\n</li>\n<li><p><code>WlanPwd</code>: WiFi设置</p>\n</li>\n</ul>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><ul>\n<li><p>解决PC上不显示备份包的问题</p>\n<p>  解决方法：备份包位于设备<code>backup</code>文件夹中，在手机上将备份包移动到其他文件夹，然后就可以在PC上显示，然后可将其备份到PC上。</p>\n</li>\n<li><p>解决无法将大文件备份包移回手机内部存储的问题</p>\n<p>  解决方法：新建文件夹，将大文件放入，然后将文件夹移动到手机内。</p>\n</li>\n<li><p>解决备份包无法被换机助手识别，导致无法恢复数据</p>\n</li>\n</ul>\n<p>解决方法：（整个过程手机连接PC进行操作）</p>\n<ol>\n<li><p>新建文件夹，文件名以<code>yyyy-mmdd-HHMMSS</code>的格式命名，如<code>2020-0921-211728</code></p>\n</li>\n<li><p>目录结构参考导出备份包的结构，如上面的树形图</p>\n</li>\n<li><p>可以将备份包中除<code>App</code>文件夹外的其他文件夹都复制到文件夹<code>2020-0921-211728</code>中</p>\n</li>\n<li><p>在文件夹<code>2020-0921-211728</code>中新建<code>App</code>，然后复制一部分apk以及对应名称的数据备份包，不易过多</p>\n</li>\n<li><p>复制文件夹到手机的<code>backup</code>文件夹中</p>\n</li>\n</ol>\n<p><img data-src=\"/p/d7c85fa7/screenshot1.jpg\"></p>\n<ol start=\"6\">\n<li><p>然后这时候可以在手机的备份与恢复中上看到<code>2020-0921-211728</code>这条备份记录</p>\n</li>\n<li><p>有了记录后，可以继续复制剩下的app以及其数据备份包到<code>App</code>文件夹中进行备份恢复</p>\n</li>\n</ol>\n<p><img data-src=\"/p/d7c85fa7/screenshot2.jpg\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>重置一时爽，哈哈哈<br>一直重置一直… <del>（当我没说，逃</del></p>\n","categories":["日常"],"tags":["MeiZu","Backup"]},{"title":"投影观看 Youtube 视频最佳实践","url":"/p/36d1cc10/","content":"<p>投影&#x2F;TV 观看 Youtube 视频，是一个比较普遍的问题，刚开始没想到什么比较好的解决方法，或者需要太折腾。<br>这里介绍一种我觉得最简单的方法来使投影&#x2F;TV 支持 Youtube。当然，不仅仅是 Youtube (👀</p>\n<span id=\"more\"></span>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>原有的思路可能是：</p>\n<ol>\n<li>软路由：太贵</li>\n<li>硬路由：需要刷固件，暂时不想动路由器</li>\n<li>变相软路由：朋友已经实现了，所有的流量通过一台 PC 转发</li>\n</ol>\n<p>然后就想，如果只针对一个设备，能不能搞个最佳实践，纯软件配置就可以实现的那种。</p>\n<p>接着想到了 Windows 的移动热点，是不是可以控制该移动热点的流量转发？感觉可行。</p>\n<blockquote>\n<p>开启移动热点可以参考：<a href=\"https://support.microsoft.com/zh-cn/windows/%E5%B0%86windows%E7%94%B5%E8%84%91%E7%94%A8%E4%BD%9C%E7%A7%BB%E5%8A%A8%E7%83%AD%E7%82%B9-c89b0fad-72d5-41e8-f7ea-406ad9036b85\">将Windows电脑用作移动热点</a></p>\n</blockquote>\n<p>查了下发现可以使用 CFW-TAP 实现，但 win11 对 TAP 好像有什么误解（我用不了）。</p>\n<p>然后看了下文档关于 TAP 模式的，发现可以用 TUN 模式。</p>\n<blockquote>\n<p>对于不遵循系统代理的软件，TAP 模式可以接管其流量并交由 CFW 处理</p>\n<p>对于 0.13.8 及以后版本，更推荐使用 <a href=\"https://docs.cfw.lbyczf.com/contents/tun.html\">TUN 模式</a></p>\n</blockquote>\n<p>反正 TAP 不行，就试一下 TUN 呗，按照<a href=\"https://docs.cfw.lbyczf.com/contents/tun.html\">文档</a>步骤来，描述得很详细了。</p>\n<p>配置开启 TUN 后，进入<code>控制面板\\网络和 Internet\\网络连接</code>，可以看到一个 TUN 产生的网络，然后在 TUN 网络属性中配置共享的网络，这里选择 Windows 的移动热点的网络。</p>\n<p>剩下就是解决 Youtube TV 的问题，投影没有 Google 框架。从 Google Play 上下载的有问题，用不了。后面看到<a href=\"https://www.williamlong.info/archives/5624.html\">在小米电视和小米盒子上看YouTube</a>，看到<a href=\"https://github.com/yuliskov/SmartTubeNext\">SmartTubeNext</a>，使用文档里也描述了如何发送文件到 TV，可以看看。也可以参考我之前写的<a href=\"/p/3c189c3f\">PC 视频在投影仪上无线播放</a>中使用 SMB 进行文件传输的方法。</p>\n<p>ALL DONE!🎉 Enjoy the Youtube TV.</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>解决了拿到投影就想解决的问题，舒服了。另外这套方案应该可以针对所有设备👀</p>\n<p>有一个问题就是 Windows 创建移动热点不能隐藏，在 Quora 上有一个讨论（<a href=\"https://www.quora.com/How-do-I-hide-a-mobile-hotspot-in-Windows-10\">How do I hide a mobile hotspot in Windows 10?</a>），结论就是暂时没办法，Windows 本身不支持。</p>\n<p>另外，平常也不会一直开着（按需），提高一下热点的密码复杂度😶</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.sainnhe.dev/post/v2ray-hotspot\">通过创建 Wifi 热点来共享 V2ray 代理</a></li>\n<li><a href=\"https://www.williamlong.info/tag/YouTube.html\">在小米电视和小米盒子上看YouTube</a></li>\n</ul>\n","categories":["日常"],"tags":["Projector","Windows","Youtube","Proxy"]},{"title":"周记·20190323","url":"/p/aa5cf34e/","content":"<p>分享记录最近觉得看到想到的东西，不限于书影音等等。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><h3 id=\"为什么Lena的那张图会成为数字图像处理的标准图？\"><a href=\"#为什么Lena的那张图会成为数字图像处理的标准图？\" class=\"headerlink\" title=\"为什么Lena的那张图会成为数字图像处理的标准图？\"></a><a href=\"https://www.zhihu.com/question/21748279\">为什么Lena的那张图会成为数字图像处理的标准图？</a></h3><p>之前就看到lena的对比照，当时觉得“啊，岁月如梭(dao)”，没有想过要去了解，也不知道为什么这张图经常被人拿来进行各种图像处理，然后最近在阮老师博客上又看到了，搜了一下，看到知乎上关于lena的讨论，知道了缘由。还看到该图的<a href=\"http://www.lenna.org/full/l_hires.jpg\">原图</a></p>\n<p><img data-src=\"/p/aa5cf34e/lena.jpg\" alt=\"Lena\"></p>\n<h2 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h2><h3 id=\"《褚时健传》——先燕云\"><a href=\"#《褚时健传》——先燕云\" class=\"headerlink\" title=\"《褚时健传》——先燕云\"></a>《褚时健传》——先燕云</h3><p>前段时间，褚老去世，许多文章上提及关于他的事迹，红塔山，褚橙等等，我对他有了一点印象——传奇。在这之前，我对他可以说是完全没有印象。最近看到的他人描绘的褚时健都是他的成就，看的有点片面，我想知道这样一个amazing的人为什么没有现在家喻户晓？然后去读了一下关于他的传记，感受比较深的是，他的坚韧，以及做事的态度，非常认真，一件事开始的时候，他会事必躬亲，去了解，实践，找到方法规律，耐心地做下去。</p>\n<blockquote>\n<p>来了这么多人，我发现他们把事情想的太简单了，总想找现成、靠大树、撞运气。其实，这个世界哪里有这么简单的事情？我八十多岁了，还在摸爬滚打，事情要一点儿一点儿地做，本事要一点儿一点儿地学，才能一步一步把成功的本领学到手。——褚时健</p>\n</blockquote>\n<h2 id=\"影视\"><a href=\"#影视\" class=\"headerlink\" title=\"影视\"></a>影视</h2><h3 id=\"《爱，死亡，机器人》\"><a href=\"#《爱，死亡，机器人》\" class=\"headerlink\" title=\"《爱，死亡，机器人》\"></a>《爱，死亡，机器人》</h3><p>最近，大概是 Netflix 的《爱，死亡，机器人》比较火，18集的小短片</p>\n<p>豆瓣上有<a href=\"https://www.douban.com/review/10049890/\">每一集的原作和作者信息简介</a>，看完可以了解一下。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"绿盾防护-–-中国移动官方骚扰电话屏蔽功能\"><a href=\"#绿盾防护-–-中国移动官方骚扰电话屏蔽功能\" class=\"headerlink\" title=\"绿盾防护 – 中国移动官方骚扰电话屏蔽功能\"></a><a href=\"https://www.appinn.com/lvdun-chinamobile/\">绿盾防护 – 中国移动官方骚扰电话屏蔽功能</a></h3><p>目前仅对广东、江苏、北京、上海、山东、四川、河南、福建、天津、重庆、浙江 11 个省市开通，可以尝试一下，另外，也有微信公众号: <em>绿盾防护试点</em></p>\n<blockquote>\n<p>发送短信 KTFSR 至 10086 开通该服务</p>\n<p>发送短信 QXFSR 至 10086 取消该服务</p>\n</blockquote>\n<h2 id=\"随想\"><a href=\"#随想\" class=\"headerlink\" title=\"随想\"></a>随想</h2><p>当你写东西的时候会开始认真思考，比如日记，博客，随笔等等，可以发现自己最近这段时间里学到什么，了解了什么，了解到什么程度，经过自己过滤一遍写出来的东西至少是经过一番回顾思考出来的。这样也会有一些收获吧。</p>\n<p>作为日常拖延患者，有的时候文章觉得不错的就收藏了，等有空慢慢看，然后就有了一堆未读😓。</p>\n<p>现在想慢慢通过写作驱动学习(参考<a href=\"https://www.phodal.com/blog/how-to-learn-skill/\">这篇文章</a>)，来好好改改。文章里也有说到其缺点什么的，但想尝试一下</p>\n","categories":["日常"],"tags":["Note"]},{"title":"周记·20220530","url":"/p/d7af2ee8/","content":"<p>咕咕</p>\n<p>很久之前写过鸽报，时隔多年重新开启这个 tag，主要是为了记录一些每周看到比较意思的东西，比如</p>\n<ul>\n<li>书影音</li>\n<li>文章</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h2><ul>\n<li><p><a href=\"https://blog.bytebytego.com/p/how-does-https-work-episode-6\">How does HTTPS work?</a></p>\n<blockquote>\n<ol>\n<li>简单介绍了 HTTPS 的工作原理</li>\n<li>如何安全地将密码存储在数据库中，以及如何验证密码</li>\n</ol>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.tomczhen.com/2016/10/10/hashing-security\">加盐密码哈希：如何正确使用</a></p>\n<blockquote>\n<p>如何加密密码到数据库</p>\n</blockquote>\n</li>\n</ul>\n","categories":["日常"],"tags":["Note","Weekly"]},{"title":"月记·201903","url":"/p/1e2e0372/","content":"<p>盘点下最近完结的几部番剧以及截图识番<br>追番一时爽，一直追番一直爽（多图预警！）</p>\n<span id=\"more\"></span>\n\n<h2 id=\"强风吹拂\"><a href=\"#强风吹拂\" class=\"headerlink\" title=\"强风吹拂\"></a><a href=\"https://www.bilibili.com/bangumi/media/md139352/\">强风吹拂</a></h2><p>看的第一部运动番，每看一集都会有种想现在去跑步的冲动。bgm也很给力。</p>\n<ol>\n<li><p><a href=\"https://music.163.com/#/song/1334585645/\"><em>In a Sweat !</em></a></p>\n</li>\n<li><p><a href=\"https://music.163.com/#/song/1334585608\"><em>お互い</em></a></p>\n</li>\n</ol>\n<p><img data-src=\"/p/1e2e0372/2.png\" alt=\"以为只靠努力就能无所不能 这是一种傲慢\"></p>\n<p><img data-src=\"/p/1e2e0372/3.png\" alt=\"灰二治愈的笑\"></p>\n<p><img data-src=\"/p/1e2e0372/4.png\" alt=\"众人表示能够再次吃到灰二做的饭时的感动\"></p>\n<p><img data-src=\"/p/1e2e0372/5.png\" alt=\"王子测试合格时众人的兴奋\"></p>\n<p><img data-src=\"/p/1e2e0372/6.png\" alt=\"此刻王子的表情\"></p>\n<h2 id=\"关于我转生变成史莱姆这档事\"><a href=\"#关于我转生变成史莱姆这档事\" class=\"headerlink\" title=\"关于我转生变成史莱姆这档事\"></a><a href=\"https://www.bilibili.com/bangumi/media/md139252/\">关于我转生变成史莱姆这档事</a></h2><p>这部番的主角是一只(tuo)史莱姆，他的成长基本上是吃大的，一直吃，吃成Boss…<br>番的最后几集明显为了结尾，有点赶就是了。</p>\n<p>异世界的看的不多，推荐有雷姆所在的 <a href=\"https://www.bilibili.com/bangumi/media/md3461/\"><em>Re：从零开始的异世界生活</em></a></p>\n<p>还有最近还在追的 <a href=\"https://www.bilibili.com/bangumi/media/md4316482/\"><em>盾之勇者成名录</em></a></p>\n<p>晒晒之前的截图（还能找到的）</p>\n<p><img data-src=\"/p/1e2e0372/1.gif\" alt=\"关于我转生变成史莱姆这档事\"></p>\n<h2 id=\"辉夜大小姐想让我告白天才们的恋爱头脑战\"><a href=\"#辉夜大小姐想让我告白天才们的恋爱头脑战\" class=\"headerlink\" title=\"辉夜大小姐想让我告白天才们的恋爱头脑战\"></a><a href=\"https://www.bilibili.com/bangumi/media/md5267730/\"><em>辉夜大小姐想让我告白</em><del><em>天才们的恋爱头脑战</em></del></a></h2><p>互相喜欢对方，但各自表现傲娇，男主女主一直傲娇到全局结尾，周末放松看看，还蛮解压的（#单身狗日常）</p>\n<p>这部番广为流传的应该是<a href=\"https://www.bilibili.com/bangumi/play/ep259772\">书记的舞</a>(22’30”-)，很有魔性~</p>\n<p><img data-src=\"/p/1e2e0372/9.png\" alt=\"白银辉夜\"></p>\n<p><img data-src=\"/11.png\" alt=\"一起在车里看烟花\"></p>\n<p><img data-src=\"/p/1e2e0372/10.png\" alt=\"完结撒花\"></p>\n<h2 id=\"截图识番\"><a href=\"#截图识番\" class=\"headerlink\" title=\"截图识番\"></a>截图识番</h2><p>看番的人有的时候会遇到”这是xx番呀？“，”这个图在xx集来着？“的问题。</p>\n<p>这里推荐一个网站：<a href=\"https://trace.moe/\">WAIT: What Anime Is This? - Anime Scene Search Engine</a></p>\n<p>Github项目:<a href=\"https://github.com/soruly/trace.moe\">soruly&#x2F;trace.moe</a></p>\n<blockquote>\n<p>Search result tells you which moment it appears.</p>\n</blockquote>\n<p>可实现动画场景的图像反向搜索，告诉你哪部动画，哪一集以及这个场景在日本动画中出现的确切时间。</p>\n<p>个人感觉还蛮好用的，大部分的番搜出来准确率都蛮高的，还会显示截图所在的视频片段.<br>效果拔群，nb！</p>\n<h2 id=\"补番\"><a href=\"#补番\" class=\"headerlink\" title=\"补番\"></a>补番</h2><ol>\n<li><p>约定的梦幻岛</p>\n<blockquote>\n<p>据说还蛮好看的，最近也完结了</p>\n</blockquote>\n</li>\n<li><p>巨兵长城传</p>\n<blockquote>\n<p>听说有点像《虹猫蓝兔》，哈哈，加入补番列表</p>\n</blockquote>\n</li>\n</ol>\n","categories":["日常"],"tags":["Note","Anime"]},{"title":"周记·20220821","url":"/p/c3d77754/","content":"<p>Geohash、RSA 原理以及轨迹压缩</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Geohash\"><a href=\"#Geohash\" class=\"headerlink\" title=\"Geohash\"></a>Geohash</h2><ul>\n<li><p><a href=\"https://halfrost.com/go_spatial_search\">高效的多维空间点索引算法 — Geohash 和 Google S2</a></p>\n<blockquote>\n<p>Geohash 的原理及实现，写得很清楚</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://tech.meituan.com/2014/09/05/lucene-distance.html\">地理空间距离计算优化</a></p>\n<blockquote>\n<p>查 Geohash 资料的时候看到的关于空间距离计算优化的文章，曲线经纬线在两点距离很近的情况下可近似为直线处理，消除一些三角函数的计算，提高距离计算的效率</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.movable-type.co.uk/scripts/geohash.html\">Geohashes</a></p>\n</li>\n<li><p><a href=\"http://www.movable-type.co.uk/scripts/gis-faq-5.1.html\">GIS FAQ Q5.1: Great circle distance between 2 points</a></p>\n</li>\n<li><p><a href=\"https://redis.io/commands/geohash\">Redis-GEOHASH</a></p>\n<blockquote>\n<p>Redis 中 Geohash 数据类型的使用</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><ul>\n<li><p><a href=\"https://web.okjike.com/originalPost/62fe1df2e30b105ebd8bbc59\">RSA 非对称式加密的细节</a></p>\n<blockquote>\n<p>简化 RSA 一些过程来说，相对通俗易懂地理了解 RSA</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\">Wiki:RSA (cryptosystem)</a></p>\n<blockquote>\n<p>再参考这个全一点的来看</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"轨迹压缩\"><a href=\"#轨迹压缩\" class=\"headerlink\" title=\"轨迹压缩\"></a>轨迹压缩</h2><ul>\n<li><p><a href=\"https://developers.google.com/maps/documentation/utilities/polylinealgorithm\">Google Maps Platform Doc: Encoded Polyline Algorithm Format.</a></p>\n</li>\n<li><p><a href=\"https://guanhonly.github.io/2019/09/05/PolylineEncoding\">轨迹压缩算法(Polyline encoding algorithm)探究</a></p>\n</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>轨迹压缩算法和Geohash的做法都是将浮点数对（经纬度）编码成字符串，根据需求的不一样，使用不同的编码方式。</p>\n<p>看了RSA、Geohash、halfrost博客中提到的分形，以及美团的优化距离计算的过程，觉得数学好奇妙~</p>\n","categories":["日常"],"tags":["Note","Weekly"]},{"title":"周记·20221024","url":"/p/512b506/","content":"<p>一些工具和 ocw (Open Course Ware)</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Tool\"><a href=\"#Tool\" class=\"headerlink\" title=\"Tool\"></a>Tool</h2><h3 id=\"Etymonline\"><a href=\"#Etymonline\" class=\"headerlink\" title=\"Etymonline\"></a><a href=\"https://chrome.google.com/webstore/detail/etymonline/giehjnnlopapngdjbjjgddpaagoimmgl\">Etymonline</a></h3><blockquote>\n<p><a href=\"https://etymonline.com/\">https://etymonline.com</a></p>\n<p>英文词源数据库 - 这个网站可以查询每个英语单词的历史和含义。很有用的一个工具，可以发现一些很有趣的解释。<br>via <a href=\"https://twitter.com/decohack/status/1561860770081685509\">https://twitter.com/decohack/status/1561860770081685509</a></p>\n</blockquote>\n<p>#fun #chrome</p>\n<h3 id=\"Maple-Mono\"><a href=\"#Maple-Mono\" class=\"headerlink\" title=\"Maple Mono\"></a><a href=\"https://github.com/subframe7536/Maple-font\">Maple Mono</a></h3><blockquote>\n<p>开源 monospace 字体，看起来还不错</p>\n</blockquote>\n<p>#font</p>\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h2><h3 id=\"MIT-Open-Course-Ware\"><a href=\"#MIT-Open-Course-Ware\" class=\"headerlink\" title=\"MIT Open Course Ware\"></a>MIT Open Course Ware</h3><ul>\n<li><p><a href=\"https://ocw.mit.edu/courses/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/\">MIT-6-0001-introduction-to-computer-science-and-programming-in-python</a></p>\n<blockquote>\n<p>计算机科学介绍，可以花点时间了解下。<br>ps.讲师很有趣!</p>\n</blockquote>\n<p>#course</p>\n</li>\n</ul>\n","categories":["日常"],"tags":["Note","Weekly"]},{"title":"月记·202502","url":"/p/2258a936/","content":"<p>关于我两秒钟把路由器弄坏，花两小时修好这件事</p>\n<span id=\"more\"></span>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>路由器刷了 Openwrt，关闭了2.5 GHz 频段的 WIFI。<br>这次有一个新设备要连 WIFI，发现只能连接 2.5 GHz 频段的</p>\n<p>可能刷的时间过去有点久了，以至于我忘记刷了 Openwrt 这件事</p>\n<p>由于无法连接路由器后台，然后我戳了一下reset，两秒的事情…<br>戳完之后更不对了，WIFI都不见了，然后开始连网线，找不到设备。</p>\n<p>该不会给我搞成砖吧，看了下灯是蓝的，但没有网，只能希望它还行（最后确实也还行。</p>\n<h2 id=\"两小时的修\"><a href=\"#两小时的修\" class=\"headerlink\" title=\"两小时的修\"></a>两小时的修</h2><ol>\n<li>重启，尝试了各种重启，还是不行。</li>\n<li>设备管理器，发现网卡有问题，尝试卸载，重新安装，无果。</li>\n</ol>\n<h3 id=\"网卡驱动\"><a href=\"#网卡驱动\" class=\"headerlink\" title=\"网卡驱动\"></a>网卡驱动</h3><p>那没办法，一个一个修吧。先修网卡控制器。<br>查了一下，都是让我卸载，更新驱动。</p>\n<p>道理我都懂，更新驱动要装什么驱动人生，劝退。<br>路都是人走出来的，认真看了下名字 <code>Realtek PCle Gbe Family Controller</code><br>然后就去 Realtek 网站上，发现有一个更新驱动的东西<a href=\"https://www.realtek.com/Download/List?cate_id=584\">Win10&#x2F;Win11 Auto Installation Program (NDIS)\t</a>，只能试试了。</p>\n<p>装上更新就好了，赞美！</p>\n<h3 id=\"修网络\"><a href=\"#修网络\" class=\"headerlink\" title=\"修网络\"></a>修网络</h3><p>驱动可以了，网线也能用了，设备也出现了。开始修软路由。<br>到这一步顺利登上了 Openwrt的后台了，尝试刷回去，没找到好路子，好像当时刷机偷懒少装了个什么(QAQ</p>\n<p>发现重置路由器之后，Openwrt会关闭所有频段的 WIFI，配置一下打开就好了。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>看到网上挺多人刷完也reset路由器，有的在刷的过程中reset了…<br>有的是和我一样，刷完之后，当时看到最安慰的就是，灯是蓝色还常亮的应该还有救</p>\n<p>写这篇给下一个胡图图，也许还是我哈哈</p>\n","categories":["日常"],"tags":["Note","软路由","Realtek"]},{"title":"月记·202503","url":"/p/811ea67f/","content":"<p>三月是樱花盛开和飘落的时节</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p><a href=\"https://bookfere.com/post/1148.html\">让你的 Kindle 支持隔空手势翻页</a></p>\n<blockquote>\n<p>想搞，但又不是很想。</p>\n<p>不想举着 Kindle 看书，但又不想刷机</p>\n<p>(毕竟路由器的教训摆在眼前，刷了，难刷回去</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1xfXpYjEJP\">曾经连续三年百大，美食区的顶流，如今欠债几百万，这几年我都经历了什么？！</a></p>\n<blockquote>\n<p>⚠️警惕</p>\n<p>「那些要带你赚钱的人，都有一个目的，就是图你身上的钱」</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=LPZh9BOjkQs&t=17s\">Large Language Models explained briefly</a></p>\n<blockquote>\n<p>现在的大模型其实是通过更多的参数对内容进行更好地进行续写</p>\n<p><a href=\"https://www.bilibili.com/video/BV1xmA2eMEFF\">大语言模型的简要解释</a></p>\n</blockquote>\n</li>\n<li><p>剧:《混沌少年时》</p>\n</li>\n<li><p>在读《A Philosophy of Software Design》</p>\n</li>\n<li><p>待读</p>\n<ul>\n<li>余华《在细雨中呼喊》</li>\n<li>余华《第七天》</li>\n<li>路遥《人生》</li>\n</ul>\n</li>\n</ul>\n","categories":["日常"],"tags":["Note","Kindle"]},{"title":"Docker 部署 Flask App","url":"/p/506553f1/","content":"<p>修改了一个基于Flask的青年大学习的截图生成器，生成类微信截图。然后将项目容器化，制作Dockerfile和docker-compose进行管理，通过Docker一键部署。</p>\n<p>这玩意有什么用？还真没有，如果你知道青年大学习是什么，你就知道有（没）啥用，就当练手了。</p>\n<p>重要的是，对Docker有了进一步的理解以及熟悉。<a href=\"https://github.com/umm233/FuckQNDXX\">项目地址</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"P图\"><a href=\"#P图\" class=\"headerlink\" title=\"P图\"></a>P图</h2><p>这一步是将获得的学习结束截图，P成从微信里截图的样子，使用PIL绘制一个<code>head.jpg</code>，然后与原图进行拼接得到微信截图的样子。这里简略介绍以下PIL几个方法的使用：</p>\n<ul>\n<li><p>生成画布，学习结束图片的宽是828px，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里的三个参数分别是图片模式，画布大小，以及画布背景</span></span><br><span class=\"line\">img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (<span class=\"number\">828</span>, <span class=\"number\">78</span>), (<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绘制文本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里的font_type是指字体的路径</span></span><br><span class=\"line\">font = ImageFont.truetype(font_type, <span class=\"number\">28</span>)</span><br><span class=\"line\">draw = ImageDraw.Draw(img)</span><br><span class=\"line\"><span class=\"comment\"># 图片添加文字，三个参数分别表示文本左上角的坐标（画布左上角为坐标原点）、文本内容、颜色和字体</span></span><br><span class=\"line\">draw.text((<span class=\"number\">60</span>, <span class=\"number\">20</span>), title, color, font=font)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存图片</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">img.save(<span class=\"string\">&quot;./static/img/qndxx/head.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/506553f1/head.jpg\" alt=\"head\"></p>\n</li>\n<li><p>图片拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">绘制一个最终大小的画布</span><br><span class=\"line\">merge_img = Image.new(<span class=\"string\">&#x27;RGB&#x27;</span>, (size1[<span class=\"number\">0</span>], size1[<span class=\"number\">1</span>]+size2[<span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\"># 拼接坐标</span></span><br><span class=\"line\">loc1, loc2 = (<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, size1[<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"comment\"># 将图片左上角对齐拼接坐标，粘贴</span></span><br><span class=\"line\">merge_img.paste(img1, loc1)</span><br><span class=\"line\">merge_img.paste(down_img, loc2)</span><br></pre></td></tr></table></figure>\n\n<p>这样子就生成了假的微信截图：</p>\n<p><img data-src=\"/p/506553f1/result.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"Docker部署\"><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h2><p>因为不可能一直本地打开运行，然后生成截图，所以丢一个在服务器上跑。</p>\n<p>然后怎么跑？学习了一波项目容器化。</p>\n<h3 id=\"编写Dockerfile\"><a href=\"#编写Dockerfile\" class=\"headerlink\" title=\"编写Dockerfile\"></a>编写Dockerfile</h3><p>Dockerfile像是一个脚本，里面编写好命令，然后容器创建的时候会根据步骤一步一步构建。通过Dockerfile可以实现自动化构建项目容器。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.7</span>-alpine AS build</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> sed -i <span class=\"string\">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; apk update \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; apk add git gcc musl-dev libffi-dev openssl-dev make</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --upgrade pip</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apk --no-cache add git \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       jpeg-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       zlib-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       freetype-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       lcms2-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       openjpeg-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       tiff-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       tk-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       tcl-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       harfbuzz-dev \\</span></span><br><span class=\"line\"><span class=\"language-bash\">                       fribidi-dev</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> git <span class=\"built_in\">clone</span> https://github.com/umm233/FuckQNDXX</span></span><br></pre></td></tr></table></figure>\n\n<p>这里解释以下每句话的作用：</p>\n<ul>\n<li><p>第1行的使用<code>python:3.7-alpine</code>镜像构建基础容器。</p>\n<p>这里为什么选择alpine版本的python容器？因为可以节省空间以及其体积小，使得构建过程更快。</p>\n<blockquote>\n<p><code>python:3.7-alpine</code> 是一个在 Alpine 系统下 Python3.7 镜像，<code>Alpine</code> 的优势是「系统的体积小」(系统镜像约 5 MB，而 Ubuntu 系列镜像接近 200 MB，可见一斑)、「运行时资源消耗低」和「提供包管理工具 <code>apk</code>，包管理机制完善」等。我是很推荐使用 Alpine 替代 Ubuntu 之类系统做为基础镜像环境的。</p>\n<p>– 参考<a href=\"https://www.dongwm.com/post/use-docker-compose/\">Python项目容器化实践(一) - Docker Compose</a></p>\n</blockquote>\n</li>\n<li><p>第2-4行是换源，修改 Alpine 使用国内中科大的源，加快软件下载速度。</p>\n</li>\n<li><p>第5行更新pip</p>\n</li>\n<li><p>第6-16行安装PIL依赖</p>\n</li>\n<li><p>第17行切换到&#x2F;app目录</p>\n</li>\n<li><p>第18行获取Python项目</p>\n</li>\n</ul>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><p>到这里基础环境基本配置好了，接下来在<code>docker-compose.yml</code>里对容器进一步配置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">qndxx</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:35555:8888</span></span><br><span class=\"line\">    <span class=\"comment\"># volumes:</span></span><br><span class=\"line\">    <span class=\"comment\">#   - ./FuckQNDXX:/app/FuckQNDXX</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">sh</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;cd /app/FuckQNDXX &amp;&amp; pip install -i https://mirrors.ustc.edu.cn/pypi/web/simple -r requirements.txt &amp;&amp; python MainSever.py&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>第1行version是指compose文件格式的版本，理论上根据安装的Docker版本来选择。1、2、3是大版本，还是 minor 版本</p>\n</li>\n<li><p>第2行services，每个容器是一个服务，这里比较简单，这个web应用只有qndxx一个服务</p>\n</li>\n<li><p>第4行设置容器名称为qndxx</p>\n</li>\n<li><p>第5行是对当前目录里的Dockerfile进行构建</p>\n</li>\n<li><p>第6行设置端口映射，将容器里的8888端口映射到主机端口的35555上。这里添加<code>127.0.0.1</code>是为后面nginx反向代理做准备</p>\n</li>\n<li><p>第8-9行，volume是卷的意思，这里是挂载文件，将当前文件夹下的FuckQNDXX挂在到容器对应目录</p>\n<blockquote>\n<p>这里说明以下，这里将第8-9行注释了是因为一开始调试代码及测试，通过挂载方式比较方便，修改的内容可以实时更新到容器中，同时，Flask app开启debug模式就基本上实现了热部署</p>\n</blockquote>\n</li>\n<li><p>第10行是切换目录到项目，安装必要依赖（通过requirments.txt管理），然后启动该应用</p>\n</li>\n<li><p>第11行设置容器自动重启</p>\n</li>\n</ul>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>在当前目录运行<code>tree -L 1</code>查看目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── docker-compose.yml</span><br><span class=\"line\">├── Dockerfile</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令，一键部署：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，基本上一劳永逸，部署就是上面这么简单。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>docker有点像虚拟机，有独立的网络，进入容器后就行打开了一个新的环境。但在部署docker容器的过程中，体会到docker和虚拟机不一样的地方。相对来说，虚拟机可以说是持久的，而docker是临时的，可以删除，然后快速重建。</p>\n<p>在配置容器过程中，配置PIL的环境花了一番时间，因为一开始不知道PIL需要依赖，也不知道需要什么依赖，然后看<a href=\"https://pillow.readthedocs.io/en/stable/installation.html\">官方文档</a>里面说明了安装使用PIL的一些必要依赖：</p>\n<blockquote>\n<p>We provide binaries for Linux for each of the supported Python versions in the manylinux wheel format. These include support for all optional libraries except libimagequant. Raqm support requires libraqm, fribidi, and harfbuzz to be installed separately</p>\n<p>以及</p>\n<p>You <strong>do not need to install all supported external libraries</strong> to use Pillow’s basic features. <strong>Zlib</strong> and <strong>libjpeg</strong> are required by default.</p>\n<p><strong>以及（划重点）</strong></p>\n<p><strong>There are Dockerfiles in our <a href=\"https://github.com/python-pillow/docker-images\">Docker images repo</a> to install the dependencies for some operating systems.</strong></p>\n</blockquote>\n<p>在官方的镜像仓库找到alpine的构建PIL环境的Dockerfile，其中只需要PIL依赖部分：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Pillow dependencies</span></span><br><span class=\"line\">jpeg-dev \\</span><br><span class=\"line\">zlib-dev \\</span><br><span class=\"line\">freetype-dev \\</span><br><span class=\"line\">lcms2-dev \\</span><br><span class=\"line\">openjpeg-dev \\</span><br><span class=\"line\">tiff-dev \\</span><br><span class=\"line\">tk-dev \\</span><br><span class=\"line\">tcl-dev \\</span><br><span class=\"line\">harfbuzz-dev \\</span><br><span class=\"line\">fribidi-dev</span><br></pre></td></tr></table></figure>\n\n<p>通过这个反复折腾PIL环境的过程，体会到了Docker与虚拟机之间的区别😥。这个过程就像捏泥人，你可以捏到你想要的样子为止，Docker也是你可以调试到你满意为止，期间容器反复重建。<del>舍不得你就输了</del></p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>使用Nginx进行反向代理：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">upstream</span> <span class=\"string\">qndxx &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">127.0.0.1:35555; # 与之前docker-compose。yml里设置映射的主机端口对应</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span> <span class=\"string\">35553 ssl; # 监听35553端口，这里注意不要和上面upstream里的端口一样</span></span><br><span class=\"line\">    <span class=\"attr\">gzip</span> <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">server_name</span>  <span class=\"string\">your-own-domain:35553; # 修改为自己的域名</span></span><br><span class=\"line\">    <span class=\"attr\">access_log</span> <span class=\"string\">/var/log/nginx/qndxx_access.log combined;</span></span><br><span class=\"line\">    <span class=\"attr\">error_log</span>  <span class=\"string\">/var/log/nginx/qndxx_error.log;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_redirect</span> <span class=\"string\">off;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://qndxx; # 设置代理服务器，请求发送到本地35553端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">Host                $host;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Real-IP           $remote_addr;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Forwarded-Ssl     on;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Forwarded-For     $proxy_add_x_forwarded_for;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Forwarded-Proto   $scheme;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Frame-Options     SAMEORIGIN;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">client_max_body_size</span>        <span class=\"string\">100m;</span></span><br><span class=\"line\">        <span class=\"attr\">client_body_buffer_size</span>     <span class=\"string\">128k;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">proxy_buffer_size</span>           <span class=\"string\">4k;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_buffers</span>               <span class=\"string\">4 32k;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_busy_buffers_size</span>     <span class=\"string\">64k;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_temp_file_write_size</span>  <span class=\"string\">64k;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个可以作为简单的Nginx的https模板使用，需要修改的地方也就是上面注释的地方。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><h3 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h3><p>docker容器化对原应用进行一些修改，比如<code>MainServer.py</code>中的运行语句：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- app.run(host=&#x27;127.0.0.1&#x27;, port=8888, debug=True)</span></span><br><span class=\"line\"><span class=\"addition\">+ app.run(host=&#x27;0.0.0.0&#x27;, port=8888, debug=True)</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>127.0.0.1</code>，会导致<code>Connection refused</code>，修改成<code>0.0.0.0</code>监听使用对容器qndxx的8888端口所有请求即可。解释这个原因，可以看一下这篇文章<a href=\"https://pythonspeed.com/articles/docker-connection-refused/\">Connection refused? Docker networking and how it impacts your image</a>，这里把文章两个图拿过来简单解释下：</p>\n<blockquote>\n<p>服务器正在容器网络名称空间内监听127.0.0.1，但是端口转发将指向外部IP，即172.17.0.2。</p>\n</blockquote>\n<p>明明白白的解释了，服务端没有监听到来自172.17.0.2的端口请求</p>\n<img data-src=\"docker.svg\" style=\"zoom:40%;\" />\n\n<blockquote>\n<p>主机端口转发只能连接到一个目的地，但您可以更改服务器进程监听的位置。您可以通过监听0.0.0.0来实现这一点，这意味着监听所有接口。</p>\n</blockquote>\n<img data-src=\"docker-portforward.svg\" style=\"zoom:40%;\" />\n\n<h3 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h3><h4 id=\"url-for\"><a href=\"#url-for\" class=\"headerlink\" title=\"url_for\"></a>url_for</h4><p>着重讲一下其中<code>url_for</code>函数参数设置引发的问题。</p>\n<p><code>fake_pic.html</code>中图片显示原来是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;&#123;url_for</span> (&#x27;<span class=\"attr\">.static</span>&#x27;, <span class=\"attr\">filename</span>=<span class=\"string\">pic_src,</span> <span class=\"attr\">_external</span>=<span class=\"string\">True)&#125;&#125;/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>本地部署当然是没问题，但是使用了nginx，使用的是子域名（带端口）（<code>https://test.umm.js.org.com:35553</code>），启用<code>_external</code>的情况下会导致图片的地址中将端口设成80（<code>http://test.um.js.org</code>），使得显示图片失败。查了下<code>_external</code>的<a href=\"https://flask.palletsprojects.com/en/1.1.x/api/?highlight=_external\">相关文档</a>：</p>\n<blockquote>\n<ul>\n<li><strong>_external</strong> – if set to <code>True</code>, an absolute URL is generated. Server address can be changed via <code>SERVER_NAME</code> configuration variable which falls back to the Host header, then to the IP and port of the request.</li>\n</ul>\n</blockquote>\n<p>我重新设置了<code>SERVER_NAME</code>、<code>SERVER_PORT</code>和<code>PREFERRED_URL_SCHEME</code>，但是什么变化没看到。后来随手删了这个参数，居然正常了？还不是很明白为什么。</p>\n<h4 id=\"静态资源缓存\"><a href=\"#静态资源缓存\" class=\"headerlink\" title=\"静态资源缓存\"></a>静态资源缓存</h4><p>项目部署后，遇到静态资源缓存问题：</p>\n<blockquote>\n<p>通过服务器获取截图图片，当修改期数后，再次生成，浏览器中截图始终不变，但服务器中的最新生成的截图（<code>latest.jpg</code>）已经更新。</p>\n</blockquote>\n<p>这里涉及到 flask 设置的默认参数<code>SEND_FILE_MAX_AGE_DEFAULT</code>，也就是缓存的最大时间，默认是 12h，即 43200s。在浏览器中查看静态资源的<code>header</code>中<code>Cache-Control</code>，也就是缓存策略，默认应该显示的是<code>43200</code>。</p>\n<p>由于flask默认设置的缓存时间太长了，虽然我们重新发送请求来获取新的截图，但浏览器认为这个资源已存在（未过期），生成的页面也就仍使用之前缓存的图片，并未重新从浏览器获取、刷新图片，造成图片显示错误的问题。</p>\n<p>解决方法就是将<code>SEND_FILE_MAX_AGE_DEFAULT</code>参数设置小一点即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;</span>] = timedelta(seconds=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>从Flask部署，到Dockerfille配置PIL环境，再到docker-compose管理以及Nginx反向代理，踩了很多坑，也学到了不少东西，理解了很多。实践出真知（<del>给我哭😭</del>）</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://www.dongwm.com/post/use-docker-compose/\">Python项目容器化实践(一) - Docker Compose</a></p>\n</li>\n<li><p><a href=\"https://pythonspeed.com/articles/docker-connection-refused/\">Connection refused? Docker networking and how it impacts your image</a></p>\n</li>\n<li><p><a href=\"https://flask.palletsprojects.com/en/1.1.x/api/?highlight=_external\">Flask API 文档</a></p>\n</li>\n</ul>\n","categories":["DevOps"],"tags":["Python","DevOps","Docker","Docker Compose","Flask","Nginx"]},{"title":"Docker Compose部署Jupyter Notebook","url":"/p/e1099939/","content":"<p>使用Docker Compose部署Jupyter Notebook服务，以及Nginx反代</p>\n<p>记录一下期间遇到的问题以及联和VS Code使用</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><ol>\n<li><p>编写<code>docker-compose.yml</code></p>\n <figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">service.jupyter:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">jupyter/minimal-notebook</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">jupyter</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">start-notebook.sh</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;127.0.0.1:8888:8888&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署（在yml同一目录下执行）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Nginx-反代\"><a href=\"#Nginx-反代\" class=\"headerlink\" title=\"Nginx 反代\"></a>Nginx 反代</h2><p>使用Nginx反向代理暴露本地端口(8888)</p>\n<h3 id=\"Nginx-支持-WebSocket\"><a href=\"#Nginx-支持-WebSocket\" class=\"headerlink\" title=\"Nginx 支持 WebSocket\"></a>Nginx 支持 WebSocket</h3><p>之前使用<a href=\"./506553f1\">Docker 部署 Flask App</a>文中Nginx的https模板可以拿来改一下用。但Jupyter使用到了ws协议来传输数据，所以Nginx需要加上对ws的支持。</p>\n<p>然后找到<a href=\"https://www.nginx.com/blog/websocket-nginx/\">官方博客</a>中提供的配置。改一下加进Nginx的https模板就能用。</p>\n<blockquote>\n<p>NGINX supports WebSocket by allowing a tunnel to be set up between a client and a backend server. For NGINX to send the Upgrade request from the client to the backend server, the <strong>Upgrade</strong> and <strong>Connection</strong> headers must be set explicitly, as in this example:</p>\n</blockquote>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">location</span> <span class=\"string\">/wsapp/ &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://wsbackend;</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_http_version</span> <span class=\"string\">1.1;</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_set_header</span> <span class=\"string\">Upgrade $http_upgrade;</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_set_header</span> <span class=\"string\">Connection &quot;Upgrade&quot;;</span></span><br><span class=\"line\">    <span class=\"attr\">proxy_set_header</span> <span class=\"string\">Host $host;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完整的配置就是：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">upstream</span> <span class=\"string\">jupyterdev &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">127.0.0.1:8888; # 主机端口</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">listen</span> <span class=\"string\">22333 ssl;  # 监听22333端口，这里注意不要和上面</span></span><br><span class=\"line\">    <span class=\"attr\">gzip</span> <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">server_name</span>  <span class=\"string\">domain:22333; # 修改为自己的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">access_log</span> <span class=\"string\">/var/log/nginx/jupyter_access.log combined;</span></span><br><span class=\"line\">    <span class=\"attr\">error_log</span>  <span class=\"string\">/var/log/nginx/jupyter_error.log;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_redirect</span> <span class=\"string\">off;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://jupyterdev; # 设置代理服务器，请求发送</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">Host                $http_host;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Real-IP           $remote_addr;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Forwarded-Ssl     on;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Forwarded-For     $proxy_add_x_forwarded_for;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        # 使得Nginx支持websocket</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_http_version</span> <span class=\"string\">1.1;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span> <span class=\"string\">Upgrade $http_upgrade;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span> <span class=\"string\">Connection &quot;upgrade&quot;;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Forwarded-Proto   $scheme;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_set_header</span>  <span class=\"string\">X-Frame-Options     SAMEORIGIN;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">client_max_body_size</span>        <span class=\"string\">100m;</span></span><br><span class=\"line\">        <span class=\"attr\">client_body_buffer_size</span>     <span class=\"string\">128k;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">proxy_buffer_size</span>           <span class=\"string\">4k;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_buffers</span>               <span class=\"string\">4 32k;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_busy_buffers_size</span>     <span class=\"string\">64k;</span></span><br><span class=\"line\">        <span class=\"attr\">proxy_temp_file_write_size</span>  <span class=\"string\">64k;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>刷新Nginx的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置Jupyter-Notebook\"><a href=\"#配置Jupyter-Notebook\" class=\"headerlink\" title=\"配置Jupyter Notebook\"></a>配置Jupyter Notebook</h2><p>查看docker-compose查看日志，获取token：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose logs --<span class=\"built_in\">tail</span> 50 service.jupyter</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器中访问jupyter服务，输入token设置登录密码。</p>\n<h2 id=\"VS-Code使用Jupyter-Notebook\"><a href=\"#VS-Code使用Jupyter-Notebook\" class=\"headerlink\" title=\"VS Code使用Jupyter Notebook\"></a>VS Code使用Jupyter Notebook</h2><p>VS Code 的 Python 插件已经支持 Jupyter Notebook。</p>\n<ul>\n<li>安装 Python 插件</li>\n<li>打开命令面板（<code>ctrl+shift+p</code>）</li>\n<li>输入Jupyter，选择连接到远程Jupyter服务</li>\n</ul>\n<p><img data-src=\"/p/e1099939/cmd-pannel.jpg\"></p>\n<p>此时与Jupyter Notebook服务器的链接🔗还是断开的，需要运行一下。然后会显示让你输入密码，就是之前使用token设置的。</p>\n<p><img data-src=\"/p/e1099939/conn-jupyter.jpg\"></p>\n<p>连接成功后就可以快乐的玩耍了🎉</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>期间遇到最大的问题就是Jupyter需要WebSocket支持。但我不知道，从哪里知道？</p>\n<p>打开开发者工具会看到右上角有个红色的×伴随着数字，数字表示资源连接失败的数量。</p>\n<p>查看<code>Console</code>面板查看哪些资源连接失败。这时候会看到一些<code>ws://xxx</code>的东西。这里就说明Jupyter Notebook用到了WebSocket。</p>\n<p>知道了这些就好办了，之后查一下Nginx支持WebSocket的配置加上去就可以了。</p>\n<blockquote class=\"blockquote-center\">\n<p>学会描述问题很重要</p>\n\n</blockquote>\n","categories":["DevOps"],"tags":["Python","Docker Compose","Nginx","Jupyter","VS Code"]},{"title":"git commit gpg 加签失败","url":"/p/11dacf1e/","content":"<p>提交代码时出现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[info] error: gpg failed to sign the data</span><br><span class=\"line\">fatal: failed to write commit object</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>stack overflow上看到有一个排查的<a href=\"https://stackoverflow.com/questions/39494631/gpg-failed-to-sign-the-data-fatal-failed-to-write-commit-object-git-2-10-0/47561300#47561300\">教程</a></p>\n<p>然后打开debug, 重新提交, 查看日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; GIT_TRACE=1 git commit -m <span class=\"string\">&quot;xxx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">run_command: /usr/local/bin/gpg --status-fd=2 -bsau XXX</span><br><span class=\"line\">error: gpg failed to sign the data</span><br><span class=\"line\">fatal: failed to write commit object</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;dummy&#x27;</span> | /usr/local/bin/gpg --status-fd=2 -bsau XXX</span><br><span class=\"line\">gpg: 签名时失败： 缺少 pinentry</span><br><span class=\"line\">[GNUPG:] FAILURE sign 67108949</span><br><span class=\"line\">gpg: signing failed: 缺少 pinentry</span><br></pre></td></tr></table></figure>\n\n<p>然后搜索这个关键字，居然找到自己写的<a href=\"/p/503cf802\">文章</a>，闭环了：</p>\n<p><img data-src=\"/p/11dacf1e/search-result-contain-my-article.png\" alt=\"搜到了自己的文章\"></p>\n<p>参考<a href=\"https://docs.github.com/zh/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key#telling-git-about-your-gpg-key\">将您的 GPG 密钥告知 Git</a>重新配置了一遍gpg</p>\n<p>最后<code>brew install pinentry</code>解决, 回头看应该是 <code>pinentry-mac</code> 版本旧导致，更新一下就可以。</p>\n<p>通过debug看到出现问题的原因，除了我遇到的pinentry的问题，也许是gpg key过期、私钥设置不正确等，可以参考<a href=\"https://gist.github.com/paolocarrasco/18ca8fe6e63490ae1be23e84a7039374\">paolocarrasco&#x2F;README.md</a></p>\n<blockquote class=\"blockquote-center\">\n<p>时间一晃，又两周年了<br>入职是樱花飘落的时候，今天又和樱花撞个满怀</p>\n\n</blockquote>\n","categories":["Git"],"tags":["Tool","App","Mac"]},{"title":"Git 笔记","url":"/p/810d4974/","content":"<p>记录一下 Git 中经常使用的操作以及一些问题解决方法</p>\n<span id=\"more\"></span>\n\n<h2 id=\"同步原仓库到-fork-仓库\"><a href=\"#同步原仓库到-fork-仓库\" class=\"headerlink\" title=\"同步原仓库到 fork 仓库\"></a>同步原仓库到 fork 仓库</h2><p>这个操作是在 <a href=\"https://github.com/selfteaching/the-craft-of-selfteaching/issues/67\">Github进行fork后如何与原仓库同步：重新fork很省事，但不如反复练习版本合并 #67</a> 学来的，备忘一下。</p>\n<ol>\n<li><p>进入到本地clone的目录下查看远程仓库的路径</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置上游仓库地址为原仓库地址</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://github.com/xxx/xzy.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否有未提交的修改，主要是为了避免merge上游仓库到自己的仓库时出现大量冲突</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取 xiaolai 原仓库的更新</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git fetch upstream</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换到 master 分支：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并原仓库的master分支：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge upstream/master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把本地仓库推送到 Github 远程仓库</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"提示HTTP2层的错误\"><a href=\"#提示HTTP2层的错误\" class=\"headerlink\" title=\"提示HTTP2层的错误\"></a>提示HTTP2层的错误</h2><p>Q: Git 同步代码到 GitHub 时出现类似这样的报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error in the HTTP2 framing layer</span><br></pre></td></tr></table></figure>\n\n<p>A: 切到 HTTP 1.1 或者<a href=\"#%E4%BF%AE%E6%94%B9git%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%96%B9%E5%BC%8F\">修改git连接远程仓库的方式</a>为SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 切换到 HTTP 1.1</span></span><br><span class=\"line\">git config --global http.version HTTP/1.1</span><br><span class=\"line\"><span class=\"comment\"># 切回到 HTTP 2</span></span><br><span class=\"line\">git config --global http.version HTTP/2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"git-通过-HTTP-连接远程仓库失败\"><a href=\"#git-通过-HTTP-连接远程仓库失败\" class=\"headerlink\" title=\"git 通过 HTTP 连接远程仓库失败\"></a>git 通过 HTTP 连接远程仓库失败</h2><p>Q: 通过HTTPS方式无法连接到 GitHub 出现以下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/xxx/repo_abc.git/&#x27;: Empty reply from server</span><br></pre></td></tr></table></figure>\n\n<p>A: HTTPS 方式修改为 SSH，参考<a href=\"#%E4%BF%AE%E6%94%B9git%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%96%B9%E5%BC%8F\">修改git连接远程仓库的方式</a></p>\n<h2 id=\"修改git连接远程仓库的方式\"><a href=\"#修改git连接远程仓库的方式\" class=\"headerlink\" title=\"修改git连接远程仓库的方式\"></a>修改git连接远程仓库的方式</h2><blockquote>\n<p>还是 SSH 方式比较稳</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改为 SSH 方式</span></span><br><span class=\"line\">git remote set-url origin git@github.com:xxx/repo_name.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改为 HTTPS 方式</span></span><br><span class=\"line\">git remote set-url origin https://github.com/xxx/repo_name.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/selfteaching/the-craft-of-selfteaching/issues/67\">Github进行fork后如何与原仓库同步：重新fork很省事，但不如反复练习版本合并 #67</a></li>\n</ul>\n","categories":["Git"],"tags":["Git","GitHub"]},{"title":"VHDL实现异步十进制加法计数器","url":"/p/69a664c6/","content":"<p>初学VHDL，练手写了一个异步十进制加法计数器，过程有许多细节上的错误，在此记录一下。</p>\n<span id=\"more\"></span>\n\n<p><strong>VHDL</strong>，全称<strong>超高速集成电路硬件描述语言</strong>（英语：**<a href=\"https://zh.wikipedia.org/wiki/VHSIC\" title=\"VHSIC\">VHSIC</a> very high-speed hardware description language**），在基于<a href=\"https://zh.wikipedia.org/wiki/%E8%A4%87%E9%9B%9C%E5%8F%AF%E7%A8%8B%E5%BC%8F%E9%82%8F%E8%BC%AF%E8%A3%9D%E7%BD%AE\" title=\"复杂可编程逻辑器件\">复杂可编程逻辑器件</a>、<a href=\"https://zh.wikipedia.org/wiki/%E7%8E%B0%E5%9C%BA%E5%8F%AF%E7%BC%96%E7%A8%8B%E9%80%BB%E8%BE%91%E9%97%A8%E9%98%B5%E5%88%97\" title=\"现场可编程逻辑门阵列\">现场可编程逻辑门阵列</a>和<a href=\"https://zh.wikipedia.org/wiki/%E7%89%B9%E6%AE%8A%E6%87%89%E7%94%A8%E7%A9%8D%E9%AB%94%E9%9B%BB%E8%B7%AF\" title=\"专用集成电路\">专用集成电路</a>的<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF\" title=\"数字电路\">数字系统</a> 设计中有着广泛的应用。（via 维基百科）</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><ul>\n<li><p>异步功能实现：信号 <code>clr</code>  高电平实现异步清零</p>\n</li>\n<li><p>十进制实现：</p>\n<ul>\n<li>利用VHDL中的标准逻辑矢量类型 STD_LOGIC_VECTOR 构建四位的计数变量</li>\n<li>运用 <strong>IF</strong> 语句实现十进制循环 ：“0000” -&gt;“1001” -&gt;“0000”</li>\n</ul>\n</li>\n<li><p>利用Quartus进行仿真检测其功能实现</p>\n</li>\n</ul>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>构建实体 <code>tenAdd</code>： <del>瞎起的</del></p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">entity</span> tenAdd <span class=\"keyword\">is</span></span><br><span class=\"line\">    <span class=\"keyword\">port</span>( clr, clk : <span class=\"keyword\">in</span> <span class=\"built_in\">std_logic</span>;</span><br><span class=\"line\">          cnt10: <span class=\"keyword\">out</span> <span class=\"built_in\">std_logic_vector</span> (<span class=\"number\">3</span> <span class=\"keyword\">downto</span> <span class=\"number\">0</span>)); <span class=\"comment\">-- 设置一个四位矢量计数</span></span><br><span class=\"line\"><span class=\"keyword\">end</span> tenAdd;</span><br></pre></td></tr></table></figure>\n\n<p>条件判断实现计数器循环：</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (clr = <span class=\"string\">&#x27;1&#x27;</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">   count &lt;= <span class=\"string\">&quot;0000&quot;</span>; <span class=\"comment\">-- 0000 要用双引号括起来，单引号只能引单个字符</span></span><br><span class=\"line\"><span class=\"keyword\">elsif</span> clk<span class=\"symbol\">&#x27;event</span> <span class=\"keyword\">and</span> clk = <span class=\"string\">&#x27;1&#x27;</span> <span class=\"keyword\">then</span> <span class=\"comment\">-- clk上升沿触发计数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count &lt; <span class=\"string\">&quot;1001&quot;</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">    count &lt;= count + <span class=\"number\">1</span>; <span class=\"comment\">-- 计数加1</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    count &lt;= <span class=\"string\">&quot;0000&quot;</span>; <span class=\"comment\">-- 计数到9之后回到0000</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br></pre></td></tr></table></figure>\n\n<p>– PS. 上面的<code>count</code>是在结构体中定义的变量，不需要在实体中提前定义。</p>\n<h2 id=\"仿真测试\"><a href=\"#仿真测试\" class=\"headerlink\" title=\"仿真测试\"></a>仿真测试</h2><ol>\n<li><p>关于仿真，在Quartus中，新建一个<code>University Program VWF</code>进行波形仿真：</p>\n<ul>\n<li><p>在<code>Edit</code> -&gt; <code>Insert</code> -&gt; <code>Insert Node or Bus...</code></p>\n</li>\n<li><p>在<code>Node Finder...</code> -&gt;<code>List</code> 里面选择要控制和查看的信号</p>\n</li>\n</ul>\n</li>\n<li><p>给<code>clk</code>加一个连续的方波信号观察，输出变量值的变化</p>\n</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>一些自己容易忽略的小细节：</p>\n<blockquote>\n<p><code>&lt;=</code>: 用于信号赋值，延迟赋值  – **信号赋初值的时候可以用 :&#x3D; **）</p>\n<p><code>:=</code>: 用于变量赋值，立即赋值</p>\n<p>保存文件的时候文件名要和实体名一样，不一致会出现<code>Error: xxx undefined</code></p>\n</blockquote>\n<p>完整程序：<a href=\"/article_code/decimal-addition-counter.vhd\">异步十进制加法计数器</a></p>\n","categories":["EDA"],"tags":["VHDL","EDA"]},{"title":"Hexo 博客备份","url":"/p/cbef7cfa/","content":"<p>将写作分支和站点部署分支分离</p>\n<blockquote>\n<p>Hexo官方推荐的方式是把master作为写作分支，另外使用public分支作为部署分支。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"直接使用Git备份\"><a href=\"#直接使用Git备份\" class=\"headerlink\" title=\"直接使用Git备份\"></a>直接使用Git备份</h2><ol>\n<li>在Github上新建一个<code>repository</code>或者新建一个分支用于存放备份文件</li>\n<li>命令行切换目录到待上传文件夹，执行<code>git init</code>初始化本地仓库</li>\n<li><code>git add .</code>添加所有变化文件以及新文件</li>\n<li><code>git commit -m &#39;blah&#39;</code>提交修改说明</li>\n<li><code>git remote add origin git@server-name:path/repo-name.git</code>关联远程库<br><img data-src=\"/p/cbef7cfa/ssh-address.png\" alt=\"远程仓库地址\"></li>\n<li>第一次使用<code>push</code>将本地文件同步到远程仓库使用<code>git push -u origin master</code>，此后，使用<code>git push origin master</code>进行同步。</li>\n</ol>\n<p>这样就完成创建及上传本地仓库。此后日常更新备份，同步修改：</p>\n<ol>\n<li><p><code>git add .</code></p>\n</li>\n<li><p><code>git commit -m &#39;blah&#39;</code></p>\n</li>\n<li><p><code>git push origin master</code></p>\n</li>\n</ol>\n<blockquote>\n<p>显示<code>INFO  Deploy done: git</code>表示上传成功</p>\n</blockquote>\n<h2 id=\"使用hexo插件实现\"><a href=\"#使用hexo插件实现\" class=\"headerlink\" title=\"使用hexo插件实现\"></a>使用hexo插件实现</h2><p>插件：<code>hexo-git-backup</code></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果hexo版本是2.x.x，则使用<code>npm install hexo-git-backup@0.0.91 --save</code></p>\n<p>如果hexo版本是3.x.x，则使用<code>npm install hexo-git-backup --save</code></p>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p>如果之前使用<code>--save</code>安装过<code>hexo-git-backup</code>，要先删除已安装插件<code>hexo-git-backup</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm remove hexo-git-backup</span><br><span class=\"line\">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><p>在站点配置文件<code>_config.yml</code>中添加如下设置，可参考<a href=\"https://github.com/coneycode/hexo-git-backup/blob/master/README.md\">README</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repository:</span></span><br><span class=\"line\">       <span class=\"attr\">github:</span> <span class=\"string\">git@github.com:xxx/xxx.git,branchName</span></span><br><span class=\"line\">       <span class=\"attr\">gitcafe:</span> <span class=\"string\">git@github.com:xxx/xxx.git,branchName</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo backup</span><br><span class=\"line\">或者</span><br><span class=\"line\">hexo b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可选项\"><a href=\"#可选项\" class=\"headerlink\" title=\"可选项\"></a>可选项</h3><ol>\n<li><p>备份主题：<code>theme: your theme name</code></p>\n</li>\n<li><p>commit message: <code>message: update xxx</code></p>\n</li>\n</ol>\n<p>such as:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">backup:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">message:</span> <span class=\"string\">update</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">    <span class=\"attr\">repository:</span></span><br><span class=\"line\">       <span class=\"attr\">github:</span> <span class=\"string\">git@github.com:xxx/xxx.git,branchName</span></span><br><span class=\"line\">       <span class=\"attr\">gitcafe:</span> <span class=\"string\">git@github.com:xxx/xxx.git,branchName</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>Attention: if you do as above, the dir <code>themes/coney/.git</code>will be removed</strong></p>\n</blockquote>\n<h3 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h3><p>执行<code>hexo b</code>出现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">fatal: &#x27;github&#x27; does not appear to be a git repository</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<p>解决方法参考这个<a href=\"https://github.com/coneycode/hexo-git-backup/issues/8\">issue</a>，出现上面的提示，说明github远端仓库和本地仓库的关联关系没有建立，可以尝试两种方法解决：</p>\n<ol>\n<li>关联远程仓库后执行<code>hexo b</code></li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add github git@github.com:xxx/xxx.git</span><br><span class=\"line\">hexo b</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>删除本地目录下的 .git 目录，然后进行备份<code>hexo b</code>，看到类似以下输出说明成功：</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[new branch] master -&gt; master</span><br><span class=\"line\">Branch master set up to track remote branch master from github.</span><br><span class=\"line\">INFO Backup done: git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在很久远的过去（具体我忘了），刚开始学搭博客的时候，瞎**玩（前人养虫，后人除虫😭）。</p>\n<p>在文件夹下已存在了git版本库，然后我想，那就换它的上一级文件夹同步，上一级文件夹没有git版本库，这样就避免版本库冲突。</p>\n<p>但是，问题来了，上传是上传了，但是变成一个假的文件夹(如图)，然后开始除虫😭。</p>\n<p><img data-src=\"/p/cbef7cfa/false-folder.png\"></p>\n<p>问题：文件夹中包含其他仓库使得上传文件夹出现问题。</p>\n<p>解决的办法：</p>\n<p>删除该文件夹下的git版本库：<code>git rm -r -f --cached 文件夹路径</code>(记得带–cached，删缓存，不然就是删库GG)</p>\n<p>或者：直接删除其中的<code>.git</code> 文件，一般都是隐藏的（windows下）</p>\n<h3 id=\"安装插件出现出现warning\"><a href=\"#安装插件出现出现warning\" class=\"headerlink\" title=\"安装插件出现出现warning\"></a>安装插件出现出现warning</h3><blockquote>\n<p>found 3 vulnerabilities (1 low, 2 high)<br>run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details</p>\n</blockquote>\n<p>然后我run <code>npm audit fix</code> 但是没有fix显示<code>3 vulnerabilities require manual review. See the full report for details.</code></p>\n<p>然后去查了一下：在一个issue下看到类似的问题，然后说是：<a href=\"https://github.com/DIYgod/RSSHub/issues/262\"><code>这些是依赖的个别库的依赖的个别库版本过低导致的，可以无视</code></a></p>\n","categories":["Hexo"],"tags":["Git","Hexo"]},{"title":"Github Action 自动部署 Hexo 博客","url":"/p/3d7401da/","content":"<p>RSS 上看到<a href=\"https://printempw.github.io/\">@printempw</a>写了一篇<a href=\"https://printempw.github.io/use-github-actions-to-deploy-hexo-blog\">使用 GitHub Actions 自动部署 Hexo 博客</a>，感觉很方便。</p>\n<p>配置自动化部署后，写完博客提交更新就自动部署，30s 左右就可以完成。顺便学习下 Github Action。</p>\n<p><del>当然，究极原因还是“懒”啦</del></p>\n<span id=\"more\"></span>\n\n<h2 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h2><div class=\"note warning\"><p>最新的 Blog GitHub Action Workflow 参考 <a href=\"https://github.com/umm233/Daily-Script/tree/master/blog/workflow\">blog&#x2F;workflow</a></p>\n</div>\n\n<ul>\n<li><p>2025-03-02 fix <code>ReferenceError: ReadableStream is not defined</code></p>\n<blockquote>\n<p>升级 Node 版本解决</p>\n</blockquote>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- node-version: &#x27;16&#x27;</span></span><br><span class=\"line\"><span class=\"addition\">+ node-version: &#x27;20&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>原来博客的部署方式是先清理缓存文件，生成并部署，然后同步博客源码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean &amp;&amp; hexo g -d &amp;&amp; hexo b</span><br></pre></td></tr></table></figure>\n\n<p>具体可参考之前写的 <a href=\"/p/cbef7cfa\">Hexo 博客备份</a></p>\n<h2 id=\"博客配置\"><a href=\"#博客配置\" class=\"headerlink\" title=\"博客配置\"></a>博客配置</h2><h3 id=\"博客结构\"><a href=\"#博客结构\" class=\"headerlink\" title=\"博客结构\"></a>博客结构</h3><ul>\n<li><p><code>hexo-blog</code>: 存放博客源码</p>\n</li>\n<li><p><code>umm233.github.io</code>: Hexo 生成的静态博客页面</p>\n</li>\n</ul>\n<h3 id=\"生成部署密钥\"><a href=\"#生成部署密钥\" class=\"headerlink\" title=\"生成部署密钥\"></a>生成部署密钥</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f hexo-deploy-key -C <span class=\"string\">&quot;umm233.github.io&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>当前目录下会生成<code>hexo-deploy-key</code>和<code>hexo-deploy-key.pub</code> 两个文件。</p>\n<h3 id=\"配置部署密钥\"><a href=\"#配置部署密钥\" class=\"headerlink\" title=\"配置部署密钥\"></a>配置部署密钥</h3><ul>\n<li><p>在<code>hexo-blog</code>仓库<code>Settings -&gt; Secrets -&gt; Add a new secret</code>页面上添加一个新的<code>Secret</code>：</p>\n<ul>\n<li><p><code>Name</code>: DEPLOY_SECRET</p>\n</li>\n<li><p><code>Value</code>: <code>hexo-deploy-key</code>中的私钥</p>\n</li>\n</ul>\n<p><img data-src=\"/p/3d7401da/hexo-blog-deploy-secret-setting.png\" alt=\"添加 hexo-blog-deploy-secret 设置\"></p>\n</li>\n<li><p>在<code>umm233.github.io</code>仓库添加一个<code>Deploy keys</code></p>\n<ul>\n<li><p><code>Title</code>: hexo-deploy-key</p>\n</li>\n<li><p><code>Key</code>: 填入<code>hexo-deploy-key.pub</code>中的公钥内容，以<code>ssh-rsa</code>, <code>ssh-ed25519</code>, <code>ecdsa-sha2-nistp256</code>, <code>ecdsa-sha2-nistp384</code>, or <code>ecdsa-sha2-nistp521</code>开头的</p>\n</li>\n<li><p>勾选<code>Allow write access</code>选项，允许写入权限</p>\n</li>\n</ul>\n<p><img data-src=\"/p/3d7401da/hexo-deploy-key-setting.png\" alt=\"添加 hexo-deploy-key 设置\"></p>\n</li>\n</ul>\n<h2 id=\"编写-Workflow\"><a href=\"#编写-Workflow\" class=\"headerlink\" title=\"编写 Workflow\"></a>编写 Workflow</h2><p>直接在<code>hexo-blog</code>仓库下，点击<code>Action</code>，这会在仓库根目录下创建<code>.github/workflows/main.yml</code></p>\n<p>如果你的 Hexo 博客结构和我的类似，只需要修改下面的<code>GIT_USER</code>和<code>GIT_EMAIL</code>即可使用：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只监听 source 分支的改动</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义环境变量</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">GIT_USER:</span> <span class=\"string\">your</span> <span class=\"string\">name</span></span><br><span class=\"line\">  <span class=\"attr\">GIT_EMAIL:</span> <span class=\"string\">your</span> <span class=\"string\">email</span> <span class=\"string\">address</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build-and-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 获取博客源码和主题</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 这里用的是 Node.js 13.x，14.x 生成 Hexo 静态页面会有问题</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Node.js</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;13&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          npm install</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 从之前设置的 secret 获取部署私钥</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">SSH</span> <span class=\"string\">Keys</span> <span class=\"string\">and</span> <span class=\"string\">known_hosts</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">DEPLOY_SECRET:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DEPLOY_SECRET</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\"><span class=\"string\">          mkdir -p ~/.ssh</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;$DEPLOY_SECRET&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.name $GIT_USER</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.email $GIT_EMAIL</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 生成并部署 `npx hexo clean &amp;&amp; npx hexo g -d` or `npm run deploy`</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          npx hexo clean &amp;&amp; npx hexo g -d</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 部署后更新博客源码，用于添加 abbrlink</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Update</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">sh</span> <span class=\"string\">&quot;$&#123;GITHUB_WORKSPACE&#125;/.github/script/blog-update.sh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><h3 id=\"Node-js-版本\"><a href=\"#Node-js-版本\" class=\"headerlink\" title=\"Node.js 版本\"></a>Node.js 版本</h3><p><code>node-version: &#39;13&#39;</code>：@printempw 使用的是 14.x，而我在使用时发现 14.x 部署时会出现类似以下的错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</span><br></pre></td></tr></table></figure>\n\n<p>我的hexo 版本是<code>5.0.2</code>仍会出现，应该是<code>Node.js</code>版本和<code>Hexo</code>不适配的原因，这边<code>Node.js</code>版本降到<code>13.x</code>解决</p>\n<h3 id=\"Git-身份认证\"><a href=\"#Git-身份认证\" class=\"headerlink\" title=\"Git 身份认证\"></a>Git 身份认证</h3><p>设置环境变量<code>GIT_USER</code>和<code>GIT_EMAIL</code>，用于 ssh 验证身份，否则会出现类似<code>Author identity unknown</code>的错误，解决方法是告诉git你是谁，后面在配置，密钥的时候配置用户名和电子邮件地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"variable\">$GIT_USER</span></span><br><span class=\"line\">git config --global user.email <span class=\"variable\">$GIT_EMAIL</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pandoc-依赖\"><a href=\"#pandoc-依赖\" class=\"headerlink\" title=\"pandoc 依赖\"></a>pandoc 依赖</h3><p>如果使用了<code>mathjax</code>且 渲染引擎是<code>hexo-renderer-pandoc</code>，直接<code>npm install</code> 安装依赖，后面会出现以下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: R][hexo-renderer-pandoc] On /home/runner/work/hexo-blog/hexo-blog/node_modules/hexo-theme-next/languages/README.md</span><br></pre></td></tr></table></figure>\n\n<p>原因是<code>hexo-renderer-pandoc</code>依赖了<code>pandoc</code>，在环境里未安装<code>pandoc</code>导致的解决方法有两个：</p>\n<ol>\n<li>安装<code>pandoc</code>，在<code>Install Dependencies</code>任务处添加<code>pandoc</code>依赖安装：</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/jgm/pandoc/releases/download/2.10.1/pandoc-2.10.1-1-amd64.deb</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i pandoc-2.10.1-1-amd64.deb</span><br><span class=\"line\">npm install hexo-renderer-pandoc --save  <span class=\"comment\"># for mathjax</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改渲染引擎为原生的<code>hexo-renderer-marked</code>，通过修改<code>package.json</code>实现：</li>\n</ol>\n  <figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &quot;hexo-renderer-pandoc&quot;: &quot;^0.3.0&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+ &quot;hexo-renderer-marked&quot;: &quot;^3.0.0&quot;,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"abbrlink\"><a href=\"#abbrlink\" class=\"headerlink\" title=\"abbrlink\"></a>abbrlink</h3><p>博客文章链接是在 Hexo 生成静态页面时自动生成的，生成后未更新到博客源码。所以需要加一个任务，用于部署后 push 到源码分支<code>hexo-blog</code>。</p>\n<p>最先我是直接添加更改，提交，推送到 Github:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Update</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">  <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    git add .</span></span><br><span class=\"line\"><span class=\"string\">    git commit -m &quot;update blog by Github Action&quot;</span></span><br><span class=\"line\"><span class=\"string\">    git push origin master</span></span><br></pre></td></tr></table></figure>\n\n<p>但是这样会有一个问题，当生成静态页面后，源码没有任何变化的时候，提交的时候就会出现问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nothing to commit, working tree clean</span><br><span class=\"line\">Error: Process completed with exit code 1.</span><br></pre></td></tr></table></figure>\n\n<p>后面就想有没有检查是否有更改，有的话才进行推送。然后在<a href=\"https://blog.yrpang.com/posts/43978\">使用shell脚本判断git状态</a>文中找到了一种解决方法，作者也遇到了类似的问题。</p>\n<blockquote>\n<p>通过<code>git status --porcelain</code>检查文件是否有修改，整理成<code>blog-update.sh</code>，存放在<code>.github/script</code>，内容如下：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"subst\">$(git status --porcelain)</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;nothing to update.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    git add .</span><br><span class=\"line\">    git commit -m <span class=\"string\">&quot;triggle by commit <span class=\"variable\">$&#123;GITHUB_SHA&#125;</span>&quot;</span> -a</span><br><span class=\"line\">    git push origin master</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"部署结果\"><a href=\"#部署结果\" class=\"headerlink\" title=\"部署结果\"></a>部署结果</h2><p>写完文章，同步到<code>hexo-blog</code>分支后就触发Github Action 自动部署博客，整个过程耗时在 30s 以内😃🎉</p>\n<p><img data-src=\"/p/3d7401da/deploy-action-result.png\" alt=\"构建概览\"></p>\n<p><img data-src=\"/p/3d7401da/action-detail.png\" alt=\"构建详情\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://printempw.github.io/use-github-actions-to-deploy-hexo-blog\">使用 GitHub Actions 自动部署 Hexo 博客</a></p>\n</li>\n<li><p><a href=\"https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions\">利用 Github Actions 自动部署 Hexo 博客</a></p>\n</li>\n<li><p><a href=\"https://frostming.com/2020/04-26/github-actions-deploy\">使用 GitHub Actions 实现博客自动化部署</a></p>\n</li>\n<li><p><a href=\"https://blog.yrpang.com/posts/43978\">使用shell脚本判断git状态</a></p>\n</li>\n</ul>\n<blockquote class=\"blockquote-center\">\n<p>吴孟达走了<br>– 2021.02.27</p>\n\n</blockquote>\n","categories":["Hexo"],"tags":["Hexo","Github Action"]},{"title":"Hexo关于unknown block tag: cq","url":"/p/f8b3ca18/","content":"<p>Hexo 生成静态文件时出现关于<code>unknown block tag: cq</code>的问题解决。很奇怪···</p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>之前通过 Hexo 更新 5.0，主题可以通过npm来安装，直接 <code>npm install hexo-theme-next</code>，然后今天把 <code>node_modules</code> 路径中的 <code>hexo-theme-next</code> 移动到 <code>theme</code> 文件夹中，然后因为一些其他原因将<code>hexo-theme-next</code> 移动回 <code>node_modules</code> 然后执行 <code>hexo g</code>，出现如下错误，提示 <code>unknown block tag: cq</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">INFO  Start processing</span><br><span class=\"line\">FATAL &#123; err:</span><br><span class=\"line\">   &#123; Nunjucks Error: 出现错误定位的文件路径 [Line 41, Column 4] unknown block tag: cq</span><br><span class=\"line\">       =====               Context Dump               =====</span><br><span class=\"line\">       === (line number probably different from source) ===</span><br><span class=\"line\">        // 出现错误的文章内容</span><br><span class=\"line\">       =====             Context Dump Ends            =====</span><br><span class=\"line\">       at formatNunjucksError (...\\node_modules\\hexo\\lib\\extend\\tag.js:171:13)</span><br><span class=\"line\">       at Promise.fromCallback.catch.err (...\\node_modules\\hexo\\lib\\extend\\tag.js:246:36)</span><br><span class=\"line\">       at tryCatcher (...\\node_modules\\bluebird\\js\\release\\util.js:16:23)</span><br><span class=\"line\">       at Promise._settlePromiseFromHandler (...\\node_modules\\bluebird\\js\\release\\promise.js:547:31)</span><br><span class=\"line\">       at Promise._settlePromise (...\\node_modules\\bluebird\\js\\release\\promise.js:604:18)</span><br><span class=\"line\">       at Promise._settlePromise0 (...\\node_modules\\bluebird\\js\\release\\promise.js:649:10)</span><br><span class=\"line\">       at Promise._settlePromises (...\\node_modules\\bluebird\\js\\release\\promise.js:725:18)</span><br><span class=\"line\">       at _drainQueueStep (...\\node_modules\\bluebird\\js\\release\\async.js:93:12)</span><br><span class=\"line\">       at _drainQueue (...\\node_modules\\bluebird\\js\\release\\async.js:86:9)</span><br><span class=\"line\">       at Async._drainQueues (...\\node_modules\\bluebird\\js\\release\\async.js:102:5)</span><br><span class=\"line\">       at Immediate.Async.drainQueues [as _onImmediate] (...\\node_modules\\bluebird\\js\\release\\async.js:15:14)</span><br><span class=\"line\">       at runCallback (timers.js:705:18)</span><br><span class=\"line\">       at tryOnImmediate (timers.js:676:5)</span><br><span class=\"line\">       at processImmediate (timers.js:658:5)</span><br><span class=\"line\">     name: &#x27;Nunjucks Error&#x27;,</span><br><span class=\"line\">     line: 41,</span><br><span class=\"line\">     location:</span><br><span class=\"line\">      &#x27;\\u001b[出现错误定位的文件路径 [Line 41, Column 4]&#x27;,</span><br><span class=\"line\">     type: &#x27;unknown block tag: cq&#x27;,</span><br><span class=\"line\">     message:</span><br><span class=\"line\">      &#x27;\\u001b[出现错误定位的文件路径 [Line 41, Column 4] \\u001b[31munknown block tag: cq\\u001b[39m\\n\\u001b[36m</span><br><span class=\"line\">      // 出现错误的文章内容</span><br><span class=\"line\">      =====             Context Dump Ends            =====\\u001b[39m&#x27; &#125; &#125; &#x27;Something\\&#x27;s wrong. Maybe you can find the solution here: %s&#x27; &#x27;\\u001b[4mhttps://hexo.io/docs/troubleshooting.html\\u001b[24m&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>问题很明显: <code>unknown block tag: cq</code>，无法解析 <code>cq</code> 标签。<br>Hexo 无法解析 <code>cq</code> 标签，因为我在文章中用到NexT主题所提供的 <code>centerquote</code> 标签进行居中引用。<br>具体使用说明在 NexT <a href=\"https://theme-next.js.org/docs/tag-plugins/#Centered-Quote\">博客文章</a>中有提到。使用如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% cq %&#125;</span><br><span class=\"line\">blah blah</span><br><span class=\"line\">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>弄了好一会儿，不清楚具体原因是什么，猜测移动后导致 Hexo 无法识别该主题是 NexT。</p>\n<p>摸索出的解决方法如下。</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>将 NexT 主题置于 <code>theme</code> 文件夹中可以正常生成静态文件，不报错。</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>npm 重装 <code>hexo-theme-next</code>:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 卸载</span></span><br><span class=\"line\">npm uninstall hexo-theme-next</span><br><span class=\"line\"><span class=\"comment\"># 重新安装</span></span><br><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n","categories":["Hexo"],"tags":["Hexo","NexT"]},{"title":"Hexo 升级 7.0.0","url":"/p/3f415d4f/","content":"<p>不知不觉，开博五六年了，最近翻一翻新，升级一下 Hexo 以及 NexT 主题</p>\n<p>发现比想象的略微麻烦些，想象的是更新一下<code>package.json</code>，GitHub Action 跑一下部署流程就好了，<del>结果折腾半天</del>。</p>\n<span id=\"more\"></span>\n\n<p>一开始写博客，本地会安装 npm 以及 hexo，在本地运行部署查看效果等等，可以本地实时预览博客界面进行调整。</p>\n<p>后面博客搭建稳定之后，不想在本地安装 hexo 以及 npm 的依赖，构建直接使用 GitHub Action 进行构建部署，升级就直接手动修改<code>package.json</code>更新对应依赖版本。这次配合Hexo版本升级还需要更新一下部署脚本，升级一下 npm 版本。</p>\n<blockquote>\n<p>node 的版本更新是部署过程报错，然后尝试更新解决的🤮</p>\n<p>后面翻到 Hexo 7.0.0 的发布文档也提到了 “chore: require node14+ by @yoshinorin in #5061”</p>\n<p>参考：<a href=\"https://hexo.io/news/2023/11/03/hexo-7-0-0-released/index.html\">Hexo 7.0.0 Released</a></p>\n</blockquote>\n<ul>\n<li><p><a href=\"https://github.com/hexojs/hexo-starter\">hexojs&#x2F;hexo-starter</a>: 在这里抄一下 <code>package.json</code> 的 dependencies 里包的版本更新，修改一下 hexo 的版本号为最新的版本。</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/\">npmjs</a>: 查一下剩下手动安装的插件，更新下版本号，（发现好多都不更新了，停留在三、四年前的版本👀</p>\n</li>\n</ul>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 修改dependencies中的版本号，这里不一一列举</span><br><span class=\"line\"><span class=\"deletion\">- &quot;hexo&quot;: &quot;6.2.0&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+ &quot;hexo&quot;: &quot;7.0.0&quot;,</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"deletion\">- &quot;hexo-theme-next&quot;: &quot;8.11.1&quot;,</span></span><br><span class=\"line\"><span class=\"deletion\">- &quot;@next-theme/plugins&quot;: &quot;8.11.1&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+  &quot;hexo-theme-next&quot;: &quot;8.19.2&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+  &quot;@next-theme/plugins&quot;: &quot;8.19.2&quot;,</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"deletion\">-  &quot;hexo-renderer-marked&quot;: &quot;4.1.0&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+  &quot;hexo-renderer-marked&quot;: &quot;^6.0.0&quot;,</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"废弃标签\"><a href=\"#废弃标签\" class=\"headerlink\" title=\"废弃标签\"></a>废弃标签</h2><p>部署启动时，发现youtube标签好像渲染失败了，看到文档才发现，在新版本 v7.0.0 中这些标签已被废弃，还好不怎么使用，去掉就好了，或者也可以安装插件 hexo-tag-embed 支持原有标签：</p>\n<blockquote>\n<p>Some of the built-in tags have been dropped (gist, youtube, jsfiddle, and vimeo). If you use those tags in your existing blog posts, you can install hexo-tag-embed to continue using them with Hexo v7.0.0.</p>\n<p>参考 <a href=\"https://hexo.io/news/2023/11/03/hexo-7-0-0-released/index.html#Migration-Guide\">Migration Guide</a></p>\n</blockquote>\n<h2 id=\"GitHub-Action\"><a href=\"#GitHub-Action\" class=\"headerlink\" title=\"GitHub Action\"></a>GitHub Action</h2><p>好几年了，部署脚本也更新一下，具体也可以参考下之前写的<a href=\"/p/3d7401da/\">Github Action 自动部署 Hexo 博客</a>：</p>\n<blockquote>\n<p>如果源文件和静态文件在一个仓库可以参考 <a href=\"https://hexo.io/zh-cn/docs/github-pages\">在 GitHub Pages 上部署 Hexo</a></p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 只监听 source 分支的改动</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义环境变量</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">GIT_USER:</span> <span class=\"string\">your</span> <span class=\"string\">name</span></span><br><span class=\"line\">  <span class=\"attr\">GIT_EMAIL:</span> <span class=\"string\">your</span> <span class=\"string\">email</span> <span class=\"string\">address</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build-and-deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 获取博客源码和主题</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># 这里用的是 Node.js 16.x</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Set</span> <span class=\"string\">up</span> <span class=\"string\">Node.js</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;16&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">NPM</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">          <span class=\"attr\">key:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">runner.OS</span> <span class=\"string\">&#125;&#125;-npm-cache</span></span><br><span class=\"line\">          <span class=\"attr\">restore-keys:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          npm install</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 从之前设置的 secret 获取部署私钥</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">SSH</span> <span class=\"string\">Keys</span> <span class=\"string\">and</span> <span class=\"string\">known_hosts</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">DEPLOY_SECRET:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.DEPLOY_SECRET</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class=\"line\"><span class=\"string\">          mkdir -p ~/.ssh</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;$DEPLOY_SECRET&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.name $GIT_USER</span></span><br><span class=\"line\"><span class=\"string\">          git config --global user.email $GIT_EMAIL</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 生成并部署 `npx hexo clean &amp;&amp; npx hexo g -d` or `npm run deploy`</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          npx hexo clean &amp;&amp; npx hexo g -d</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># 部署后更新博客源码，用于添加 abbrlink</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Update</span> <span class=\"string\">Blog</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">sh</span> <span class=\"string\">&quot;$&#123;GITHUB_WORKSPACE&#125;/.github/script/blog-update.sh&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>终于改好了，更新前部署耗时从原本<code>14m 14s</code> 降低到 <code>1m 50s</code>，部署速度在 2min 以内，又回到最初的快乐🎉</p>\n<p><img data-src=\"/p/3f415d4f/updated-cost-time.png\"></p>\n<h2 id=\"hexo-renderer-marked\"><a href=\"#hexo-renderer-marked\" class=\"headerlink\" title=\"hexo-renderer-marked\"></a>hexo-renderer-marked</h2><p>这里为什么要把<code>hexo-renderer-marked</code>单独拎出来讲，主要是升级的快乐被它又卡了一手。</p>\n<p>更新版本号和 Node 版本之后，博客顺利部署成功了，遇到一个奇怪的事情，图片无法正常展示。看了页面元素，图片地址变成<code>src=&quot;/xxx.png&quot;</code></p>\n<blockquote>\n<p>检查生成的静态文件，发现图片和页面放在一个路径下，先排除升级 next 主题导致的问题</p>\n</blockquote>\n<p>然后就开始漫长的排查之旅，后来看配置文件<code>_config.yml</code>发现很久之前添加的一个配置<code>post_asset_folder: true</code></p>\n<p>Hexo 文档 <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">资源文件夹</a>中对于 <code>post_asset_folder</code> 的描述是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</span><br></pre></td></tr></table></figure>\n\n<p>这里提到说开启后就可以使用相对路径引用文件，我也一直是这么使用的。但为什么就不行呢，然后想起来更新了插件<code>hexo-renderer-marked</code>，渲染markdown的，感觉就是它了（再不行版本回退）</p>\n<p>然后去查看插件仓库<a href=\"https://github.com/hexojs/hexo-renderer-marked\">hexojs&#x2F;hexo-renderer-marked</a>，看到 README 更新了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">postAsset - Resolve post asset&#x27;s image path to relative path and prepend root value when post_asset_folder is enabled.</span><br><span class=\"line\">&quot;image.jpg&quot; is located at &quot;/2020/01/02/foo/image.jpg&quot;, which is a post asset of &quot;/2020/01/02/foo/&quot;.</span><br><span class=\"line\">![](image.jpg) becomes &lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</span><br><span class=\"line\">Requires prependRoot to be enabled.</span><br></pre></td></tr></table></figure>\n\n<p>postAsset和prependRoot需要为 true，post_asset_folder才生效…</p>\n<p>然后加上了就解决了，然后再Hexo文档 <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">资源文件夹</a> 也看到：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这次升级的经历好像回到最初折腾博客，改样式，遇到各种各样奇奇怪怪的问题，在找解决方法中积累经验和知识。</p>\n<p>博客最重要还是坚持写下去，从一周一篇到一月一篇（最近断更了好久哈哈）</p>\n<p>保持好奇心，记录有趣的事情，学习记录，记录学习。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/asset-folders\">Hexo 资源文件夹</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo 配置</a></li>\n<li><a href=\"https://theme-next.js.org/docs/getting-started/upgrade.html\">Theme Next Upgrade</a></li>\n<li><a href=\"https://theme-next.js.org/docs/theme-settings/posts\">Theme Next Post Settings</a></li>\n<li><a href=\"https://github.com/next-theme/hexo-theme-next\">next-theme&#x2F;hexo-theme-next</a>: 可以获取最新的配置文件模板<code>_config.yml</code></li>\n<li><a href=\"https://hexo.io/news/2023/11/03/hexo-7-0-0-released/index.html\">Hexo 7.0.0 Released</a></li>\n<li><a href=\"https://github.com/hexojs/site\">hexojs&#x2F;site</a>: 可以参考写作语法</li>\n<li><a href=\"https://github.com/hexojs/hexo-renderer-marked\">hexojs&#x2F;hexo-renderer-marked</a></li>\n<li><a href=\"https://developers.cloudflare.com/pages/framework-guides/deploy-a-hexo-site/\">Cloundflare Deploy a Hexo site</a>: 可以部署一个作为镜像</li>\n</ul>\n","categories":["Hexo"],"tags":["Hexo","NexT"]},{"title":"NexT 更新小记","url":"/p/b601309c/","content":"<p>刚发现自己用的是NexT v5.1.4，枯了…<br>更新后直接是v7.0.0，好用多了&#x2F;鬼脸</p>\n<span id=\"more\"></span>\n\n<h2 id=\"NexT版本更新说明\"><a href=\"#NexT版本更新说明\" class=\"headerlink\" title=\"NexT版本更新说明\"></a>NexT版本更新说明</h2><p>稍微了解一下，以下说明来自参考<a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\">官方文档</a></p>\n<p>在 5.1.x 版本和 6.0.x 版本之间没有很大的革命性改进。主版本号变更至 6 主要是因为：</p>\n<ol>\n<li><p>主仓库已从 <a href=\"https://github.com/iissnan/hexo-theme-next\">iissnan 名下</a> 迁移至 <a href=\"https://github.com/theme-next\">theme-next</a> 组织。</p>\n</li>\n<li><p><code>next/source/lib</code> 目录下的绝大多数库被移出到了 <a href=\"https://github.com/theme-next\">NexT 组织的外部仓库</a>中。</p>\n</li>\n<li><p>第三方插件 <a href=\"https://github.com/willin/hexo-wordcount\"><code>hexo-wordcount</code></a> 被 <a href=\"https://github.com/theme-next/hexo-symbols-count-time\"><code>hexo-symbols-count-time</code></a> 所取代，因为 <code>hexo-symbols-count-time</code> 没有任何外部 nodejs 依赖、也没有会导致生成站点时的性能问题 <a href=\"https://github.com/willin/hexo-wordcount/issues/7\">language filter</a>。</p>\n</li>\n</ol>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>其实说更新，实际上就是新建一个博客主题。一下引自官方迁移文档 <a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\">UPDATE-FROM-5.1.X.md</a></p>\n<ol>\n<li>克隆新的 v6.x 仓库到任一异于 <code>next</code> 的目录（如 <code>next-reloaded</code>）：</li>\n</ol>\n<p><code>$ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</code></p>\n<ol start=\"2\">\n<li><p>在 Hexo 的主配置文件中设置主题：</p>\n <figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next-reloaded</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新语言配置</p>\n<p> 从 v6.0.3版本起，<code>zh-Hans</code>改名为<code>zh-CN</code>：<a href=\"https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3\">https://github.com/theme-next/hexo-theme-next/releases/tag/v6.0.3</a></p>\n<p> 升级到v6.0.3及以后版本的用户，需要显式修改<code>_config.xml</code>里的language配置，否则语言显示不正确。</p>\n</li>\n</ol>\n<p>关于第三方库的启用，参见<a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/INSTALLATION.md#%E6%8F%92%E4%BB%B6\">这里</a>。</p>\n<h2 id=\"配置NexT\"><a href=\"#配置NexT\" class=\"headerlink\" title=\"配置NexT\"></a>配置NexT</h2><p>更新前，配置主题大部分要去下相关插件去修改对应的文件，很麻烦。<br>更新后，大部分功能内置，只需要根据个人喜好打开相应功能开关，即 <code>false</code> -&gt; <code>true</code>。</p>\n<p>eg.</p>\n<ul>\n<li><p>字数统计: 修改 <code>symbols_count_time</code>下的选项</p>\n</li>\n<li><p>标签图标: 修改<code>favicon</code>下的选项</p>\n</li>\n<li><p>博客页脚: 修改<code>footer</code>下的选项</p>\n</li>\n</ul>\n<p>NexT的配置文件<code>_config.yml</code>里有大量的注释，以及各插件&#x2F;第三方库的开源地址，查看其<code>readme</code>（也很详细），然后自己跟着动手配置就ok了。</p>\n<p>要注意的是，一些插件&#x2F;第三方库并没有预置，要自己安装。否则，可能在预览站点的时候可能因为使用了第三方库的某些功能，但却未添加该库使得站点无法加载完全&#x2F;失败。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>NexT折腾啊折腾，刚开始用v5.1.x折腾好久，而更新后，折腾一两个小时就配置好，舒服舒服🙃🙃🙃</p>\n<blockquote class=\"blockquote-center\">\n<p>新年快乐~</p>\n<p>——2019.02.05</p>\n\n</blockquote>\n","categories":["Hexo"],"tags":["Hexo","NexT"]},{"title":"git中关于CRLF的Warning","url":"/p/a91d33b/","content":"<p><code>hexo d</code>出现<code>warning: LF will be replaced by CRLF</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"关于CRLF\"><a href=\"#关于CRLF\" class=\"headerlink\" title=\"关于CRLF\"></a><a href=\"https://zh.wikipedia.org/wiki/%E6%8F%9B%E8%A1%8C\">关于CRLF</a></h2><p>引用维基百科：</p>\n<p>以<a href=\"https://zh.wikipedia.org/wiki/ASCII\" title=\"ASCII\">ASCII</a>为基础的或兼容的字符集使用分别LF（Line feed，U+000A）或<a href=\"https://zh.wikipedia.org/wiki/%E5%9B%9E%E8%BD%A6%E7%AC%A6\" title=\"回车符\">CR</a>（Carriage Return，U+000D）或CR+LF；下面列出各系统换行字符编码的列表</p>\n<ul>\n<li>LF：在<a href=\"https://zh.wikipedia.org/wiki/Unix\" title=\"Unix\">Unix</a>或Unix兼容系统（GNU&#x2F;Linux，AIX，Xenix，Mac OS X，…）、BeOS、Amiga、RISC OS</li>\n<li>CR+LF：<a href=\"https://zh.wikipedia.org/wiki/DOS\" title=\"DOS\">DOS</a>（<a href=\"https://zh.wikipedia.org/wiki/MS-DOS\" title=\"MS-DOS\">MS-DOS</a>、<a href=\"https://zh.wikipedia.org/wiki/PC-DOS\" title=\"PC-DOS\">PC-DOS</a>等）、<a href=\"https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F\" title=\"微软\">微软</a><a href=\"https://zh.wikipedia.org/wiki/%E8%A6%96%E7%AA%97%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1\" title=\"视窗操作系统\">视窗操作系统</a>（Microsoft Windows）、大部分非Unix的系统</li>\n<li>CR：Apple II家族，<a href=\"https://zh.wikipedia.org/wiki/Mac_OS\" title=\"Mac OS\">Mac OS</a>至版本9</li>\n</ul>\n<h2 id=\"关闭warning显示\"><a href=\"#关闭warning显示\" class=\"headerlink\" title=\"关闭warning显示\"></a>关闭warning显示</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><code>false</code> 表示取消自动转换功能。适合纯Windows</li>\n<li><code>true</code> 表示提交代码时把CRLF转换成LF，导出时LF转换成CRLF。适合多平台协作</li>\n<li><code>input</code> 表示提交时把CRLF转换成LF，导出时不转换。适合纯Linux或Mac</li>\n</ul>\n<p>以前懒得改，后面越看越难受，干脆改一下，没有出现几十行warning··· ···</p>\n<p>舒服了！</p>\n","categories":["Hexo"],"tags":["Git","Hexo"]},{"title":"Hexo Gitalk 403","url":"/p/1d1d49e9/","content":"<p>Hexo 博客部署后，打开 gitalk 评论的时候出现<code>Error: Request failed with status code 403</code></p>\n<span id=\"more\"></span>\n\n<p>F12 查看网络请求，看到一条标红的请求，路径是<code>https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</code>，应该是通过这个<code>herokuapp</code>授权登录 gitalk 失败导致的。</p>\n<p>然后直接搜索报错信息，第一条就是 GitHub 的 <a href=\"https://github.com/gitalk/gitalk/issues/429\">issue</a> 😂，我看的时候这个 issue 已经 close 了，说明有解决方法😃：</p>\n<ol>\n<li><p>更新版本到 1.7.2</p>\n<blockquote>\n<p>在 1.7.2 版本的 <code>gitalk.min.js</code> 中，proxy 已经换成了<br><code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code></p>\n</blockquote>\n</li>\n<li><p>修改配置增加 proxy:<br><code>https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</code></p>\n<blockquote>\n<p>可以参考<a href=\"https://cuiqingcai.com/30010.html\">Gitalk 评论登录 403 问题解决</a>，这篇文章还详细描述了整个问题排查过程，可以了解下，里面也说了导致 403 的原因：<code>cors-anywhere</code>（cors-anywhere是一个NodeJS代理，它将 CORS 头添加到代理请求），这个网站本来是演示用的，但是现在已经被滥用了，然后从 1.31 开始用户必须手动先访问这个网站获取临时的访问权限，然后才能使用。</p>\n<p>btw: 添加配置的方式我试了，感觉没效果，代理还是没变，可能是哪里打开方式不对</p>\n</blockquote>\n</li>\n</ol>\n<p>最简单的方法就是第一种，修改 NexT 中 gitalk 的版本就可以，打开<code>_config.next.yml</code>：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- gitalk_js:</span></span><br><span class=\"line\"><span class=\"deletion\">- gitalk_css:</span></span><br><span class=\"line\"><span class=\"addition\">+ gitalk_js: //cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.min.js</span></span><br><span class=\"line\"><span class=\"addition\">+ gitalk_css: //cdn.jsdelivr.net/npm/gitalk@1.7.2/dist/gitalk.css</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://github.com/gitalk/gitalk/issues/429\">在授权gitalk后出现403错误</a></p>\n</li>\n<li><p><a href=\"https://cuiqingcai.com/30010.html\">Gitalk 评论登录 403 问题解决</a></p>\n</li>\n</ul>\n<blockquote class=\"blockquote-center\">\n<p>天之崖，地之角，知交半零落<br>—— 「送别」李叔同</p>\n\n</blockquote>\n","categories":["Hexo"],"tags":["Hexo","NexT","Gitalk"]},{"title":"博客添加kindle页","url":"/p/cc223a36/","content":"<p>记录读书笔记及标注</p>\n<span id=\"more\"></span>\n\n<h2 id=\"生成网页\"><a href=\"#生成网页\" class=\"headerlink\" title=\"生成网页\"></a>生成网页</h2><p>这里使用<a href=\"https://github.com/muzi502/kindle\">muzi502&#x2F;kindle</a>项目生成html页面。</p>\n<p>为了直接将kindle页面嵌入hexo中，需要对该项目中<code>kindle.py</code>做出一点修改，在html文件头部添加标记，阻止该页面嵌入评论以及系统渲染，以保留原始页面。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- HTML_HEAD = &#x27;&#x27;&#x27;&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ HTML_HEAD = &#x27;&#x27;&#x27;---</span></span><br><span class=\"line\"><span class=\"addition\">+ comments: false</span></span><br><span class=\"line\"><span class=\"addition\">+ layout: false</span></span><br><span class=\"line\"><span class=\"addition\">+ ---</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"嵌入kindle页\"><a href=\"#嵌入kindle页\" class=\"headerlink\" title=\"嵌入kindle页\"></a>嵌入kindle页</h2><p>首先修改NexT主题配置文件，在菜单中添加kindle，并设置图标。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\"><span class=\"addition\">+  kindle: /kindle/ || book</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，将在Hexo根目录下的<code>source</code>文件夹下添加<code>kindle</code>文件夹，存放<a href=\"https://github.com/muzi502/kindle\">muzi502&#x2F;kindle</a>项目的<code>style</code>文件夹和运行程序生成的<code>index.html</code>和<code>book</code>文件夹。</p>\n<p>当然可以用脚本<code>xx.bat</code>自动运行<code>kindle.py</code>，将生成的主页文件和book文件夹复制到博客站点文件夹下，如下，具体根据自己的路径修改。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 博客的上的kindle目录</span><br><span class=\"line\"><span class=\"built_in\">set</span> blog_kindle_path=\\<span class=\"built_in\">path</span>\\to\\blog\\source\\kindle</span><br><span class=\"line\">:: kindle.py所在的目录</span><br><span class=\"line\"><span class=\"built_in\">set</span> local_kindle_path=<span class=\"built_in\">path</span>\\to\\local\\kindle</span><br><span class=\"line\"><span class=\"built_in\">set</span> indexsrc=<span class=\"variable\">%local_kindle_path%</span>\\index.html</span><br><span class=\"line\"><span class=\"built_in\">set</span> indexdist=<span class=\"variable\">%blog_kindle_path%</span>\\index.html</span><br><span class=\"line\"><span class=\"built_in\">set</span> booksrc=<span class=\"variable\">%local_kindle_path%</span>\\books\\*html</span><br><span class=\"line\"><span class=\"built_in\">set</span> bookdist=<span class=\"variable\">%blog_kindle_path%</span>\\books</span><br><span class=\"line\"><span class=\"built_in\">set</span> bookdistcache=<span class=\"variable\">%blog_kindle_path%</span>\\books</span><br><span class=\"line\">python kindle.py</span><br><span class=\"line\">:: 清除博客 kindle 路径下的旧文件，可选</span><br><span class=\"line\">:: <span class=\"built_in\">del</span> /s /Q <span class=\"variable\">%bookdistcache%</span></span><br><span class=\"line\"><span class=\"built_in\">copy</span> /Y  <span class=\"variable\">%indexsrc%</span> <span class=\"variable\">%indexdist%</span></span><br><span class=\"line\"><span class=\"built_in\">copy</span> /Y <span class=\"variable\">%booksrc%</span> <span class=\"variable\">%bookdist%</span></span><br></pre></td></tr></table></figure>\n\n<p>最后部署一下就行，效果见<a href=\"/kindle\">kindle</a>。</p>\n<p>想起来明天是6月1号，儿童节快乐~🎉🎈</p>\n<blockquote class=\"blockquote-center\">\n<p>Keep reading and thinking.</p>\n\n</blockquote>\n","categories":["kindle"],"tags":["Hexo","kindle"]},{"title":"Hexo 写作指北","url":"/p/cb3898/","content":"<p>关于Hexo写作的一些笔记。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Markdown语法\"><a href=\"#Markdown语法\" class=\"headerlink\" title=\"Markdown语法\"></a>Markdown语法</h2><blockquote>\n<p>Hexo内主要使用Markdown进行写作。</p>\n</blockquote>\n<p>关于Markdown的语法，这里就记录一些常用的。</p>\n<h3 id=\"n级标题-n\"><a href=\"#n级标题-n\" class=\"headerlink\" title=\"n级标题: n*#\"></a>n级标题: <code>n*#</code></h3><p>二级标题: <code>## blah</code></p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><blockquote>\n<p><code>~~blah~~</code> -&gt; <del>blah</del></p>\n</blockquote>\n<h3 id=\"加粗\"><a href=\"#加粗\" class=\"headerlink\" title=\"加粗\"></a>加粗</h3><p><code>**blah**</code> -&gt; <strong>blah</strong></p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><blockquote>\n<p><code>*blah*</code> -&gt; <em>blah</em></p>\n</blockquote>\n<h3 id=\"短代码段\"><a href=\"#短代码段\" class=\"headerlink\" title=\"短代码段\"></a>短代码段</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`blah`</span></span><br></pre></td></tr></table></figure>\n<p>效果：<code>blah</code></p>\n<p>###多行代码段<br>  <figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 注意三个 ` 之间没有空格，这里为了演示方便</span></span><br><span class=\"line\"><span class=\"code\">` `</span> `</span><br><span class=\"line\">blah</span><br><span class=\"line\">blah</span><br><span class=\"line\">blah</span><br><span class=\"line\"><span class=\"code\">` `</span> `</span><br></pre></td></tr></table></figure></p>\n<p>效果如下：<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">blah</span><br><span class=\"line\">blah</span><br><span class=\"line\">blah</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">| name  | age |</span><br><span class=\"line\">| ----- | --- |</span><br><span class=\"line\">| alice | 12  |</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>age</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alice</td>\n<td>12</td>\n</tr>\n</tbody></table>\n<p>对表格可以自定义单元格格式：</p>\n<ul>\n<li><code>---</code>: 默认，左对齐</li>\n<li><code>:--:</code>: 居中</li>\n<li><code>:---</code>: 左对齐</li>\n<li><code>---:</code>: 右对齐</li>\n</ul>\n<h2 id=\"特殊语法-内置标签\"><a href=\"#特殊语法-内置标签\" class=\"headerlink\" title=\"特殊语法(内置标签)\"></a>特殊语法(内置标签)</h2><blockquote>\n<p>「标签」(Tag Plugin) 是 Hexo 提供的一种快速生成特定内容的方式。</p>\n</blockquote>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img filename picname %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">eg.</span><br><span class=\"line\">&#123;% asset_img test.png test %&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>好像有的时候会出现图片无法加载的问题，建议使用<code>![]()</code>格式来添加图片。</p>\n</blockquote>\n<h3 id=\"代码段\"><a href=\"#代码段\" class=\"headerlink\" title=\"代码段\"></a>代码段</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% code 附加说明 link title %&#125;</span><br><span class=\"line\">code blah blah</span><br><span class=\"line\">&#123;% endcode %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">eg.</span><br><span class=\"line\">&#123;% code 此为附加说明 https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97 标签插件（Tag Plugins）%&#125;</span><br><span class=\"line\">code code blah blah</span><br><span class=\"line\">&#123;% endcode %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下:</p>\n<figure class=\"highlight plaintext\"><figcaption><span>此为附加说明</span><a href=\"https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97\">标签插件（Tag Plugins）</a></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">code code blah blah</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用（别名：quote）\"><a href=\"#引用（别名：quote）\" class=\"headerlink\" title=\"引用（别名：quote）\"></a>引用（别名：quote）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% quote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class=\"line\">content</span><br><span class=\"line\">&#123;% endquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">eg. 引用书上的句子</span><br><span class=\"line\">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class=\"line\">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class=\"line\">&#123;% endblockquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">eg. 引用文本加链接</span><br><span class=\"line\">&#123;% quote 沃斯基·索德 https://music.163.com/#/mv?id=29689 A Thousand Years %&#125;</span><br><span class=\"line\">It is a test. Link is a MV.</span><br><span class=\"line\">&#123;% endquote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下:<br>eg. 引用书上的句子</p>\n<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n\n<p>eg. 引用文本加链接</p>\n<blockquote><p>It is a test. Link is a MV.</p>\n<footer><strong>沃斯基·索德</strong><cite><a href=\"https://music.163.com/#/mv?id=29689\">A Thousand Years</a></cite></footer></blockquote>\n\n<h3 id=\"居中引用\"><a href=\"#居中引用\" class=\"headerlink\" title=\"居中引用\"></a>居中引用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% cq %&#125;</span><br><span class=\"line\">blah blah blah</span><br><span class=\"line\">——沃斯基·索德</span><br><span class=\"line\">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<blockquote class=\"blockquote-center\">\n<p>blah blah blah<br>——沃斯基·索德</p>\n\n</blockquote>\n\n<h3 id=\"Bootstrap-Callout\"><a href=\"#Bootstrap-Callout\" class=\"headerlink\" title=\"Bootstrap Callout\"></a>Bootstrap Callout</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% note class_name %&#125;</span><br><span class=\"line\">Content (md partial supported)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class name:</span><br><span class=\"line\">*   `default`</span><br><span class=\"line\">*   `primary`</span><br><span class=\"line\">*   `success`</span><br><span class=\"line\">*   `info`</span><br><span class=\"line\">*   `warning`</span><br><span class=\"line\">*   `danger`</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<ol>\n<li>primary</li>\n</ol>\n<div class=\"note primary\"><p>Content (md partial supported)</p>\n</div>\n\n<ol start=\"2\">\n<li>success</li>\n</ol>\n<div class=\"note success\"><p>Content (md partial supported)</p>\n</div>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p><code>&lt;u&gt;blah&lt;/u&gt;</code> -&gt; <u>blah</u></p>\n<h3 id=\"跳转页面\"><a href=\"#跳转页面\" class=\"headerlink\" title=\"跳转页面\"></a>跳转页面</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[使用Markdown语法增加的跳转到“前言”的链接](#Markdown语法)</span><br></pre></td></tr></table></figure>\n\n<p>效果：<a href=\"#Markdown%E8%AF%AD%E6%B3%95\">跳转到文章”Markdown语法”标题处</a></p>\n<h3 id=\"Read-More\"><a href=\"#Read-More\" class=\"headerlink\" title=\"Read More\"></a>Read More</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文字链接\"><a href=\"#文字链接\" class=\"headerlink\" title=\"文字链接\"></a>文字链接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[title](link)</span><br><span class=\"line\"></span><br><span class=\"line\">eg.</span><br><span class=\"line\">`[Hexo官方教程](https://hexo.io/zh-cn/docs/tag-plugins)`</span><br></pre></td></tr></table></figure>\n\n<p>效果如下:<br><a href=\"https://hexo.io/zh-cn/docs/tag-plugins\">Hexo官方教程</a></p>\n<h3 id=\"嵌入Youtube视频\"><a href=\"#嵌入Youtube视频\" class=\"headerlink\" title=\"嵌入Youtube视频\"></a><del>嵌入Youtube视频</del></h3><blockquote>\n<p>Update 2024-03-27</p>\n<p>在 Hexo 7.0.0 中移除了对 youtube 标签的支持</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% youtube video_id %&#125;</span><br><span class=\"line\">eg. &#123;% youtube rtOvBOTyX00 %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下: <del>看不到效果了，看效果图</del></p>\n<p>效果图:</p>\n<p><img data-src=\"/p/cb3898/youtube-pic.png\" alt=\"效果图\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>以上这些对于日常写作基本够用，后面需要什么再学，再记录，持续更新。</p>\n<p>ps. 今年时间进度 ▓░░░░░░░░░░░░░░ 9%</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://hexo.io/zh-cn/docs/tag-plugins#iframe\">Hexo tag-plugins教程</a><br><a href=\"https://theme-next.iissnan.com/tag-plugins.html\">NexT tag-plugins教程</a></p>\n","categories":["Hexo"],"tags":["Hexo","Writing"]},{"title":"GIF 压缩操作","url":"/p/e9fa3cd1/","content":"<p>日常看番看剧，遇到一些场景就喜欢录制gif保存下来，但每次制作出来都会出现gif过大的问题…<br>至于解决，稍微记录下…<del>(因为有的时候记不住，划掉划掉)</del></p>\n<span id=\"more\"></span>\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>导致gif过大常见的原因大致以下几种：</p>\n<ol>\n<li>尺寸过大</li>\n<li>帧率过大</li>\n<li>图片的颜色</li>\n<li>gif的时长</li>\n</ol>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>主要从尺寸以及图片颜色上入手，至于帧率过大&#x2F;gif过长则可以通过<code>ScreenToGif</code>这个软件适当删除一些重复的帧数等等。</p>\n<h3 id=\"iloveimg\"><a href=\"#iloveimg\" class=\"headerlink\" title=\"iloveimg\"></a><a href=\"https://www.iloveimg.com/zh-cn/compress-image/compress-gif\">iloveimg</a></h3><p>在线GIF压缩工具，上传图片，帮你压缩完后下载回来，简单粗暴。<br>效果还行，umm…就是有的时候上传速度感人罢了…</p>\n<h3 id=\"ImageMagick\"><a href=\"#ImageMagick\" class=\"headerlink\" title=\"ImageMagick\"></a>ImageMagick</h3><p>项目地址及说明参考：<a href=\"https://github.com/ImageMagick/ImageMagick\">https://github.com/ImageMagick/ImageMagick</a></p>\n<ol>\n<li><p>降低GIF图像品质</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert -quality 75% input.gif output.gif</span><br></pre></td></tr></table></figure>\n\n<p> 参数说明：</p>\n<ul>\n<li><code>-quality 75%</code> 原图品质降为 75% 左右 (降太多可能会导致图像品质下降严重)</li>\n</ul>\n<blockquote>\n<p>ps.有的时候效果并不明显</p>\n</blockquote>\n</li>\n<li><p>缩小GIF尺寸</p>\n<p> 减小GIF的图像尺寸应该是最简单粗暴的缩小GIF体积的方法。</p>\n<ul>\n<li><p>自定义尺寸大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert -resize 800x600 input.gif output.gif</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原图像宽高缩小为原来的一半</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert -sample 50%x50% input.gif output.gif</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>设置压缩比</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">convert test.gif -fuzz 15% -layers Optimize result.gif</span><br></pre></td></tr></table></figure>\n\n<p> 参数说明：</p>\n<ul>\n<li><code>-fuzz</code>设置压缩率，压缩率不宜设置得太高，一半在5%~15%，具体根据图片压缩后的效果进行修改。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Gifsicle\"><a href=\"#Gifsicle\" class=\"headerlink\" title=\"Gifsicle\"></a>Gifsicle</h3><p>项目地址：<a href=\"https://github.com/kohler/gifsicle\">https://github.com/kohler/gifsicle</a></p>\n<p>使用参考：<a href=\"http://www.lcdf.org/gifsicle/man.html\">http://www.lcdf.org/gifsicle/man.html</a></p>\n<ol>\n<li><p>根据图像自动优化</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gifsicle -O3 input.gif -o output.gif</span><br></pre></td></tr></table></figure>\n\n<p> 参数说明:</p>\n<ul>\n<li><p><strong>-O</strong>[<em>level</em>]</p>\n<ul>\n<li><p><code>-O1</code> 仅存储每个图像的更改部分。 这是默认值。</p>\n</li>\n<li><p><code>-O2</code> 使用透明度进一步缩小文件。</p>\n</li>\n<li><p><code>-O3</code> 尝试几种优化方法（通常较慢，有时更好的结果）。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>缩小图像尺寸</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gifsicle -i input.gif --scale 0.5 -o output.gif</span><br><span class=\"line\">gifsicle input.gif --resize 300x200 -o output.gif</span><br></pre></td></tr></table></figure>\n\n<p> 参数说明：</p>\n<ul>\n<li><code>--scale 0.5</code> 指的是缩小图像宽高为原来的一半</li>\n<li><code>resize 300x200</code> 自定义图片伸缩尺寸</li>\n</ul>\n</li>\n<li><p>减少图片颜色</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gifsicle -O3 input.gif -o output.gif --colors num</span><br></pre></td></tr></table></figure>\n\n<p> 参数说明：</p>\n<ul>\n<li><code>--color num</code>: 将每个输出GIF中不同颜色的数量减少到num或更少。 num必须介于2到256之间。这可用于缩小输出GIF或消除任何本地颜色表。num越小，图片质量损失度越大。</li>\n</ul>\n</li>\n</ol>\n","categories":["图像处理"],"tags":["Image","Compress"]},{"title":"图片压缩操作","url":"/p/c00bdf6b/","content":"<p>经常会有关于图像压缩的需求，稍微整理及记录一下常用方法…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"ImageMagick\"><a href=\"#ImageMagick\" class=\"headerlink\" title=\"ImageMagick\"></a>ImageMagick</h2><h3 id=\"ImageMagick简介\"><a href=\"#ImageMagick简介\" class=\"headerlink\" title=\"ImageMagick简介\"></a>ImageMagick简介</h3><blockquote>\n<p>ImageMagick是一个用于查看、编辑位图文件以及进行图像格式转换的开放源代码软件套装。它可以读取、编辑超过100种图象格式。——<a href=\"https://zh.wikipedia.org/wiki/ImageMagick\">维基百科</a></p>\n<p>官网：<a href=\"https://www.imagemagick.org/script/index.php\">https://www.imagemagick.org/script/index.php</a><br>下载安装：<a href=\"https://www.imagemagick.org/script/download.php\">https://www.imagemagick.org/script/download.php</a></p>\n</blockquote>\n<p>在下载页面选择合适版本下载安装。<br>ps. Windows建议下载安装版，避免一些命令如<code>convert</code>等无法正常使用的情况。</p>\n<h3 id=\"ImageMagick使用\"><a href=\"#ImageMagick使用\" class=\"headerlink\" title=\"ImageMagick使用\"></a>ImageMagick使用</h3><p>仅记录常用的压缩使用，ImageMagick很强大，如果要写，一篇文章写不完的👀。</p>\n<p>压缩gif&#x2F;jpg&#x2F;png，原图品质降为75%左右(降太多会导致图像严重失真)，下面以gif格式为例。测试gif大小可以缩到原图的1&#x2F;3~1&#x2F;2。<br>ps.可以重复操作几次，但一般两次后大小就不会再减小了。</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">convert</span> -quality <span class=\"number\">75</span>% input.gif output.gif</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pngyu\"><a href=\"#Pngyu\" class=\"headerlink\" title=\"Pngyu\"></a><a href=\"https://github.com/nukesaq88/Pngyu\">Pngyu</a></h2><ul>\n<li>可进行批量处理</li>\n<li>开源</li>\n</ul>\n<p>Github：<a href=\"https://github.com/nukesaq88/Pngyu\">https://github.com/nukesaq88/Pngyu</a></p>\n<h2 id=\"在线图片压缩\"><a href=\"#在线图片压缩\" class=\"headerlink\" title=\"在线图片压缩\"></a>在线图片压缩</h2><h3 id=\"Squoosh\"><a href=\"#Squoosh\" class=\"headerlink\" title=\"Squoosh\"></a><a href=\"https://squoosh.app/\">Squoosh</a></h3><ul>\n<li>由GoogleChromeLabs开发，开源</li>\n<li>等待网页加载完会显示<code>ready to work offline</code>，意思就是加载完后你可以离线使用！</li>\n<li>不限制压缩图片大小</li>\n</ul>\n<blockquote>\n<p><a href=\"https://squoosh.app/\">Squoosh</a> is an image compression web app that allows you to dive into the advanced options provided by various image compressors.</p>\n</blockquote>\n<p>GitHub：<a href=\"https://github.com/GoogleChromeLabs/squoosh\">https://github.com/GoogleChromeLabs/squoosh</a></p>\n<h3 id=\"iloveimg\"><a href=\"#iloveimg\" class=\"headerlink\" title=\"iloveimg\"></a><a href=\"https://www.iloveimg.com/zh-cn/compress-image\">iloveimg</a></h3><ul>\n<li>不限制图片大小（这个很棒!）</li>\n<li>压缩后大小，质量都还不错</li>\n<li>支持批量压缩（不过要等好一会，压缩完会提示下载）</li>\n</ul>\n<h3 id=\"Tinypng\"><a href=\"#Tinypng\" class=\"headerlink\" title=\"Tinypng\"></a><a href=\"https://tinypng.com/\">Tinypng</a></h3><ul>\n<li>仅支持<code>png</code>、<code>jpg</code>格式</li>\n<li>支持批量操作20张图片，每张最大不超过5MB</li>\n</ul>\n<blockquote>\n<p>Up to 20 images, max 5 MB each</p>\n</blockquote>\n<p>btw: ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░  99%<br>      ——今年时间进度(皮一下</p>\n","categories":["图像处理"],"tags":["Image","Compress"]},{"title":"PIL实现图片拼接","url":"/p/1e3f5113/","content":"<p>捡起之前想做的图片拼接：刚学Python的时候一个图，将各种图拼起来做成特定的形状，觉得很酷<del>然后刚开始各种百度图片拼接程序</del>，未果。这两天闲下来就想动动手，想给做出来。<br>然后经过一番挣扎，有点丑的做出来了😂<br>效果图如下：(最好模板图片背景是白色的)</p>\n<span id=\"more\"></span>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><blockquote>\n<p>将像素点“替换”成图片，设置一个灰度值作为阈值来选择要替换成图片的像素点，然后再新建图里将图片粘贴上去。</p>\n</blockquote>\n<p>PS.思路就是这么简单粗暴</p>\n<h2 id=\"具体实现：\"><a href=\"#具体实现：\" class=\"headerlink\" title=\"具体实现：\"></a>具体实现：</h2><h3 id=\"1-读取图片基本信息及改变像素模式\"><a href=\"#1-读取图片基本信息及改变像素模式\" class=\"headerlink\" title=\"1. 读取图片基本信息及改变像素模式\"></a><strong>1. 读取图片基本信息及改变像素模式</strong></h3><pre><code>    modelImg = Image.open(model_path) # 模板图片\n    im1 = modelImg.resize((500,500)) # 重设modelImg的尺寸\n    print(&quot;修改后模板图像尺寸为: &quot;,im1.size)\n    width,height = im1.size # 模板图片尺寸\n</code></pre>\n<blockquote>\n<p>刚开始对图像没有什么概念，后来发现一共有九种不同的像素模式，分别是 1，L，P，RGB，RGBA，CMYK，YCbCr，I，F。</p>\n</blockquote>\n<p>这里简单起见就选择 <code>L</code> 模式</p>\n<blockquote>\n<p>模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。</p>\n</blockquote>\n<p><strong>将图片像素格式统一转换成灰度值，方面后面阈值操作。</strong></p>\n<p>这是一个坑，不同的图片如果直接利用<code>Image</code>库里的<code>getpixel</code>函数就会出现有的时候返回的是RGB,RGBA,P或者L的，每次的像素格式都不一样，传参都麻烦起来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">im = im1.convert(<span class=\"string\">&quot;L&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-读取模板图片像素值存入数组\"><a href=\"#2-读取模板图片像素值存入数组\" class=\"headerlink\" title=\"2. 读取模板图片像素值存入数组\"></a><strong>2. 读取模板图片像素值存入数组</strong></h3><blockquote>\n<p>这一步在改变模式后就很容易实现了。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">openModel</span>(<span class=\"params\">model_path</span>):</span><br><span class=\"line\">    modelImg = Image.<span class=\"built_in\">open</span>(model_path)</span><br><span class=\"line\">    im1 = modelImg.resize((<span class=\"number\">500</span>,<span class=\"number\">500</span>)) <span class=\"comment\"># 重设模板图片的尺寸，为了避免最后成图顺序出错</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改图像尺寸为: &quot;</span>,im1.size)</span><br><span class=\"line\">    width,height = im1.size <span class=\"comment\"># 修改后的图片尺寸</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 修改图像模式为:</span></span><br><span class=\"line\">    im = im1.convert(<span class=\"string\">&quot;L&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改图像模式为: &quot;</span>,im.mode)</span><br><span class=\"line\">    <span class=\"comment\"># 读取像素值</span></span><br><span class=\"line\">    array = [] <span class=\"comment\"># 存放像素值的列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 优化一下采集方式，不是每个点都要采集</span></span><br><span class=\"line\">    <span class=\"comment\"># 否则一张100x100的图片，拼接50x50的图片之后的大小会是5000x5000</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, width, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, height, <span class=\"number\">10</span>):</span><br><span class=\"line\">            pixel = im.getpixel((x,y)) <span class=\"comment\"># 读取像素点灰度值</span></span><br><span class=\"line\">            array.append(pixel)</span><br><span class=\"line\">    <span class=\"comment\"># print(array)</span></span><br><span class=\"line\">    <span class=\"comment\"># print(len(array))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-图片拼接\"><a href=\"#3-图片拼接\" class=\"headerlink\" title=\"3. 图片拼接\"></a><strong>3. 图片拼接</strong></h3><p>之前的步骤弄好之后，开始拼接，<code>if</code>语句根据设置的阈值简单判断一下，哪些点是要用图片替代的，然后转换成新图相应的坐标，将图片拼接上去就完成了。时间关系，许多地方就没有考虑太仔细，没去做优化。<del>要考试复习，对我现在就是在浪🙃</del></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    model_path = getImgPath(<span class=\"number\">0</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model_path)</span><br><span class=\"line\">    <span class=\"comment\"># 新建画布</span></span><br><span class=\"line\">    imnew = Image.new(<span class=\"string\">&quot;RGB&quot;</span>, (<span class=\"number\">2500</span>,<span class=\"number\">2500</span>),<span class=\"string\">&quot;#FFFFFF&quot;</span>)</span><br><span class=\"line\">    piclen = <span class=\"number\">1654</span> <span class=\"comment\"># 文件夹下拼接图片数量</span></span><br><span class=\"line\">    array = openModel(model_path) <span class=\"comment\"># 模板像素点数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(array)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt; piclen):</span><br><span class=\"line\">            picI = i</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            picI = i-<span class=\"number\">1000</span> <span class=\"comment\"># 这里是图不够了😂</span></span><br><span class=\"line\">        pasteImg = getImgPath(picI)[<span class=\"number\">0</span>] <span class=\"comment\"># 第picI张图片</span></span><br><span class=\"line\">        imgpaste = Image.<span class=\"built_in\">open</span>(pasteImg).resize((<span class=\"number\">50</span>,<span class=\"number\">50</span>)) <span class=\"comment\"># 统一用于拼接图片的尺寸</span></span><br><span class=\"line\">        <span class=\"comment\"># imgpaste = Image.open(modelImg).resize((50,50))</span></span><br><span class=\"line\">        <span class=\"comment\"># 行 Row 列 Column</span></span><br><span class=\"line\">        row, column = i/<span class=\"number\">50</span>,i%<span class=\"number\">50</span> <span class=\"comment\"># 行列值，相当于图片在新图中的坐标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">10</span> &lt; array[i] &lt; <span class=\"number\">245</span>):</span><br><span class=\"line\">            imnew.paste(imgpaste,(<span class=\"built_in\">int</span>(row*<span class=\"number\">50</span>), <span class=\"built_in\">int</span>(column*<span class=\"number\">50</span>)))</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在拼接第 %d 张图，还剩下 %d 张&quot;</span> %(i,<span class=\"built_in\">len</span>(array)-i))</span><br><span class=\"line\">            <span class=\"comment\"># print((int(row*50), int(column*50)))</span></span><br><span class=\"line\">    imnew.show()</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/1e3f5113/pintu.png\" alt=\"拼图结果\"></p>\n<h3 id=\"待优化\"><a href=\"#待优化\" class=\"headerlink\" title=\"待优化\"></a>待优化</h3><ol>\n<li>颜色分布与原图匹配</li>\n<li>运行速度</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这次呢做出了想要的目标效果，但是很多地方没有异常处理，用老师的话说就是程序不够“壮”(健壮性)</p>\n<p>在思路方面以前最开始没做出出来就是以为那时候想法不对：只想着在原图上将图片直接替换像素点，然后搜索资料的发现也被带偏。后来换个方法，不在原图操作，那我自己重新画一张图出来不就好了 (√)。</p>\n<p>除了思路之外，中间过程的一些地方，文件路径什么的，还是瞎(shi)操(jian)作(jin)<br>处理图像先对图像的基本情况稍作了解，后面会少走许多弯路。</p>\n<p>完整程序：<a href=\"/article_code/Puzzle1.0.py\">图片拼接</a></p>\n","categories":["图像处理"],"tags":["Python","Image"]},{"title":"图片拼接优化","url":"/p/6f136742/","content":"<h2 id=\"前情\"><a href=\"#前情\" class=\"headerlink\" title=\"前情\"></a>前情</h2><p>之前粗糙写了一个实现根据模板形状拼图的程序，最明显的缺点就是，拼出来形状，但是丢失了原有图片的颜色。</p>\n<p>然后“基于搜索引擎“优化了一下。主要参考</p>\n<blockquote>\n<p>主要是发现了 <code>Image</code>  库里的 <code>blend</code> 函数 和 <code>composite</code>函数。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><ul>\n<li>方法一（推荐）</li>\n</ul>\n<blockquote>\n<p><code>blend</code>函数简介</p>\n<p>定义：Image.blend(image1,image2, alpha) ⇒ image</p>\n<p>含义：使用给定的两张图像及透明度变量alpha，插值出一张新的图像。这两张图像必须有一样的尺寸和模式。</p>\n</blockquote>\n<p>合成公式为：<code>out = image1 * (1.0 - alpha) + image2 * alpha</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">im1 = Image.open(&quot;Image1.png&quot;)</span><br><span class=\"line\">im2 = Image.open(&quot;Image2.png&quot;)</span><br><span class=\"line\">im = Image.blend(im1,im2,0.618)</span><br><span class=\"line\">im.save(&quot;pin-pic.png&quot;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里0.618是黄金比例值，<del>偷懒随便选的</del></p>\n</blockquote>\n<p>关于参数设置，简单来说，如果变量alpha为0.0，将返回第一张图像的拷贝。如果变量alpha为1.0，将返回第二张图像的拷贝。对变量alpha的值没有限制。<br>这里的话:</p>\n<blockquote>\n<p>如果设置为 0，那么显示<code>Image1.png</code><br>如果设置为 1，那么显示<code>Image2.png</code></p>\n</blockquote>\n<p>效果图：</p>\n<p><img data-src=\"/p/6f136742/tmdu1-12-0.618.png\"></p>\n<ul>\n<li>方法二（不太好看🙃）</li>\n</ul>\n<blockquote>\n<p><code>Composite</code>函数简介<br>定义：Image.composite(image1,image2, mask) ⇒ image<br>含义：使用给定的两张图像及mask图像作为透明度，插值出一张新的图像。变量mask图像的模式可以为“1”，“L”或者“RGBA”。所有图像必须有相同的尺寸。</p>\n</blockquote>\n<pre><code>    im1 = Image.open(&quot;Image1.png&quot;)\n    im2 = Image.open(&quot;Image2.png&quot;)\n    # 因为下面要对图像的RGB三通道进行分割，所以这里将格式转换为RGB\n    im1 = im1.convert(&quot;RGB&quot;)\n    im2 = im2.convert(&quot;RGB&quot;)\n    r,g,b = im1.split() # 通道分离\n    print(g.mode)\n    im = Image.composite(im1,im2,g)\n    im.save(&quot;pin-pic.jpg&quot;)\n    b.save(&quot;image-b.jpg&quot;)\n</code></pre>\n<p>效果图:</p>\n<p><img data-src=\"/p/6f136742/tmdu2-12-b1.png\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><code>Image</code>库，博大精深…我只取一粟😂<br>写起来只有这一点点，但是实际测试了很多，之前将图片格式转为RGBA，尝试修改alpha通道，没有效果，不知道那个地方不对，然后测试了许多图片透明化的方法，最后看到一篇文章介绍了<code>Image</code>库的一些具体函数，找到以上两个函数解决。</p>\n<p>对自己来说，由于对<code>Image</code>库还不够熟悉，兜兜转转，又回到<code>Image</code> …<del>悲伤的故事</del></p>\n<p>不存在的Flag：有空把各部分的函数结构还有固定参数修改一下，做的精细一点，多注意下细节优化和交互体验等等。<del>挖坑</del></p>\n<p>PS.今年时间进度提醒</p>\n<p>今年还剩下 29 天     ▓▓▓▓▓▓▓▓▓▓▓▓▓░░  92%</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/chimeiwangliang/p/7130434.html%22\">第一篇 Python图片处理模块PIL（pillow）</a></p>\n","categories":["图像处理"],"tags":["Python","Image"]},{"title":"Re0 JNI Study","url":"/p/f16cb4e6/","content":"<p>从零开始的 Java JNI 方式调用 C++ 接口</p>\n<span id=\"more\"></span>\n\n<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a><strong>TL;DR</strong></h2><ol>\n<li>使用 Java 的对应的数据类型重新定义 C++ 接口</li>\n<li>通过 javah 生成 JNI 对应的 C++ 接口头文件</li>\n<li>使用 C++ 实现生成头文件中的方法，调用 C++ 库接口</li>\n<li>将 C++ 的实现封装成 <code>.so</code> 的动态链接库</li>\n<li>Java 加载及调用生成的动态链接库的方法，调用 C++ 库接口方法</li>\n</ol>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>虽然完全可以使用 Java 编写应用程序，但是在某些情况下，Java 本身并不能满足应用程序的需求。而这时候可以使用 JNI 编写 Java 本地方法来处理这些情况：</p>\n<ul>\n<li>标准的 Java 类库不支持应用程序所需的与平台相关的特性</li>\n<li>需要处理一些硬件</li>\n<li>一个现有的库，我们希望重用它，而不是用 Java 重写它</li>\n<li>需要克服 Java 中的性能限制</li>\n</ul>\n<p>为了解决上诉场景的问题，JDK 在 JVM 中运行的字节码和本地代码（通常是 C&#x2F;C++ 编写）之间引入了一个桥梁 – JNI</p>\n<h2 id=\"代码中的-JNI-元素\"><a href=\"#代码中的-JNI-元素\" class=\"headerlink\" title=\"代码中的 JNI 元素\"></a>代码中的 JNI 元素</h2><p>Java 中：</p>\n<ul>\n<li><code>native</code>关键字: 使用 <code>native</code> 标记方法为本地方法，方法必须在本地代码共享的库（<code>*.dll/*.so</code>）中实现</li>\n<li><code>System.loadLibrary(String libname)</code>: 一个静态方法，将需要调用的本地库加载入内存，并使其输出的函数供 Java 程序使用</li>\n</ul>\n<p>C++ 中：</p>\n<ul>\n<li><code>JNIEXPORT</code>: 将这个函数标记为可导出的，这样它就会包含在函数表中，JNI 才可以找到它</li>\n<li><code>JNICALL</code>: 和<code>JNIEXPORT</code>一起使用，确保方法可用于 JNI 框架</li>\n<li><code>JNIEnv</code>: 一个包含方法的结构体，我们可以使用本地代码访问 Java 元素</li>\n<li><code>JavaVM </code>: 一种结构体，可以操纵正在运行的 JVM （甚至启动一个新的JVM），在其中添加线程，销毁它等等。</li>\n</ul>\n<h2 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h2><p>这里使用 WSL 作开发环境，环境配置可参考：</p>\n<ul>\n<li>Java 环境配置可参考<a href=\"/p/a440bc27/\">Ubuntu 配置 Java 环境</a></li>\n<li>C&#x2F;C++ 环境配置可参考<a href=\"https://dowww.spencerwoo.com/3-vscode/3-4-c_cpp.html\">C&#x2F;C++</a></li>\n</ul>\n<p>关于 JNI 的简单例子，我推荐看以下两篇文章，这里就不再举 <code>Hello World</code> 了：</p>\n<ol>\n<li><p><a href=\"http://www.bjhee.com/java-native-2.html\">Java调用本地代码（二）—— JNI实现</a></p>\n</li>\n<li><p><a href=\"https://www.baeldung.com/jni\">Guide to JNI (Java Native Interface)</a></p>\n</li>\n</ol>\n<p>这两篇文章写的很好，第一篇中关于<code>javah</code>生成<code>HelloJni.h</code>文件，这边补充一下，如果是 Maven 项目：在<code>...\\src\\main\\java</code>目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...\\src\\main\\java</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">javah -classpath . -jni -encoding UTF-8 package.HelloJni</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"note warning\"><p>命令中添加了<code>-encoding UTF-8</code>，解决文件中包含中文字符导致生成头文件过程中出现<code>错误: 编码GBK的不可映射字符</code>的字符编码问题。</p>\n</div>\n\n<h2 id=\"涉及复杂数据结构\"><a href=\"#涉及复杂数据结构\" class=\"headerlink\" title=\"涉及复杂数据结构\"></a>涉及复杂数据结构</h2><p>当 JNI 遇到复杂的数据结构，而你刚接触 JNI，这时候处理复杂对象的类型转换是一个大问题，你还要编写 C++ 代码（如果你不是很熟悉的话），那就会很头疼。</p>\n<p>当方法参数只有字符串的时候，可以根据上面的 HelloJNI 快速上手。所以对于复杂参数，可以将其转换成字符串 – JSON，然后在 C++ 端进行反序列化，那就简化了整个类型转换的过程。</p>\n","categories":["Java"],"tags":["Note","Java"]},{"title":"Java 中 '==' 和 equals() 的理解","url":"/p/aa85dc73/","content":"<p>对于Java中<code>==</code>和<code>equals()</code>之间的区别与联系</p>\n<p>初学Java的时候，在这里确实也迷惑过，为什么这两者比较的结果有的时候一样，有的时候又不一样。</p>\n<blockquote>\n<p><code>==</code>比较的是对象引用，<code>equals()</code>比较的是对象内容？</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li><p><code>==</code>比较的是对象的引用，判断两者是否引用的是同一个对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">x2</span> <span class=\"operator\">=</span> <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span> (x1==x2); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">x3</span> <span class=\"operator\">=</span> <span class=\"number\">129</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">x4</span> <span class=\"operator\">=</span> <span class=\"number\">129</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">b2</span> <span class=\"operator\">=</span> (x3==x4); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>理论上，<code>==</code>比较的是是否引用同一个对象。出现上面不一样的结果是因为<code>Integer</code>内部维护着一个 <code>IntegerCache</code> 的缓存，默认缓存范围是 [-128, 127]。定义在这个范围里的数会指向同一个对象。</p>\n</li>\n<li><p><code>equals()</code>比较的是什么，具体就看<code>equals</code>定义的是什么。所有对象的根父类是<code>Object</code>（除了基本类型）。如果对象没有预先覆写<code>equals()</code>就进行比较，那么调用的将是默认的<code>equals()</code>，即<code>Object</code>的。eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    String s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">A</span> <span class=\"variable\">a1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    a1.s = <span class=\"string\">&quot;hi&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">A</span> <span class=\"variable\">a2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    a2.s = <span class=\"string\">&quot;hi&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">b3</span> <span class=\"operator\">=</span> (a1 == a2); <span class=\"comment\">// false</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里调用的是 Object 对象的 equals()</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">b4</span> <span class=\"operator\">=</span> a1.equals(a2); <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Object</code>的<code>equals()</code>函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"built_in\">this</span> == obj); <span class=\"comment\">// 默认的 `equals()` 相当于 `==`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于其他类型对象（如String）进行比较调用的<code>equals()</code>能得出正确结果，就是它们重写了<code>equals()</code>，对内容进行比较。这里看下String重写的<code>equals()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object anObject)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先判断对象引用，如果是自己和自己比较，那到这一步就结束了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断待比较对象是否为 String 类型或者其子类</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">anotherString</span> <span class=\"operator\">=</span> (String)anObject;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"comment\">// 判断字符串长度是否相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"type\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 循环遍历比较每个字符判断是否相同</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>回到一开始的问题：</p>\n<blockquote>\n<p><code>==</code>比较的是对象引用，<code>equals()</code>比较的是对象内容？</p>\n</blockquote>\n<p><code>==</code>比较的是对象引用</p>\n<p><code>equals()</code>比较的是什么就看具体定义了。不过大多数类重写了<code>equals()</code>，通过比较对象内容来判断对象是否相同。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://lingcoder.github.io/OnJava8/#/\">On Java 8</a></li>\n</ul>\n","categories":["Java"],"tags":["Note","Java"]},{"title":"移除日志中的图片 Base64","url":"/p/28817bf4/","content":"<p>有的时候在日志里看到图片 Base64，一整串又臭又长的字符串，严重影响了日志的可读性。这里提供了一个方法，可以将图片 Base64 移除。</p>\n<span id=\"more\"></span>\n\n<p><strong>Image Base64 Pattern</strong>：<code>[A-Za-z\\\\d+/]&#123;214&#125;([A-Za-z\\\\d+/][A-Za-z\\\\d+/=]+|==)</code></p>\n<blockquote>\n<p>准确来说是可以匹配到图片Base64的正则表达式</p>\n<p>参考 <a href=\"https://segmentfault.com/q/1010000009218488\">指定长度且Base64编码的正则匹配</a></p>\n</blockquote>\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><p><strong>对于已打印图片Base64的日志</strong>，使用perl（PCRE）移除，这里给出pecl的（sed的那种POSIX的正则真的搞不来）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">perl -pi -e <span class=\"string\">&#x27;s/[A-Za-z\\\\d+/]&#123;214&#125;([A-Za-z\\\\d+/][A-Za-z\\\\d+/=]+|==)/\\-/gi&#x27;</span> xxx.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h2><p>预防就是<strong>通过配置日志规则</strong>（logback）过滤替换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogMsgConverter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MessageConverter</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Pattern</span> <span class=\"variable\">IMAGE_BASE64_PATTERN</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;[A-Za-z\\\\d+/]&#123;214&#125;([A-Za-z\\\\d+/][A-Za-z\\\\d+/=]+|==)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">convert</span><span class=\"params\">(ILoggingEvent event)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">logMsg</span> <span class=\"operator\">=</span> event.getFormattedMessage();</span><br><span class=\"line\">\t\t\tlogMsg = handleMsg(logMsg);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> logMsg;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">&quot;convert log error!&quot;</span>, e);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.convert(event);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 处理日志内容</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">handleMsg</span><span class=\"params\">(String param)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 替换图片 base64</span></span><br><span class=\"line\">\t\t<span class=\"type\">Matcher</span> <span class=\"variable\">imageBase64Matcher</span> <span class=\"operator\">=</span> IMAGE_BASE64_PATTERN.matcher(param);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> imageBase64Matcher.replaceAll(<span class=\"string\">&quot;[IMAGE BASE64]&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>logback.xml</code>中添加日志处理：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 日志内容处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;msg&quot;</span> <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;com.hikvision.demo.config.LogMsgConverter&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以控制台为例 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 控制台 appender --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;STDOUT&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSXXX&#125; %level $&#123;COMPONENT_ID&#125;.$&#123;SEGMENT_ID&#125; [%thread] [%logger&#123;50&#125;:%line]</span><br><span class=\"line\">            %msg%n</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["Java Web"],"tags":["Image","Base64","SpringBoot","Perl"]},{"title":"JDBC driver for SQL Server 2000","url":"/p/7a9a1c6c/","content":"<p>解决SQL Server上古版本SQL Server 2000的JDBC驱动问题，使用Maven快捷解决。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a><strong>TL;DR</strong></h2><p>使用驱动sqljdbc4的3.0版本(即<code>sqljdbc4-3.0.jar</code>)，该驱动支持<code>SQL Server 2000</code></p>\n<p>Maven 导入<a href=\"https://mvnrepository.com/artifact/com.microsoft/sqljdbc4/3.0\">MSSQL JDBC Driver » 3.0</a>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.microsoft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sqljdbc4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件中：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.url=jdbc:sqlserver://ip:port;databaseName=xxx</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.username=</span></span><br><span class=\"line\"><span class=\"string\">spring.datasource.password=</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>一开始使用的是<code>sqljdbc4</code>的4.0版本的驱动进行连接，然后报了类似<code>SQL Server version 8 is not supported by this driver.</code>的错误。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.microsoft.sqlserver<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sqljdbc4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>问题就是这个驱动不支持<code>SQL Server version 8</code>（即<code>SQL Server 2000</code>）<br>然后去查怎么连接SQL Server的驱动，有的文章告诉我要导入3个jar包，有的文章说要使用<code>jTDS</code>，有的文章说要使用mssql驱动，有的文章说用sqljdbc4等等，要自己一个一个尝试，心累…</p>\n<p>然后看到了<a href=\"https://docs.microsoft.com/en-us/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server-support-matrix?view=sql-server-ver15\">Microsoft JDBC Driver for SQL Server support matrix</a>，里面描述了2000的驱动仅支持JDBC 3.0，然后将一开始的maven依赖版本换成3.0，但是没这个包。在mvnrepository上查到只有一个包：</p>\n<p><img data-src=\"/p/7a9a1c6c/sqljdbc4-4.0.png\"></p>\n<p>然后再查sqljdbc4发现<code>MSSQL JDBC Driver</code>，时间还是2011年，那应该没跑了（🤦‍♂️</p>\n<p><img data-src=\"/p/7a9a1c6c/sqljdbc4.png\"></p>\n<p>然后试了发现这个驱动支持，亲测连接和操作成功。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>这里记录一下吧，希望下次有人需要连接上古SQL Server 2000的时候，遇到类似的问题能够看到这个解决方法，不用浪费时间去找这么久（<del>太难了</del></p>\n","categories":["Java Web"],"tags":["Java","Spring Boot","JDBC","Driver"]},{"title":"SpringBoot Properties 配置乱码处理","url":"/p/e678b765/","content":"<p>探究下为什么 Properties 中的中文的属性值会乱码，以及相关的解决方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>造成读取到的属性值可能出现乱码是因为 Java Properties 的文件编码是<code>ISO-8859-1</code>，该字符集里并不包含中文字符，遇到中文字符或者其他不包含的字符时，就会出现乱码。</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/.properties#:~:text=Before%20Java%209%2C%20the%20encoding%20of%20a%20.properties%20file%20is%20ISO%2D8859%2D1\">wiki</a>: <code>Before Java 9, the encoding of a .properties file is ISO-8859-1</code></p>\n</blockquote>\n<p>而 SpringBoot 为了适配 Java Properties 这种情况，也选择使用<code>ISO-8859-1</code>的编码格式，所以也就会出现乱码的情况。</p>\n<blockquote>\n<p>SpringBoot 的维护者也改用过 UTF-8 的编码去读取 Properties（v1.3.1）👇</p>\n<p><a href=\"https://github.com/spring-projects/spring-boot/issues/5361\">.properties should be encoded in ISO-8859-1</a></p>\n<p>Java 和 Spring 这两个对 Properties 都用<code>ISO-8859-1</code>的编码格式👆</p>\n<p>SpringBoot 为了避免编码与前面二者不一致导致读取出现问题，又改回去了（\\无奈）。</p>\n<p>不过现在 Java 9 开始，Properties 都改成了 UTF-8 编码格式，Spring 和 SpringBoot 什么时候改呀👀</p>\n<p><a href=\"https://en.wikipedia.org/wiki/.properties#:~:text=In%20Java%209%20and%20newer%2C%20the%20default%20encoding%20specifically%20for%20property%20resource%20bundles%20is%20UTF%2D8%2C%20and%20if%20an%20invalid%20UTF%2D8%20byte%20sequence%20is%20encountered%20it%20falls%20back%20to%20ISO%2D8859%2D1.\">wiki</a>: In Java 9 and newer, the default encoding specifically for property resource bundles is UTF-8, and if an invalid UTF-8 byte sequence is encountered it falls back to ISO-8859-1.</p>\n</blockquote>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><p>SpringBoot 中是如何读取 Properties 的？</p>\n<ol>\n<li><p>在 SpringBoot 的<code>META-INF/spring.factories</code>中查看 SpringBoot 配置用于读取 Properties 的类为<code>org.springframework.boot.env.PropertiesPropertySourceLoader</code></p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"># PropertySource Loaders</span><br><span class=\"line\">org.springframework.boot.env.PropertySourceLoader=\\</span><br><span class=\"line\">org.springframework.boot.env.PropertiesPropertySourceLoader,\\</span><br><span class=\"line\">org.springframework.boot.env.YamlPropertySourceLoader</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>PropertiesPropertySourceLoader/loadProperties</code>方法里判断后缀，然后通过不同方式读取<code>.xml</code>和<code>.properties</code>的配置。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertiesPropertySourceLoader</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PropertySourceLoader</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">XML_FILE_EXTENSION</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.xml&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Map&lt;String, ?&gt;&gt; loadProperties(Resource resource) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">filename</span> <span class=\"operator\">=</span> resource.getFilename();</span><br><span class=\"line\">        List&lt;Map&lt;String, ?&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filename != <span class=\"literal\">null</span> &amp;&amp; filename.endsWith(XML_FILE_EXTENSION)) &#123;</span><br><span class=\"line\">            result.add((Map) PropertiesLoaderUtils.loadProperties(resource));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            List&lt;Document&gt; documents = <span class=\"keyword\">new</span> <span class=\"title class_\">OriginTrackedPropertiesLoader</span>(resource).load();</span><br><span class=\"line\">            documents.forEach((document) -&gt; result.add(document.asMap()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>new OriginTrackedPropertiesLoader(resource).load()</code>的load方法里通过<code>CharacterReader</code>读取 Properties 文件：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">CharacterReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CharacterReader</span>(<span class=\"built_in\">this</span>.resource)</span><br></pre></td></tr></table></figure>\n\n<p> 而<code>CharacterReader</code>的构造方法里通过<code>ISO_8859_1</code>来读取：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">CharacterReader(Resource resource) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.reader = <span class=\"keyword\">new</span> <span class=\"title class_\">LineNumberReader</span>(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(resource.getInputStream(), StandardCharsets.ISO_8859_1));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ol>\n<li><p>新建一个 Properties 文件，将自定义配置放到在里面，然后通过<code>@PropertySource(value = &quot;classpath:xxx.properties&quot;, encoding = &quot;UTF-8&quot;)</code>注解加载到 Spring 的配置中。</p>\n</li>\n<li><p>在 SpringBoot 项目中设置<code>spring.factory</code>的<code>org.springframework.boot.env.PropertySourceLoader</code>，指定自定义的 PropertySourceLoader, 自定义处理。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/spring-projects/spring-boot/issues/19185\">About the coding problem with properties</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/commit/d6a424f94c4ed43dfee8b77f380de2529a256843\">Add support for UTF-8 in application.properties</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-boot/issues/4622\">Support for UTF-8 in application.properties #4622</a></li>\n<li><a href=\"https://stackoverflow.com/questions/37436927/utf-8-encoding-of-application-properties-attributes-in-spring-boot\">UTF-8 encoding of application.properties attributes in Spring-Boot</a></li>\n</ul>\n","categories":["Java Web"],"tags":["SpringBoot","Properties","Chinese"]},{"title":"Spring Cloud Consul","url":"/p/5ab6a329/","content":"<p>使用 Consul 做服务注册和发现，将接口注册到 Consul 中，然后通过 Feign&#x2F;RestTemplate 方式调用 Consul 注册到服务中的接口。新建两个服务，一个是服务提供方，一个是服务调用方。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装-Consul\"><a href=\"#安装-Consul\" class=\"headerlink\" title=\"安装 Consul\"></a>安装 Consul</h2><ol>\n<li>下载对应版本的 Consul 安装即可，参考<a href=\"https://developer.hashicorp.com/consul/downloads\">Consul Download</a></li>\n<li>可以通过<code>consul version</code> 查看安装是否成功。</li>\n<li>启动，本地测试直接<code>consul agent -dev</code> 启动，服务管理页面在<code>localhost:8500</code></li>\n</ol>\n<h2 id=\"服务提供方\"><a href=\"#服务提供方\" class=\"headerlink\" title=\"服务提供方\"></a>服务提供方</h2><ol>\n<li><p>引入依赖</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 Spring Consul</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">18081</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">consul-test-001</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/$&#123;spring.application.name&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># dev consul config</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.host</span>=<span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.port</span>=<span class=\"string\">8500</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.preferIpAddress</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.ip-address</span>=<span class=\"string\">192.168.0.123</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.health-check-path</span>=<span class=\"string\">/$&#123;spring.application.name&#125;/health</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.health-check-interval</span>=<span class=\"string\">15s</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.instanceId</span>=<span class=\"string\">$&#123;spring.application.name&#125;:$&#123;random.value&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 开启心跳检测</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.heartbeat.enabled</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure>\n\n<p> 这个配置里有几个需要注意的地方：</p>\n<ul>\n<li><p><code>spring.cloud.consul.discovery.heartbeat.enabled=true</code>, 表示使用的是 TTL Health Check 方式，服务提供方主动上报，如果此项配置, 默认是使用的是 HTTP Health Check 方式, Consul 主动检测。</p>\n</li>\n<li><p><code>spring.cloud.consul.discovery.ip-address=192.168.0.123</code>: 这里写的是本地 ip, 而不是回环地址<code>127.0.0.1</code>或者<code>localhost</code>。如果本地配置为回环地址，会导致 Consul 检测服务状态失败。这个服务的状态会显示<code>All service checks failing</code></p>\n</li>\n<li><p><code>spring.application.name=demoName</code>, 这里如果没有设置应用名称, 会导致注册到 Consul 的服务id为空, 会出现一些奇怪的异常。在 SpringBoot 2.7.7 版本会出现一些类初始化问题, 产生<code>IllegalStateException</code>、<code>NoClassDefFoundError</code>以及<code>ClassNotFoundException</code>等异常。</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">java.lang.IllegalStateException: Error processing condition on org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.loadBalancerClientFactory</span><br></pre></td></tr></table></figure>\n\n<p>   但在 SpringBoot 3.x 版本会提示是缺少<code>spring.application.name</code>导致 Consul 服务 id 为空：</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Consul service ids must not be empty, must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen: $&#123;spring.application.name&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>定义有个服务接口</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/consul/producer&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsulProducerController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sayHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;invoke say hello method&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务后，服务会自动将信息注册到 consul。查看 consul 的web页面(默认<code>http://localhost:8500</code>), 在<code>Health Checks</code>可以看到<code>Service &#39;consul-test-001&#39; check</code>，展示该服务的状态，在<code>Service Instances</code>中可以看到服务提供方的地址及上下文：</p>\n<p> <img data-src=\"/p/5ab6a329/consul-health-check.jpg\" alt=\"consul-health-check\"></p>\n<p> <img data-src=\"/p/5ab6a329/consul-service-instance.jpg\" alt=\"consul-service-instance\"></p>\n</li>\n</ol>\n<h2 id=\"服务调用方\"><a href=\"#服务调用方\" class=\"headerlink\" title=\"服务调用方\"></a>服务调用方</h2><ol>\n<li><p>依赖在服务发现的依赖基础上，多加一个<code>openfeign</code>的依赖，通过 Feign 服务的方式直接调用 consul 服务的接口。</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#application config</span></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">19000</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">feign-demo</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/$&#123;spring.application.name&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#consul config</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.host</span>=<span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.port</span>=<span class=\"string\">8500</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.preferIpAddress</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 配置调用方的服务不注册到 consul 中</span></span><br><span class=\"line\"><span class=\"attr\">spring.cloud.consul.discovery.register</span>=<span class=\"string\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用负责均衡的RestTemplate调用 Consul 上已注册的服务接口</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestTemplateConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">loadBalancedRestTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个 FeignClient，通过feign的方式调用。<code>name</code>配置服务方的服务名，<code>path</code>配置该服务的路径前缀。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;consul-test-001&quot;, path = &quot;/consul-test-001/consul/producer&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FeignDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">hello</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试调用</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FeignDemoApplicationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    FeignDemo feignDemo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeByRestTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">forObject</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.restTemplate.getForObject(<span class=\"string\">&quot;http://consul-test-001/consul-test-001/consul/producer/hello&quot;</span>, String.class);</span><br><span class=\"line\">        System.out.println(forObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">invokeByFeign</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> feignDemo.hello();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;res&quot;</span> + hello);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://docs.spring.io/spring-cloud-consul/docs/4.0.0/reference/html/\">Spring Cloud Consul</a></li>\n<li><a href=\"https://docs.spring.io/spring-cloud-consul/docs/4.0.0/reference/html/appendix.html\">spring-cloud-consul 配置项说明</a></li>\n<li><a href=\"https://developer.hashicorp.com/consul/api-docs/agent/check#http\">Consul HTTP Health Check</a></li>\n<li><a href=\"https://github.com/spring-cloud/spring-cloud-consul\">spring-cloud&#x2F;spring-cloud-consul</a></li>\n</ul>\n","categories":["Java Web"],"tags":["SpringBoot","Consul","SpringCloud"]},{"title":"最小Spring MVC工程实现","url":"/p/c20ec41b/","content":"<p>Spring MVC Using Java Configuration<br>一个普通的简单的最小化Hello World项目配置</p>\n<span id=\"more\"></span>\n\n<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>网上看了很多都是假的Hello World，有的教程太老，很多方法已经不适用(GG了)，还有的太复杂了，还有的并不纯粹，不适用于初学者。</p>\n<p>我只想做一个最小化的基于Java Config配置的Spring MVC的Hello World程序。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><ul>\n<li>Tomcat: apache-tomcat-9.0.21</li>\n<li>IDE: IDEA</li>\n<li>JDK: JDK 12(jdk-12.0.1)</li>\n<li>Spring: 5.0.2.RELEASE</li>\n<li>Maven: 3.3.9</li>\n<li>Servlet 3.0+</li>\n</ul>\n<h3 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h3><ol>\n<li><code>File</code>-<code>New</code>-<code>Project...</code></li>\n<li><code>Maven</code>-<code>Project JDK</code>选择JDK-勾选<code>Create from archetype</code>（选择模板原型创建项目）-选择<code>maven-archetype-webapp</code></li>\n<li>填写<code>GroupId</code>（使用倒置的域名）、<code>ArtifactId</code>（项目名称，唯一标识）</li>\n<li>然后一路Next-等待Maven构建项目完成</li>\n</ol>\n<h3 id=\"配置pom-xml\"><a href=\"#配置pom-xml\" class=\"headerlink\" title=\"配置pom.xml\"></a>配置<code>pom.xml</code></h3><ol>\n<li>设置Spring版本<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--设置Maven编译版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--选择Spring的版本--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.0.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在上面设置了Spring版本信息，用于下面设置与Spring有关的依赖包版本，便于日后修改Spring版本。修改时，只需要修改这里的<code>spring.version</code>即可</p>\n<ol start=\"2\">\n<li>添加依赖和Spring MVC组件<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--标准标签库--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>对于各个版本的信息与选择可以在<a href=\"https://tomcat.apache.org/whichversion.html\">Tomcat&#x2F;whichversion</a>网站上查看</p>\n<blockquote>\n<p>Apache Tomcat® is an open source software implementation of the Java Servlet and JavaServer Pages technologies. Different versions of Apache Tomcat are available for different versions of the Servlet and JSP specifications. The mapping between <a href=\"https://cwiki.apache.org/confluence/display/TOMCAT/Servlet+and+JSP+specifications\">the specifications</a> and the respective Apache Tomcat versions is:</p>\n</blockquote>\n<p>Apache Tomcat® 是一个基于 Java Servlet 和 JSP 技术的开源软件实现。 不同版本的 Apache Tomcat 可用于 Servlet 和 JSP 规范的不同版本。 规范和 Apache Tomcat 版本之间的映射如下:<br><img data-src=\"/p/c20ec41b/which-version.png\" alt=\"which-version\"></p>\n<blockquote>\n<p>图源：<a href=\"https://tomcat.apache.org/whichversion.html\">whichversion</a><br>其中：superseded表示已废除，N&#x2F;A表示不适用，archived表示已归档</p>\n</blockquote>\n<p>但上面的版本有的在Maven repo里并不存在，比如上面的<code>JSP Spec</code>，在Maven里只支持到2.2(见<a href=\"https://mvnrepository.com/artifact/javax.servlet.jsp/jsp-api\">javax.servlet.jsp&#x2F;jsp-api</a>)，那只能选2.2了，还有一个尽量选择Maven repo网站上显示使用较多的版本。</p>\n<h3 id=\"完善项目结构\"><a href=\"#完善项目结构\" class=\"headerlink\" title=\"完善项目结构\"></a>完善项目结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">├─.idea</span><br><span class=\"line\">└─src</span><br><span class=\"line\">    └─main</span><br><span class=\"line\">        ├─java</span><br><span class=\"line\">        │  └─org</span><br><span class=\"line\">        │      └─js</span><br><span class=\"line\">        │          └─umm</span><br><span class=\"line\">        │              ├─config</span><br><span class=\"line\">        │              └─web</span><br><span class=\"line\">        │                  └─controller</span><br><span class=\"line\">        └─webapp</span><br><span class=\"line\">            └─WEB-INF</span><br><span class=\"line\">                └─view</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong></p>\n<ul>\n<li>在config文件夹下编写Spring Web MVC的配置文件<code>WebConfig</code>启用MVC和配置视图解析器。</li>\n<li>在config文件夹下编写一个初始化器类用于引导加载<code>WebConfig</code>的应用程序<code>MyWebApplicationInitializer</code></li>\n<li>在controller文件夹下基本控制器<code>HelloWorldController</code>处理请求</li>\n<li>在view下创建视图页面</li>\n</ul>\n<h2 id=\"程序清单\"><a href=\"#程序清单\" class=\"headerlink\" title=\"程序清单\"></a>程序清单</h2><blockquote>\n<p>程序里的<code>import</code>包这里省略了，自行根据提示添加</p>\n</blockquote>\n<h3 id=\"配置WebCofig\"><a href=\"#配置WebCofig\" class=\"headerlink\" title=\"配置WebCofig\"></a>配置WebCofig</h3><blockquote>\n<p>配置WebMVC</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.js.umm.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span> <span class=\"comment\">// 启用 Spring MVC 支持</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &#123;&quot;org.js.umm.web&quot;&#125;)</span> <span class=\"comment\">// 扫描web包下的组件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显式配置视图解析器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewResolver <span class=\"title function_\">viewResolver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">InternalResourceViewResolver</span> <span class=\"variable\">resolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InternalResourceViewResolver</span>();</span><br><span class=\"line\">        resolver.setViewClass(JstlView.class);</span><br><span class=\"line\">        <span class=\"comment\">// 设置路径前缀</span></span><br><span class=\"line\">        resolver.setPrefix(<span class=\"string\">&quot;/WEB-INF/view/&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置后缀</span></span><br><span class=\"line\">        resolver.setSuffix(<span class=\"string\">&quot;.jsp&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<details class=\"note \"><summary><p>class_name</p>\n</summary>\n<blockquote>\n<p>Note that for versions earlier than Spring 5, we have to use the <em>WebMvcConfigurerAdapter</em> class instead of the interface.<br>注意：对于比 Spring 5更早的版本，我们必须使用 WebMvcConfigurerAdapter 类而不是接口。</p>\n</blockquote>\n\n</details>\n\n<blockquote>\n<p>btw: 配置了<code>WebConfig</code>可能会出现<code>application context not configured for this file</code>的提示（鼠标悬浮在WebConfig类上时）。意味着未为此文件配置应用程序上下文。</p>\n</blockquote>\n<p>解决方法：<br><img data-src=\"/p/c20ec41b/webconfig.png\"></p>\n<blockquote>\n<p>最好每次项目运行前检查一下是否所有配置都应用到程序上下文中。</p>\n</blockquote>\n<h3 id=\"MyWebApplicationInitializer\"><a href=\"#MyWebApplicationInitializer\" class=\"headerlink\" title=\"MyWebApplicationInitializer\"></a>MyWebApplicationInitializer</h3><blockquote>\n<p>配置DispatcherServlet</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.js.umm.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyWebApplicationInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebApplicationInitializer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStartup</span><span class=\"params\">(ServletContext container)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">        <span class=\"type\">AnnotationConfigWebApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigWebApplicationContext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        context.scan(<span class=\"string\">&quot;org.js.umm&quot;</span>);</span><br><span class=\"line\">        container.addListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextLoaderListener</span>(context));</span><br><span class=\"line\">        ServletRegistration.<span class=\"type\">Dynamic</span> <span class=\"variable\">dispatcher</span> <span class=\"operator\">=</span> container.addServlet(<span class=\"string\">&quot;mvc&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServlet</span>(context));</span><br><span class=\"line\">        dispatcher.setLoadOnStartup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        dispatcher.addMapping(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐使用<code>AbstractAnnotationConfigDispatcherServletInitializer</code>进行配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyWebApplicationInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置应用上下文</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>&lt;?&gt;[]&#123;RootConfig.class&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置web上下文</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>&lt;?&gt;[]&#123;WebConfig.class&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置dispatchservlet</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String[] getServletMappings() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;/&quot;</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 解决中文乱码</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Filter[] getServletFilters() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CharacterEncodingFilter</span> <span class=\"variable\">characterEncodingFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CharacterEncodingFilter</span>();</span><br><span class=\"line\">        characterEncodingFilter.setEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Filter</span>[]&#123;characterEncodingFilter&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HelloWorldController\"><a href=\"#HelloWorldController\" class=\"headerlink\" title=\"HelloWorldController\"></a>HelloWorldController</h3><blockquote>\n<p>编写控制器，处理请求映射</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.js.umm.web.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorldController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>; <span class=\"comment\">// 返回页面名称</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写页面\"><a href=\"#编写页面\" class=\"headerlink\" title=\"编写页面\"></a>编写页面</h3><p>在<code>/WEB-INF/view/</code>新建一个<code>hello.jsp</code>（因为根据上面写的视图解析器规则，相应的视图应该位于<code>/WEB-INF/view/</code>下的jsp文件），至于页面内容随便写点什么，页面内容如下，这里简单地显示了一个一级标题<code>HelloWorld!</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Welcome<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a>，出现自己编写的页面内容，说明测试成功。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>整个框架处理过程如图：<br><img data-src=\"/p/c20ec41b/mvc.png\"></p>\n<blockquote>\n<p>图源：<a href=\"https://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/mvc.html\">spring-framework-reference&#x2F;mvc</a></p>\n</blockquote>\n<p>整个过程：</p>\n<ol>\n<li>用户发送请求给前端控制器<code>DispatcherServlet</code></li>\n<li><code>DispatcherServlet</code>向控制器发送请求</li>\n<li>控制器根据相应映射处理请求，返回一个model给前端控制器<code>DispatcherServlet</code></li>\n<li>前端控制器把这个model交给视图解析器解析</li>\n<li>视图解析器查找到相应的视图页面后，返回渲染后的的视图页面给前端控制器</li>\n<li>前端控制器返回页面显示给用户</li>\n</ol>\n<p>除了引入必要的依赖配置了<code>pom.xml</code>，通过Java Config实现xml零配置构建一个简单最小化可运行的Spring Web MVC模型。虽然是最简单的HelloWorld，但整个Spring MVC的工作流程基本都涉及到了。</p>\n<blockquote>\n<p><del>emm主要可以逃离可怕的xml配置</del><br><del>xml工程师？？</del><br><del>tan90°？？</del></p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.baeldung.com/spring-mvc-tutorial\">Spring MVC Tutorial</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\">spring-framework-reference&#x2F;web</a></li>\n</ol>\n<blockquote class=\"blockquote-center\">\n<p>一旦只追求「结果」，人就容易想方设法抄近路<br>在抄近路的过程中，人又容易迷失真相<br>做事的干劲也会逐渐消磨殆尽<br>——《JOJO》</p>\n\n</blockquote>\n","categories":["Java Web"],"tags":["Java","Spring","Spring MVC"]},{"title":"Spring MVC 简单实现博客内容管理系统","url":"/p/fbf9fa8b/","content":"<p>Spring MVC 以及 Redis 的学习实战（练手Demo…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>暑假在学Web(Spring Framework)相关的内容，一开始在B站看了一些视频了解了一下（看视频好像真的学的慢惹），然后开始看官方文档（重点看 MVC 那章）学习。然后这两天，做了一个 CMS demo，实现了文章的提交，修改，发布，删除，以及用户注册、登录，管理员全局管理提交文章以及用户管理等功能。最初的 demo 做出来花了两天，完善花了两天。 <del>一直在写 bug ，改 bug …</del></p>\n<p>项目开源：<a href=\"https://github.com/umm233/SpringMVCDemo\">SpringMVCDemo</a></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>这里数据存储用的是 Redis ，一开始应该考虑一下存储数据的数据结构，一个好的数据结构可以避免后面很多问题。</p>\n<ol>\n<li>用户注册&#x2F;登录，需要存储用户信息（用户名和密码）：(Hash)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>hkey</th>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>user:</td>\n<td>uid</td>\n<td>User对象</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>为了便于快捷查询，添加了 username 对应 id 的键值对：(Hash)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>hkey</th>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>userId:</td>\n<td>username</td>\n<td>id</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>存储所有提交的文章：(Hash)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>hkey</th>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>article:</td>\n<td>id</td>\n<td>article对象</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li>存储用户和其提交文章的对应关系：（Set）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>userPost:{id}</td>\n<td>articleId</td>\n</tr>\n</tbody></table>\n<p>注：这里的 id 是可变的，为用户 id 。</p>\n<p>Redis 中存储的数据长这样：</p>\n<p><img data-src=\"/p/fbf9fa8b/001.png\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ol>\n<li>其中上面的 id 和 uid 是在 Redis 中设置了一个 String-Value 类型的键值对，然后每次操作的时候让它自增，作为一些数据结构的主键。</li>\n<li>尽量使用不变（不经常修改）的对象作为主键，如上面的 id 以及 uid。</li>\n<li>使用 <code>redis-cli</code> 查看数据不太方便，然后先试用 <a href=\"https://redisdesktop.com/\">Redis Desktop Manager</a> 监视数据。后来换成 <a href=\"https://github.com/qishibo/AnotherRedisDesktopManager\">AnotherRedisDesktopManager</a>。并不是 Redis Desktop Manager 不好，只是用不了了😂，后来找到 AnotherRedisDesktopManager 替代。</li>\n</ol>\n<h2 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h2><p>项目结构：</p>\n<p><img data-src=\"/p/fbf9fa8b/002.png\"></p>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>User类，Article类（ArticleData），包含一些属性（field）以及对应的 get 和 set 方法。</p>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>JSP页面，呈现给用户的页面。<br>ps. 前端主要靠 <a href=\"https://v3.bootcss.com/\">bootstrap</a></p>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><p>url 映射方法，访问链接，执行相关方法，基本上是对数据进行增删改查（CRUD）。<br>这个是重点，配合 service 里的方法使用。service 里的类分为接口类以及相应的实现类，接口类作为规范存在。</p>\n<h3 id=\"interceptor\"><a href=\"#interceptor\" class=\"headerlink\" title=\"interceptor\"></a>interceptor</h3><p>项目结构里还出现了其他文件夹 – interceptor（拦截器），拦截到特定的请求链接，执行一些操作。比如用户在访问需要登录才能操作的选项时（eg.文章提交），拦截器会拦截到这个请求，判断用户是否登录，若未登录，跳转到用户登录页面。</p>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><p>项目初成时遇到了好些问题，总结一下：</p>\n<p><strong>1. 页面输入框未作处理，会受到 XSS 攻击</strong></p>\n<p>解决方法：<br>在所有的 Controller 中加上<code>InitBinder</code>，将所有传递进来的String进行HTML编码，防止XSS攻击。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@InitBinder</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initBinder</span><span class=\"params\">(WebDataBinder binder)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// String类型转换，将所有传递进来的String进行HTML编码，防止XSS攻击。</span></span><br><span class=\"line\">        binder.registerCustomEditor(String.class, <span class=\"keyword\">new</span> <span class=\"title class_\">PropertyEditorSupport</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAsText</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">                setValue(text == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : StringEscapeUtils.escapeHtml4(text.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> String <span class=\"title function_\">getAsText</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getValue();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value != <span class=\"literal\">null</span> ? value.toString() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. 用户和管理员之间鉴权</strong></p>\n<p>这一点，依靠 session 域中的 <code>CURRENT_USER</code>（User类），判断其 name 属性来确定管理员&#x2F;用户身份。</p>\n<p><strong>3. Redis 序列化问题</strong></p>\n<p>当 Redis 中 value 值为对象的时候，序列化是个问题。</p>\n<p>解决方法：<br>在定义模板时，使用 json 序列化对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory cf)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    RedisTemplate&lt;Object, Object&gt; redis = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">    redis.setConnectionFactory(cf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">    <span class=\"type\">Jackson2JsonRedisSerializer</span> <span class=\"variable\">jackson2JsonRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(ArticleData.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// key-value序列化</span></span><br><span class=\"line\">    redis.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">    redis.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">    <span class=\"comment\">// hash key-value序列化</span></span><br><span class=\"line\">    redis.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">    redis.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\"></span><br><span class=\"line\">    redis.afterPropertiesSet(); <span class=\"comment\">// 初始化Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 hash 的 vlaue 使用 json 序列化。</p>\n<p><strong>4. 遇到多个Bean对象实现相同的接口或者类，无法自动装配Bean对象</strong></p>\n<p>这会引发类似 <code>available: expected single matching bean but found 2</code> 的 error。</p>\n<p>解决方法：</p>\n<ul>\n<li><p>先在其中一个常用的 Bean 对象上添加<code>@Primary</code>区分bean的优先级</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(&quot;redisTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory cf)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在装配 Bean 对象的时候，使用<code>@Qualifier</code>选择需要 Bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;redisTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RedisTemplate&lt;Object, ArticleData&gt; redisTemplate;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>做下来一个完整项目，熟悉了一遍 Spring MVC 的开发流程。在遇到的问题中，也学习了很多平常忽略的知识。回顾这个项目，还是有些地方没做好，比如 Controller 类里还是包含了一些业务逻辑，安全方面也有点捉急😂。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://my.oschina.net/gaussik/blog/513614\">使用IntelliJ IDEA开发SpringMVC网站（四）用户管理</a></li>\n<li><a href=\"https://lexburner.github.io/spring-data-redis-2/\">Spring Data Redis（二）–序列化</a></li>\n</ol>\n","categories":["Java Web"],"tags":["Note","Spring MVC","Redis"]},{"title":"Spring MVC之Redis学习","url":"/p/b6e26cdc/","content":"<p>Spring MVC操作Redis初试</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Redis学习\"><a href=\"#Redis学习\" class=\"headerlink\" title=\"Redis学习\"></a>Redis学习</h2><p>1.<a href=\"https://github.com/JasonLai256/the-little-redis-book\">The Little Redis Book</a></p>\n<blockquote>\n<p>The Little Redis Book is a free book introducing Redis.</p>\n</blockquote>\n<p>先对Redis有个大致的了解，然后</p>\n<blockquote>\n<p>没有什么事情比高兴的玩和试验有趣的东西来得更重要的了。在任何时候，你都能通过键入<code>flushdb</code>命令将你数据库里的所有值清除掉，因此，不要再那么害羞了，去尝试做些疯狂的事情吧！</p>\n</blockquote>\n<p>2.<a href=\"https://redis.io/commands\">redis.io&#x2F;commands</a></p>\n<blockquote>\n<p>Redis常用命令(官方文档)</p>\n</blockquote>\n<p>3.<a href=\"http://redisdoc.com/\">《Redis Command Reference》全文的中文翻译版</a></p>\n<blockquote>\n<p>了解Redis的常用命令 (楼上的翻译)</p>\n</blockquote>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><h3 id=\"配置Spring-MVC的环境\"><a href=\"#配置Spring-MVC的环境\" class=\"headerlink\" title=\"配置Spring MVC的环境\"></a>配置Spring MVC的环境</h3><p>可以参考之前的<a href=\"../c20ec41b\">Spring MVC–Hello World</a></p>\n<h3 id=\"配置Redis\"><a href=\"#配置Redis\" class=\"headerlink\" title=\"配置Redis\"></a>配置Redis</h3><h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.data<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"建立数据库连接\"><a href=\"#建立数据库连接\" class=\"headerlink\" title=\"建立数据库连接\"></a>建立数据库连接</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JedisConnectionFactory <span class=\"title function_\">redisConnectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisConnectionFactory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  上面所有配置采用默认设置，这样就可以建立和Redis的连接了。如果要自定义设置那就通过<code>RedisStandaloneConfiguration</code>创建一个<code>config</code>给<code>JedisConnectionFactory</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JedisConnectionFactory <span class=\"title function_\">redisConnectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RedisStandaloneConfiguration</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisStandaloneConfiguration</span>();</span><br><span class=\"line\">        config.setHostName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">        config.setPort(<span class=\"number\">6379</span>);</span><br><span class=\"line\">        config.setDatabase(<span class=\"number\">0</span>); <span class=\"comment\">// 选择数据库</span></span><br><span class=\"line\">        <span class=\"type\">RedisPassword</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> RedisPassword.of(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        config.setPassword(password);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisConnectionFactory</span>(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建Redis预期模板\"><a href=\"#创建Redis预期模板\" class=\"headerlink\" title=\"创建Redis预期模板\"></a>创建Redis预期模板</h4><p>在<code>RedisConfig</code>配置中创建数据库模板</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, String&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory cf)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\">    RedisTemplate&lt;String, String&gt; redis = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">    redis.setConnectionFactory(cf);</span><br><span class=\"line\">    redis.setKeySerializer(stringRedisSerializer); <span class=\"comment\">// key序列化</span></span><br><span class=\"line\">    redis.afterPropertiesSet(); <span class=\"comment\">// 初始化Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> redis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么要序列化?<br>参考<a href=\"https://liuyueyi.github.io/hexblog/2018/06/11/180611-Spring%E4%B9%8BRedisTemplate%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/#3-%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98\">180611-Spring之RedisTemplate配置与使用</a></p>\n</blockquote>\n<h2 id=\"操作RedisTemplate\"><a href=\"#操作RedisTemplate\" class=\"headerlink\" title=\"操作RedisTemplate\"></a>操作RedisTemplate</h2><p>添加测试依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接在测试类里测试使用<code>RedisTemplate</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(classes = &#123;RedisConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">testRedis</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;test1&quot;</span>,<span class=\"string\">&quot;null?&quot;</span>);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">&quot;null?&quot;</span>, redisTemplate.opsForValue().get(<span class=\"string\">&quot;test1&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testList</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPush(<span class=\"string\">&quot;name1&quot;</span>, <span class=\"string\">&quot;leon&quot;</span>);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">&quot;leon&quot;</span>, redisTemplate.opsForList().index(<span class=\"string\">&quot;name1&quot;</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHash</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        redisTemplate.opsForHash().put(<span class=\"string\">&quot;userHash&quot;</span>,<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;10&quot;</span>);</span><br><span class=\"line\">        Assert.assertEquals(<span class=\"string\">&quot;10&quot;</span>,redisTemplate.opsForHash().get(<span class=\"string\">&quot;userHash&quot;</span>,<span class=\"string\">&quot;A&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>@RunWith(SpringJUnit4ClassRunner.class) 来启动 Spring 对该测试类的支持<br>@ContextConfiguration 注释标签来指定 Spring 配置文件或者配置类的位置<br>这里JUnit加载Spring的配置文件来完成Context的初始化，然后从Context中取出Bean完成测试</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>基本上把过程描述了一遍，添加依赖，创建Redis配置类建立连接和创建模板，然后就可以通过模板操作数据库读写数据。整个过程操作起来蛮简单的，配置的也不多。</p>\n<p>期间测试遇到过<code>java.lang.NullPointerException</code>，可能需要在测试类前加上<code>@RunWith(SpringJUnit4ClassRunner.class)</code></p>\n<blockquote>\n<p>When a class is annotated with <code>@RunWith</code> or extends a class annotated with <code>@RunWith</code>, JUnit will invoke the class it references to run the tests in that class instead of the runner built into JUnit.</p>\n</blockquote>\n<p>关于@RunWith注解，当一个类用@runwith 注释或者扩展一个用@RunWith 注释的类时，JUnit 将调用它引用的类来运行该类中的测试，而不是构建在 JUnit 中的运行程序。</p>\n<p>简单来说，就是通过<code>@RunWith(SpringJUnit4ClassRunner.class)</code>注解让测试运行于Spring测试环境，在测试开始的时候自动创建Spring的应用上下文。</p>\n","categories":["Java Web"],"tags":["Java","Spring","Spring MVC","Redis"]},{"title":"Tomcat中文乱码解决","url":"/p/394dfb31/","content":"<p>Tomcat启动以及在IDEA使用时出现中文乱码的解决方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>启动Tomcat的<code>startup.bat</code>时Console窗口中出现中文乱码，以及在IDEA中使用Tomcat部署时，<code>Server</code>和<code>Tomcat Catalina Log</code>窗口中信息出现中文乱码，如<code>淇℃伅</code>等等。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>修改 tomcat安装目录下<code>tomcat\\conf\\logging.properties</code>中的配置文件，将相应的编码修改为GBK。</p>\n<p>具体修改如下：</p>\n<ol>\n<li><p>修复<code>Serve</code>窗口显示中文乱码</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># java.util.logging.ConsoleHandler.encoding = UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">java.util.logging.ConsoleHandler.encoding</span> = <span class=\"string\">GBK</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修复IDEA中<code>Tomcat Catalina Log</code>窗口中显示中文乱码</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1catalina.org.apache.juli.AsyncFileHandler.encoding = UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">1catalina.org.apache.juli.AsyncFileHandler.encoding</span> = <span class=\"string\">GBK</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修复IDEA中<code>Tomcat Localhost Log</code>窗口显示中文乱码</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2localhost.org.apache.juli.AsyncFileHandler.encoding = UTF-8</span></span><br><span class=\"line\"><span class=\"attr\">2localhost.org.apache.juli.AsyncFileHandler.encoding</span> = <span class=\"string\">GBK</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote class=\"blockquote-center\">\n<p>人生就好像一次旅行，不同时期能够从事不同的领域，就好像看到了不同的风景，体验了不一样的人生。<br>——阮一峰</p>\n\n</blockquote>\n","categories":["Java Web"],"tags":["Tomcat","IDEA"]},{"title":"Docker初次使用-搭建TTRSS服务","url":"/p/1be651f5/","content":"<p>学习使用Docker，搭建TTRSS</p>\n<p>「把大象放进冰箱，分三步，打开冰箱门，把大象放进去，关上冰箱门」</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"关于Docker\"><a href=\"#关于Docker\" class=\"headerlink\" title=\"关于Docker\"></a>关于Docker</h3><blockquote>\n<p>Docker provides a way to run applications securely isolated in a container, packaged with all its dependencies and libraries.</p>\n<p>Docker 提供了一种方法来运行安全隔离在容器中的应用程序，该容器与其所有依赖项和库一起打包。</p>\n</blockquote>\n<p>简单来说就是“一套带走”，不需要为运行程序所需要的依赖环境或者库而烦恼，基本上是一键部署，很方便。</p>\n<p>在这之前，我以为docker用起来很难，部署什么很复杂，但实际上自己一套体验下来，除了docker环境搭建，部署服务基本上只有一两行，很方便。</p>\n<h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>安装Docker用一键脚本最方便：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> sh get-docker.sh</span><br><span class=\"line\"><span class=\"comment\"># 测试 Docker 安装</span></span><br><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考：<a href=\"https://docs.docker.com/install/linux/docker-ce/debian/#install-using-the-convenience-script\">Install using the convenience script</a></p>\n</blockquote>\n<p>我的系统是<code>debian</code>，Docker<a href=\"https://docs.docker.com/install/linux/docker-ce/debian\">官方文档</a>写的很详细，第一次安装Docker，我没有使用一键脚本，而是一步一步跟着文档自己手动安装，了解每一步在干什么。<del>（并不是因为我滑到下面才看到一键部署的脚本）</del></p>\n<h2 id=\"Docker-Compose\"><a href=\"#Docker-Compose\" class=\"headerlink\" title=\"Docker Compose\"></a>Docker Compose</h2><h3 id=\"关于Docker-Compose\"><a href=\"#关于Docker-Compose\" class=\"headerlink\" title=\"关于Docker Compose\"></a>关于Docker Compose</h3><blockquote>\n<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. </p>\n<p>Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。 在 Compose 中，您可以使用 YAML 文件来配置应用程序的服务。 然后，使用一个命令，创建并启动配置中的所有服务。</p>\n</blockquote>\n<p>如果通过Docker部署服务，可能在命令后面加入各种各样的参数来配置服务（下次使用的时候，还要重新写一遍😥），显得复杂麻烦。使用Docker Compose加载一个配置文件，我们可以方便的自定义服务配置，而且便于重复使用。</p>\n<div class=\"note info\"><p>Docker Compose是依赖于Docker环境使用的，安装Docker Compose之前，先安装好Docker环境</p>\n</div>\n\n<h3 id=\"安装Docker-Compose\"><a href=\"#安装Docker-Compose\" class=\"headerlink\" title=\"安装Docker Compose\"></a>安装Docker Compose</h3><p>一样的，跟着官方文档</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 运行这个命令下载当前的 Docker Compose 稳定版本</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> curl -L <span class=\"string\">&quot;https://github.com/docker/compose/releases/download/1.25.3/docker-compose-<span class=\"subst\">$(uname -s)</span>-<span class=\"subst\">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"comment\"># 对二进制文件授予可执行权限</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class=\"line\"><span class=\"comment\"># 测试 Docker Compose 安装</span></span><br><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>uname -s</code> 获取当前系统的内核名称（如：Linux）；<code>uname -m</code>用来获取主机硬件架构名称（如：x86_64），根据这些在<code>github release</code>上下载对应的<code>Docker Compose</code>版本。</p>\n<blockquote>\n<p>参考：<a href=\"https://docs.docker.com/compose/install/#install-compose\">install compose</a></p>\n</blockquote>\n<h2 id=\"搭建TTRSS\"><a href=\"#搭建TTRSS\" class=\"headerlink\" title=\"搭建TTRSS\"></a>搭建TTRSS</h2><ul>\n<li><p>打开冰箱门：Docker及Docker Compose环境部署</p>\n</li>\n<li><p>把大象放进去：下载并修改<code>docker-compose.yml</code></p>\n</li>\n<li><p>关上冰箱门：通过<code>docker-compose up -d</code>部署TTRSS服务</p>\n</li>\n</ul>\n<p>具体步骤参考：</p>\n<ul>\n<li><p><a href=\"%5Bhttps://ttrss.henry.wang/zh/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2%5D(https://ttrss.henry.wang/zh/#%E9%80%9A%E8%BF%87-docker-compose-%E9%83%A8%E7%BD%B2)\">Awesome TTRSS-通过 docker-compose 部署</a></p>\n</li>\n<li><p><a href=\"https://tmr.js.org/p/711b5ecc/\">TTRSS+RSSHub 一键部署</a></p>\n</li>\n</ul>\n<div class=\"note warning\"><p>TTRSS 默认监听181端口，遇到无法访问TTRSS主页时，要确认是否打开181端口 </p>\n</div>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Docker大法好，Docker 部署东西很方便，基本上是一键，懒人必备😉</p>\n<p>但是在Windows上使用Docker好像比较麻烦🙄</p>\n<p>ε&#x3D;ε&#x3D;ε&#x3D;┏(゜ロ゜;)┛</p>\n","categories":["Linux"],"tags":["Docker","Linux"]},{"title":"辅助学习Linux命令的工具","url":"/p/e8a4e00d/","content":"<p>Linux 命令学习相关，发现两个比较棒的辅助学习网站推荐一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Linux命令大全搜索工具\"><a href=\"#Linux命令大全搜索工具\" class=\"headerlink\" title=\"Linux命令大全搜索工具\"></a>Linux命令大全搜索工具</h2><blockquote>\n<p>Linux命令大全搜索工具，内容包含Linux命令手册、详解、学习、搜集</p>\n</blockquote>\n<p>发现uTools官方也有基于它的相关插件–”Linux 命令文档”，快捷查询命令详情及使用。</p>\n<p>🔗 <a href=\"https://wangchujiang.com/linux-command\">Website</a> <a href=\"https://github.com/jaywcjlove/linux-command\">GitHub</a></p>\n<p><img data-src=\"/p/e8a4e00d/utools-plugin.jpg\"></p>\n<h2 id=\"explainshell\"><a href=\"#explainshell\" class=\"headerlink\" title=\"explainshell\"></a>explainshell</h2><blockquote>\n<p>match command-line arguments to their help text</p>\n</blockquote>\n<p>将命令行参数与其帮助文本匹配，在学习Linux相关命令的时候帮助我们快速理解命令的作用。</p>\n<p>🔗 <a href=\"https://explainshell.com/\">Website</a> <a href=\"https://github.com/idank/explainshell\">Github</a></p>\n<p><img data-src=\"/p/e8a4e00d/explainshell-screenshot.jpg\"></p>\n<h2 id=\"tldr\"><a href=\"#tldr\" class=\"headerlink\" title=\"tldr\"></a>tldr</h2><blockquote>\n<p>Simplified and community-driven man pages</p>\n</blockquote>\n<p>简化和社区驱动的手册页</p>\n<p>🔗 <a href=\"https://tldr.sh/\">Website</a> <a href=\"https://github.com/tldr-pages/tldr\">Github</a></p>\n<p><img data-src=\"/p/e8a4e00d/tldr-vim-screenshot.png\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>接下来可能会有「每天学习一个命令」系列的文章出现🙃</p>\n","categories":["Linux"],"tags":["Tool","Linux"]},{"title":"Ubuntu 配置 Java 环境","url":"/p/a440bc27/","content":"<p>记录 Java 环境配置。</p>\n<span id=\"more\"></span>\n\n<p>以前安装 Java 比较简单（现在也不难，麻烦一些）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> add-apt-repository ppa:webupd8team/java</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n\n<p>对于 Java 1.8，由于 Oracle 修改了相关协议，不能使用上面的几句命令来安装 Java，输入 <code>sudo add-apt-repository ppa:webupd8team/java</code>返回的内容里说明了原因：</p>\n<blockquote>\n<p>The new Oracle Technology Network License Agreement for Oracle Java SE is substantially different from prior Oracle JDK licenses. </p>\n<p>…</p>\n<p>Oracle Java downloads now require logging in to an Oracle account to download Java updates, like the latest Oracle Java 8u211 &#x2F; Java SE 8u212. Because of this I cannot update the PPA with the latest Java (and the old links were broken by Oracle).</p>\n<p>For this reason, THIS PPA IS DISCONTINUED (unless I find some way around this limitation).</p>\n</blockquote>\n<h2 id=\"Ubuntu-install-Java\"><a href=\"#Ubuntu-install-Java\" class=\"headerlink\" title=\"Ubuntu install Java\"></a>Ubuntu install Java</h2><p>由于上面的原因，这里使用手动安装的方式配置 Java 环境。</p>\n<ul>\n<li><p>查看 Linux 系统信息（32 &#x2F; 64 bit）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看系统版本</span></span><br><span class=\"line\">Linux ubuntu 4.18.0-15-generic <span class=\"comment\">#16~18.04.1-Ubuntu SMP Thu Feb 7 14:06:04 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据 Linux 版本下载所需的 JDK</p>\n<ul>\n<li><p>下载地址：<code>https://www.oracle.com/technetwork/java/javase/downloads/index.html</code></p>\n</li>\n<li><p>需要登录 Oracle 账号</p>\n</li>\n</ul>\n</li>\n<li><p>创建文件夹进行存放 JDK</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> /opt/java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> tar -zxf jdk-8u221-linux-x64.tar.gz -C /opt/java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把 Java 添加到环境变量，并设置<code>JAVA_HOME</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加</span></span><br><span class=\"line\"><span class=\"comment\">#configuration java development enviroument</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/opt/java/jdk1.8.0_221</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新加载 bash 配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出 java 相关信息表示配置成功</span></span><br><span class=\"line\">java version <span class=\"string\">&quot;1.8.0_221&quot;</span></span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_221-b11)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img data-src=\"/p/a440bc27/ubuntu-java.png\"></p>\n<h2 id=\"WSL-install-Java\"><a href=\"#WSL-install-Java\" class=\"headerlink\" title=\"WSL install Java\"></a>WSL install Java</h2><p>过程都是一样的，但是我 wsl 的 bash 用的是 zsh，在配置环境变量的时候要修改的是<code>~/.zshrc</code></p>\n<p>如果使用的是 zsh，但仍修改 <code>~/.bashrc</code>，在执行<code>source ~/.bashrc</code>加载环境变量的时候会出现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/alice/.bashrc:16: <span class=\"built_in\">command</span> not found: <span class=\"built_in\">shopt</span></span><br><span class=\"line\">/home/alice/.bashrc:24: <span class=\"built_in\">command</span> not found: <span class=\"built_in\">shopt</span></span><br><span class=\"line\">/home/alice/.bashrc:111: <span class=\"built_in\">command</span> not found: <span class=\"built_in\">shopt</span></span><br><span class=\"line\">/usr/share/bash-completion/bash_completion:45: <span class=\"built_in\">command</span> not found: <span class=\"built_in\">shopt</span></span><br><span class=\"line\">/usr/share/bash-completion/bash_completion:53: <span class=\"built_in\">command</span> not found: complete</span><br><span class=\"line\">...</span><br><span class=\"line\">/usr/share/bash-completion/bash_completion:80: <span class=\"built_in\">command</span> not found: complete</span><br><span class=\"line\">/usr/share/bash-completion/bash_completion:1461: parse error near `|<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\\[\\e]0;\\u@\\h: \\w\\a\\]\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]$</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方法：重启shell（注销并重新登录以使用新的 shell），猜测可能是缓存问题吧</p>\n<p><img data-src=\"/p/a440bc27/WSL-java.png\" alt=\"wsl-java\"></p>\n<blockquote class=\"blockquote-center\">\n<p>另外，不要再說沒興趣了！沒有花時間去了解一下，不要跟人家說你沒興趣！而且，興趣也是靠培養來的！除了某些特殊人物之外， 沒有花時間趣培養興趣，怎麼可能會有興趣！？<br>—— 鸟哥 Vbird</p>\n\n</blockquote>","categories":["Linux"],"tags":["Java","Linux","Software"]},{"title":"win11 下 WSL 2 代理问题","url":"/p/688ade/","content":"<p>PC 系统更新到 win11 之后遇到了代理的奇怪问题。</p>\n<span id=\"more\"></span>\n\n<p>原本 win10 WSL 2 上使用 proxychains 代理，比如下载一些东西什么的。然后，更新到 win11 之后遇到各种奇怪的问题，如dns无法解析域名，访问代理端口超时等等。</p>\n<p>后面排查出来是由于无法访问到代理端口：</p>\n<ol>\n<li>主系统防火墙</li>\n<li>代理的 IP 地址使用宿主机（主系统的）</li>\n</ol>\n<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><ol>\n<li>查看宿主机 IP</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/resolv.conf | grep nameserver | awk <span class=\"string\">&#x27;&#123; print $2 &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>proxychains 配置代理 IP 为宿主机 IP</p>\n</li>\n<li><p>修改宿主机防火墙，允许WSL访问端口</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># powershell 管理员身份执行或者在“高级安全 Windows Defender 防火墙”界面配置</span></span><br><span class=\"line\"><span class=\"built_in\">New-NetFirewallRule</span> <span class=\"literal\">-DisplayName</span> <span class=\"string\">&quot;WSL&quot;</span> <span class=\"literal\">-Direction</span> Inbound  <span class=\"literal\">-InterfaceAlias</span> <span class=\"string\">&quot;vEthernet (WSL)&quot;</span>  <span class=\"literal\">-Action</span> Allow</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>代理允许局域网连接（Allow LAN）</li>\n</ol>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>在WSL配置代理地址为<code>127.0.0.1</code>，网络其实是 WSL 2 本地的。和docker有点像，网络隔离了，但在之前没有这样的问题。</p>\n<p>然后再查看了官方对于 <a href=\"https://docs.microsoft.com/en-us/windows/wsl/compare-versions\">WSL 1 和 WSL 2 区别的描述</a></p>\n<blockquote>\n<p>If you rely on a Linux distribution to have an IP address in the same network as your host machine, you may need to set up a workaround in order to run WSL 2. WSL 2 is running as a hyper-v virtual machine. This is a change from the bridged network adapter used in WSL 1, meaning that WSL 2 uses a Network Address Translation (NAT) service for it’s virtual network, instead of making it bridged to the host Network Interface Card (NIC) resulting in a unique IP address that will change on restart. To learn more about the issue and workaround that forwards TCP ports of WSL 2 services to the host OS, see <a href=\"https://github.com/microsoft/WSL/issues/4150\">WSL GitHub repository issue 4150, NIC Bridge mode (TCP Workaround)</a>.</p>\n<p>如果您依赖于 Linux 发行版在与主机相同的网络中拥有一个 IP 地址，那么您可能需要设置一个变通方法来运行 WSL 2。WSL 2 运行为 Hyper-V 虚拟机。这与 WSL 1 中使用的桥接网络适配器不同，这意味着 WSL 2 对其虚拟网络使用网络地址转换(Network Address Translation，NAT)服务，而不是将其桥接到主机网络接口卡(Network Interface Card，NIC) ，从而产生一个惟一的 IP 地址，重新启动后将发生更改。</p>\n</blockquote>\n<p>这里提到 WSL 2 和 WSL 1 网络的区别，WSL 1 桥接网络到主机，而 WSL 2 网络有点类似 docker，是一个独立的网络与主机隔离。WSL 2 在<code>resolv.conf</code>中看到主机的IP:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/resolv.conf | grep nameserver | awk <span class=\"string\">&#x27;&#123; print $2 &#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改了代理端口之后，显示访问端口超时，奇怪。然后看到一个<a href=\"https://github.com/microsoft/WSL/issues/4150\">issue</a>想在把WSL 2主机的IP弄成和Windows主机在同一个网段，类似 WSL 1 那样。在里面的讨论里看到firewall的字眼，就想是不是要配置防火墙，超时是不是防火墙给拦了，就查了下，发现也有人遇到，需要配置入站规则：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># powershell 管理员身份执行或者在“高级安全 Windows Defender 防火墙”界面配置</span></span><br><span class=\"line\"><span class=\"built_in\">New-NetFirewallRule</span> <span class=\"literal\">-DisplayName</span> <span class=\"string\">&quot;WSL&quot;</span> <span class=\"literal\">-Direction</span> Inbound  <span class=\"literal\">-InterfaceAlias</span> <span class=\"string\">&quot;vEthernet (WSL)&quot;</span>  <span class=\"literal\">-Action</span> Allow</span><br></pre></td></tr></table></figure>\n\n<p>另外，访问代理端口，需要配置代理软件允许局域网连接（开启 Allow LAN）</p>\n<p>然后测试下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains curl -vv myip.ipip.net</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网卡代理\"><a href=\"#网卡代理\" class=\"headerlink\" title=\"网卡代理\"></a>网卡代理</h2><p>另外一种方式就是通过网卡代理。</p>\n<ol>\n<li><p>cfw <a href=\"https://docs.cfw.lbyczf.com/contents/tun.html\">开启 tun 模式</a></p>\n</li>\n<li><p>cfw 还需要启用 Mixin 选项</p>\n</li>\n</ol>\n<p>就这样配置之后，cfw 就接管了系统流量，按规则进行代理。WSL 不需要额外配置。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>奇怪的问题又增加了😵，更了解 WSL 2 的网络结构了（不是</p>\n<blockquote>\n<p>“我明明win10可以的呀，可恶”</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://github.com/microsoft/WSL/issues/4150\">[WSL 2] NIC Bridge mode 🖧 (Has TCP Workaround🔨)</a></p>\n</li>\n<li><p><a href=\"https://github.com/microsoft/WSL/issues/4402\">WSL2 cannot access Windows proxy</a></p>\n</li>\n<li><p><a href=\"https://bytem.io/posts/wsl2-network-tricks\">WSL2 的一些网络访问问题</a></p>\n</li>\n<li><p><a href=\"https://halc.top/2021/09/16/FireWall-WSL.html\">WSL代理-尝试一</a></p>\n</li>\n</ul>\n","categories":["Linux"],"tags":["Proxy","Linux","Proxychains","WSL","Firewall"]},{"title":"关于 InnoDB 锁的那些事","url":"/p/f72c91a7/","content":"<p>阅读 MySQL 文档中关于 MySQL 锁的一些记录，包括锁的类型、不同语句持有锁的类型。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"锁类型\"><a href=\"#锁类型\" class=\"headerlink\" title=\"锁类型\"></a>锁类型</h2><p>MySQL InnoDB 使用的锁类型，主要有：</p>\n<ul>\n<li>共享锁和独占锁(LOCK_S, LOCK_X)</li>\n<li>意向锁(LOCK_IS, LOCK_IX)</li>\n<li>自增锁(LOCK_AUTO_INC)</li>\n<li>记录锁(Record Locks)</li>\n<li>间隙锁(Gap Locks)</li>\n<li>Next-Key Locks</li>\n<li>插入意向锁(Insert Intention Locks)</li>\n<li>自增锁(AUTO-INC Locks)</li>\n<li>空间索引的谓词锁(Predicate Locks for Spatial Indexes)</li>\n</ul>\n<h3 id=\"共享锁和独占锁\"><a href=\"#共享锁和独占锁\" class=\"headerlink\" title=\"共享锁和独占锁\"></a>共享锁和独占锁</h3><ul>\n<li>共享锁(S锁)允许持有锁的事务读取行</li>\n<li>独占锁(S锁)允许持有锁的事务更新或删除行</li>\n</ul>\n<p>如果事务 T1 在第 r 行上持有共享锁，则来自某个不同事务 T2 对第 r 行锁定的请求处理如下：</p>\n<ul>\n<li>可以立即授予 T2 对 S 锁的请求。结果， T1 和 T2 都对 r 保持 S 锁。</li>\n<li>无法立即授予 T2 对 X 锁的请求。</li>\n</ul>\n<p>如果事务 T1 在第 r 行上持有独占锁，则无法立即授予来自某个不同事务 T2 的请求，以请求 r 上的任一类型锁。相反，事务 T2 必须等待事务 T1 释放其对第 r 行的锁定。</p>\n<h3 id=\"意向锁\"><a href=\"#意向锁\" class=\"headerlink\" title=\"意向锁\"></a>意向锁</h3><p>InnoDB 支持多粒度锁定，允许行锁和表锁共存。例如，像 LOCK TABLES … WRITE 之类的语句对指定表采用独占锁(X锁)。为了使多粒度级别的锁定切实可行， InnoDB 使用意向锁。意向锁是表级锁，指示事务稍后对表中的行需要哪种类型的锁（共享或独占）。有两种类型的意向锁：</p>\n<ul>\n<li>意图共享锁(IS)表示事务打算对表中的各个行设置共享锁。</li>\n<li>意图独占锁(IX)表示事务打算对表中的各个行设置独占锁。</li>\n</ul>\n<p>例如，SELECT … LOCK IN SHARE MODE 设置 IS 锁， SELECT … FOR UPDATE 设置 IX 锁。</p>\n<p>意向锁定协议如下：</p>\n<ul>\n<li>在事务可以获取表中行的共享锁之前，它必须首先在表上获取 IS 或更强的锁。</li>\n<li>在事务可以获取表中行的独占锁之前，它必须首先获取表上的 IX 锁。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>X</th>\n<th>IX</th>\n<th>S</th>\n<th>IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>冲突</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>冲突</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>冲突</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>IS</td>\n<td>冲突</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n</tbody></table>\n<ul>\n<li>X锁和任何锁都是冲突的</li>\n<li>读锁与读锁之间(S与IS)都是兼容的</li>\n<li>意向锁之间是兼容的</li>\n</ul>\n<p>意向锁不会阻止除全表请求（例如 LOCK TABLES … WRITE ）之外的任何内容。</p>\n<p>意向锁的主要目的是显示某人正在锁定一行，或者要锁定表中的一行。</p>\n<p>意向锁的事务数据在 SHOW ENGINE INNODB STATUS 和 InnoDB 监视器输出中类似于以下内容：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">TABLE</span> LOCK <span class=\"keyword\">table</span> `test`.`t` trx id <span class=\"number\">10080</span> lock mode IX</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记录锁\"><a href=\"#记录锁\" class=\"headerlink\" title=\"记录锁\"></a>记录锁</h3><p>记录锁是索引记录上的锁。例如:</p>\n<p><code>SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE;</code></p>\n<p>可防止任何其他事务插入、更新或删除值为 t.c1 为 10 的行。</p>\n<p>记录锁始终锁定索引记录，即使表的定义没有索引。对于这种情况，InnoDB 会创建一个隐藏的聚集索引，并使用此索引进行记录锁定。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">RECORD LOCKS space id <span class=\"number\">58</span> page <span class=\"keyword\">no</span> <span class=\"number\">3</span> n bits <span class=\"number\">72</span> index `<span class=\"keyword\">PRIMARY</span>` <span class=\"keyword\">of</span> <span class=\"keyword\">table</span> `test`.`t`</span><br><span class=\"line\">trx id <span class=\"number\">10078</span> lock_mode X locks rec but <span class=\"keyword\">not</span> gap</span><br><span class=\"line\">Record lock, heap <span class=\"keyword\">no</span> <span class=\"number\">2</span> PHYSICAL RECORD: n_fields <span class=\"number\">3</span>; compact format; info bits <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0</span>: len <span class=\"number\">4</span>; hex <span class=\"number\">8000000</span>a; <span class=\"keyword\">asc</span>     ;;</span><br><span class=\"line\"> <span class=\"number\">1</span>: len <span class=\"number\">6</span>; hex <span class=\"number\">00000000274</span>f; <span class=\"keyword\">asc</span>     <span class=\"string\">&#x27;O;;</span></span><br><span class=\"line\"><span class=\"string\"> 2: len 7; hex b60000019d0110; asc        ;;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h3><p>间隙锁定是对索引记录之间间隙的锁定，或者是对第一个索引记录之前或之后的间隙的锁定。例如， SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE; 可防止其他事务将值 15 插入到列 t.c1 中，无论列中是否已存在任何此类值，因为区域中所有现有值之间的间隙是锁定的。</p>\n<p>间隙可能跨越单个索引值、多个索引值，甚至为空。</p>\n<p>间隙锁是性能和并发性之间权衡的一部分，用于某些事务隔离级别。</p>\n<p>对于使用唯一索引锁定行以搜索唯一行的语句，不需要间隙锁定。</p>\n<blockquote>\n<p>这不包括搜索条件仅包含多列 UK 索引的某些列的情况;在这种情况下，会发生间隙锁定。</p>\n<p>例如，如果 id 列具有唯一索引，则以下语句仅对 id 值为 100 的索引记录锁，并且其他会话是否在前面的间隙中插入行并不重要</p>\n<p>如果 id 列未设置索引或具有非唯一索引，则该语句会锁定前面的间隙。</p>\n</blockquote>\n<p>冲突的锁可以在不同的事务，在相同的间隙上持有间隙锁。例如，事务 A 可以在间隙上持有共享间隙锁（Gap S-lock），而事务 B 在同一间隙上持有独占间隙锁（Gap X-lock）。允许冲突的间隙锁的原因是，如果从索引中清除记录，则必须合并不同事务在记录上持有的间隙锁。</p>\n<p>InnoDB 中的间隙锁是“纯粹抑制的”，这意味着它们的唯一目的是防止其他事务在持有的间隙内插入数据。间隙锁可以共存。一个事务采取的间隙锁定不会阻止另一个事务对同一间隙进行间隙锁定。共享间隙锁和独占间隙锁之间没有区别。它们彼此不冲突，并且执行相同的功能。</p>\n<p>在事务隔离级别为 READ COMMITTED，间隙锁定被显式禁用。</p>\n<h3 id=\"Next-Key-Locks\"><a href=\"#Next-Key-Locks\" class=\"headerlink\" title=\"Next-Key Locks\"></a>Next-Key Locks</h3><p>next-key lock 是索引记录上的记录锁和索引记录之前的间隙上的间隙锁的组合。</p>\n<p>InnoDB 执行行级锁定的方式是，当它搜索或扫描表索引时，它会对遇到的索引记录设置共享锁或独占锁。因此，行级锁实际上是索引记录锁。索引记录上的 next-key lock 也会影响该索引记录之前的“间隙”。也就是说，next-key lock是索引记录锁加上索引记录前面间隙上的间隙锁。如果一个会话对索引中的记录 R 具有共享或独占锁，则另一个会话无法在索引顺序中紧靠 R 的间隙中插入新的索引记录。</p>\n<p>默认情况下， InnoDB 在 REPEATABLE READ 个事务隔离级别中运行。在这种情况下， InnoDB 使用next-key lock进行搜索和索引扫描，这可以防止幻像行。</p>\n<h3 id=\"插入意向锁\"><a href=\"#插入意向锁\" class=\"headerlink\" title=\"插入意向锁\"></a>插入意向锁</h3><p>插入意向锁是一种在行插入之前由 INSERT 操作设置的间隙锁。此锁表示插入意图，即插入同一索引间隙的多个事务无需在间隙内的相同位置插入，则无需相互等待。</p>\n<p>假设存在值为 4 和 7 的索引记录。尝试分别插入值 5 和 6 的单独事务，在获得插入行的独占锁之前，每个事务都使用插入意向锁锁定 4 和 7 之间的间隙，但不会相互阻止，因为这些行不冲突。</p>\n<h3 id=\"自增锁\"><a href=\"#自增锁\" class=\"headerlink\" title=\"自增锁\"></a>自增锁</h3><p>AUTO-INC 锁是由插入到 AUTO_INCREMENT 列表中的事务采用的特殊表级锁。在最简单的情况下，如果一个事务正在向表中插入值，则任何其他事务都必须等待自己插入该表，以便第一个事务插入的行接收连续的主键值。</p>\n<h2 id=\"语句的锁\"><a href=\"#语句的锁\" class=\"headerlink\" title=\"语句的锁\"></a>语句的锁</h2><p>讨论锁是不能脱离事务的隔离级别来讨论的，同一条语句在不同的隔离级别下持有的锁是不一样的。</p>\n<p>这里列举一些语句在 MySQL 默认隔离级别下的加锁的情况：</p>\n<ul>\n<li><p>SELECT … FROM 是一致读取，读取数据库的快照，并且不设置锁，除非事务隔离级别设置为 SERIALIZABLE 。对于 SERIALIZABLE 级别，搜索在它遇到的索引记录上设置共享的 next-key lock。但是，对于使用唯一索引来搜索唯一行以锁定行的语句，只需要索引记录锁。</p>\n</li>\n<li><p>对于 SELECT … FOR UPDATE 或 SELECT … LOCK IN SHARE MODE，为扫描的行获取锁，并为不符合结果集中包含条件的行释放锁（例如，如果它们不符合 WHERE 子句中给出的条件）。但是，在某些情况下，可能不会立即解锁行，因为结果行与其原始源之间的关系在查询执行期间丢失。例如，在 UNION 中，表中扫描的（和锁定的）行可能会在评估它们是否符合结果集之前插入到临时表中。在这种情况下，临时表中的行与原始表中的行之间的关系将丢失，并且后面的行直到查询执行结束才被解锁。</p>\n</li>\n<li><p>SELECT … LOCK IN SHARE MODE 在搜索遇到的所有索引记录上设置<strong>共享的</strong> next-key lock。但是，对于使用唯一索引来搜索唯一行以锁定行的语句，只需要索引记录锁。</p>\n</li>\n<li><p>SELECT … FOR UPDATE 在搜索遇到的每个记录上设置<strong>独占的</strong> next-key lock。但是，对于使用唯一索引来搜索唯一行以锁定行的语句，只需要索引记录锁。</p>\n</li>\n<li><p>UPDATE … WHERE … 在搜索遇到的每个记录上设置<strong>独占的</strong> next-key lock。但是，对于使用唯一索引来搜索唯一行以锁定行的语句，只需要索引记录锁。</p>\n</li>\n<li><p>当 UPDATE 修改聚簇索引记录时，将对受影响的辅助索引记录采用隐式锁。当在插入新的辅助索引记录之前执行重复检查扫描时，以及当插入新的辅助索引记录时， UPDATE 操作还在受影响的辅助索引记录上获取共享锁。</p>\n</li>\n<li><p>DELETE FROM … WHERE … 在搜索遇到的每个记录上设置<strong>独占的</strong>next-key lock。但是，对于使用唯一索引来搜索唯一行以锁定行的语句，只需要索引记录锁。</p>\n</li>\n<li><p>INSERT 在插入的行上设置排他锁。此锁是索引记录锁，而不是next-key lock（即没有间隙锁），并且不会阻止其他会话插入到插入行之前间隙中。在插入行之前，设置被称为插入意向间隙锁的间隙锁定类型。该锁以这样一种方式发出插入意图的信号，即如果插入到同一索引间隙中的多个事务不在间隙内的相同位置处插入，则它们不需要等待彼此。假设存在值为4和7的索引记录。尝试插入值5和6的单独事务在获得所插入行的排他锁之前，每个事务都使用插入意图锁锁定4和7之间间隙，但不会相互阻塞，因为行不冲突。如果发生重复键错误，则在重复索引记录上设置共享锁。如果有多个会话试图插入同一行，而另一个会话已经有一个排他锁，则使用共享锁可能会导致死锁。</p>\n</li>\n</ul>\n<p>INSERT … ON DUPLICATE KEY UPDATE 与简单的 INSERT 不同之处在于，当出现重复密钥错误时，在要更新的行上放置排他锁而不是共享锁。对重复的主键值采用排他索引记录锁。对重复的唯一键值采用排他的next-key lock。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html\">InnoDB Locking</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-locks-set.html\">Locks Set by Different SQL Statements in InnoDB</a></li>\n</ul>\n","categories":["MySQL"],"tags":["MySQL","Lock"]},{"title":"Cisco路由基本配置使用(二)","url":"/p/47e0dab5/","content":"<p>Cisco Packet Tracer模拟配置路由器<br>主要是配置ACL、内网主机分配公网IP访问互联网。<br>顺便讲一下遇到问题调试方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置ACL\"><a href=\"#配置ACL\" class=\"headerlink\" title=\"配置ACL\"></a>配置ACL</h2><p>ACL，即Access Control List，允许访问(网络)控制列表，这里主要是用于控制内网主机访问互联网。</p>\n<ol>\n<li>创建列表，配置属性以及名字<blockquote>\n<p>属性：<br> extended  Extended Access List<br> standard  Standard Access List</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip access-list &lt;属性&gt; &lt;列表名&gt;</span><br><span class=\"line\">ip access-list extended natest</span><br></pre></td></tr></table></figure></li>\n<li>写入控制信息<br>创建access list后，命令提示符为<code>Route(config-ext-nacl)#</code><blockquote>\n<p>permit   Specify packets to forward<br>deny     Specify packets to reject</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 创建允许访问规则</span><br><span class=\"line\">permit ip 192.168.1.0 0.0.0.255 any</span><br><span class=\"line\">// 创建禁止访问规则</span><br><span class=\"line\">deny ip 192.168.2.0 0.0.0.255 any</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"内网主机分配公网IP访问互联网\"><a href=\"#内网主机分配公网IP访问互联网\" class=\"headerlink\" title=\"内网主机分配公网IP访问互联网\"></a>内网主机分配公网IP访问互联网</h2><ol>\n<li><p>创建access list用于分配公网IP</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip access-list extended natest</span><br><span class=\"line\">permit ip 192.168.1.0 0.0.0.255 any // 允许192.168.1.0网段下的所有主机访问互联网任意IP</span><br><span class=\"line\">permit ip 192.168.1.0 0.0.0.255 any // 允许192.168.1.0网段下的所有主机访问互联网任意IP</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建IP池</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// ip nat pool &lt;pool name&gt; &lt;网段起点&gt; &lt;网段终点&gt; netmask &lt;子网掩码--根据具体网段设置&gt;</span><br><span class=\"line\">// 202.195.160.2-202.195.160.5为待分配IP段</span><br><span class=\"line\">ip nat pool <span class=\"built_in\">test</span> 202.195.160.2 202.195.160.5 netmask 255.255.255.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置端口模式<br>设置端口模式用于内网IP进行地址映射</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> ip nat ?</span><br><span class=\"line\">  inside   Inside address translation</span><br><span class=\"line\">  outside  Outside address translation</span><br><span class=\"line\"></span><br><span class=\"line\">int f0/1 // 进入端口配置模式</span><br><span class=\"line\">// 设置端口模式，和内网主机间接相连的端口配置为inside，外网间接相连的端口配置为outside</span><br><span class=\"line\">ip nat inside</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分配公网IP<br>当内网IP请求访问互联网(公网)IP时，将IP池内IP分配给该内网主机进行互联网访问。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// ip nat inside sourse list &lt;access list name&gt; pool &lt;pool name&gt;</span><br><span class=\"line\">ip nat inside <span class=\"built_in\">source</span> list natest pool <span class=\"built_in\">test</span> overload</span><br><span class=\"line\">// 添加overload可使用端口复用IP，此处若不添加overload参数是一对一分配IP地址</span><br></pre></td></tr></table></figure>\n<p> 此时若用192.168.1.0网段下的主机访问外网IP，在该路由中执行<code>show ip nat traslation</code>可查看IP映射情况。</p>\n</li>\n</ol>\n<h2 id=\"Cisco-Packet-Tracer调试\"><a href=\"#Cisco-Packet-Tracer调试\" class=\"headerlink\" title=\"Cisco Packet Tracer调试\"></a>Cisco Packet Tracer调试</h2><p>作为初学者，在做网络管理模拟控制的过程，可能会遇到各种各样的问题，盯着配置文件找问题，是最直(ma)接(fan)的。</p>\n<p>Cisco Packet Tracer本身提供了模拟模式(<code>Shift+S</code>)，这个模式有点像程序上的断点调试，可以很清楚直观的看到哪个地方出了问题。同时也可以加深理解网络运行过程中的数据流动。</p>\n<blockquote>\n<p>模拟模式下的<code>捕获/转发</code>相当于调试的<code>下一步</code>.</p>\n</blockquote>\n<p>在主机中输入命令回车相当于运行程序，然后<code>捕获/转发</code>开始监控数据报流动的每个细节。</p>\n<p>当某个环节出现问题，可以快速定位并查看具体的描述(物理层&#x2F;数据链路层&#x2F;网络层&#x2F;传输层&#x2F;…)，方便寻找问题所在，加深理解。</p>\n","categories":["网络管理"],"tags":["Note","Network","Cisco","Route"]},{"title":"Cisco交换机基本配置使用","url":"/p/29c0cb74/","content":"<p>Cisco Packet Tracer模拟配置交换机<br>主要是基本介绍、划分配置vlan和telnet远程登录配置</p>\n<span id=\"more\"></span>\n\n<h2 id=\"交换机内常用操作\"><a href=\"#交换机内常用操作\" class=\"headerlink\" title=\"交换机内常用操作\"></a>交换机内常用操作</h2><p>刚打开交换机，默认进入普通模式(用户模式)<br>命令提示符显示<code>Switch&gt;</code></p>\n<ul>\n<li><p><code>?</code>的使用</p>\n<p>eg. 输入<code>?</code>可显示当前模式下所有可执行命令，以及命令介绍，对于命令也可以显示缺少的参数，如<code>conf ?</code>显示可以在后面输入<code>terminal</code>或者<code>&lt;cr&gt;</code>(回车)，如下就进入了配置模式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Switch#configure ?</span><br><span class=\"line\">  terminal  Configure from the terminal</span><br><span class=\"line\">  &lt;cr&gt;</span><br><span class=\"line\">Switch#configure terminal ?</span><br><span class=\"line\">  &lt;cr&gt;</span><br><span class=\"line\">Switch#configure terminal</span><br><span class=\"line\">Enter configuration commands, one per line.  End with CNTL/Z.</span><br><span class=\"line\">Switch(config)#</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在无歧义情况下，命令可缺省</p>\n<p>eg. 输入<code>en</code>，在该模式下可执行命令中只有<code>enable</code>是<code>en</code>开头，这时候输入<code>en</code>即可代表<code>enable</code>而不出现错误。</p>\n</li>\n<li><p><code>Tab</code> 补全命令</p>\n</li>\n</ul>\n<h2 id=\"交换机进入全局配置模式\"><a href=\"#交换机进入全局配置模式\" class=\"headerlink\" title=\"交换机进入全局配置模式\"></a>交换机进入全局配置模式</h2><p>交换机主要的配置都在配置模式下进行，而在特权模式下查看运行及配置后的信息进行调试。</p>\n<ul>\n<li><p><code>enable</code><br>输入<code>enable</code>进入特权模式</p>\n<p>命令提示符显示<code>Switch#</code></p>\n<p>可查看交换机运行和配置信息等</p>\n<blockquote>\n<p>ps.可简写为<code>en</code></p>\n</blockquote>\n</li>\n<li><p><code>configure terminal</code></p>\n<p>进入特权模式后，输入<code>configure terminal</code>进入全局配置模式</p>\n<p>命令提示符显示<code>Switch(config)#</code></p>\n<p>可对交换机进行全局配置，如配置密码，设置vlan，接口配置等等</p>\n<p>ps.可简写为<code>conf t</code></p>\n</li>\n</ul>\n<h2 id=\"交换机控制台创建密码\"><a href=\"#交换机控制台创建密码\" class=\"headerlink\" title=\"交换机控制台创建密码\"></a>交换机控制台创建密码</h2><p>设置密码，使得在使用交换机命令行进入特权模式时需要输入密码。</p>\n<ol start=\"0\">\n<li><code>enable</code> 进入特权模式</li>\n<li><code>config t</code> 进入全局配置模式</li>\n<li><code>enable secret xxx</code> 设置加密密码</li>\n</ol>\n<blockquote>\n<p>ps. <code>enable password xxx</code> 设置明文密码（不推荐）</p>\n</blockquote>\n<p>在特权模式下，<code>show run</code> 可查看当前配置的信息：</p>\n<p><img data-src=\"/p/29c0cb74/set-console-password.png\" alt=\"set console password\"></p>\n<h2 id=\"交换机特定接口分配vlan\"><a href=\"#交换机特定接口分配vlan\" class=\"headerlink\" title=\"交换机特定接口分配vlan\"></a>交换机特定接口分配vlan</h2><ol start=\"0\">\n<li><code>enable</code> 进入特权模式</li>\n<li><code>config t</code> 进入全局配置模式</li>\n<li><code>interface f0/1</code> 进入接口配置 <code>Switch(config-if)#</code></li>\n<li><code>switch access vlan 2</code> 分配<code>vlan 2</code>给该接口</li>\n</ol>\n<p>在特权模式下，<code>show run</code> 可查看当前配置的信息：</p>\n<p><img data-src=\"/p/29c0cb74/switchport-access-vlan.png\" alt=\"switchport access vlan\"></p>\n<h2 id=\"设置交换机特定vlan的IP地址\"><a href=\"#设置交换机特定vlan的IP地址\" class=\"headerlink\" title=\"设置交换机特定vlan的IP地址\"></a>设置交换机特定vlan的IP地址</h2><ol start=\"0\">\n<li><code>enable</code> 进入特权模式</li>\n<li><code>config t</code> 进入全局配置模式</li>\n<li><code>interface vlan 2</code> 进入配置<code>vlan 2</code></li>\n<li><code>ip address 192.168.1.1 255.255.255.0</code> 设置交换机<code>vlan 2</code>的ip地址为<code>192.168.1.1</code>，子网掩码为<code>255.255.255.0</code></li>\n</ol>\n<h2 id=\"远程连接交换机\"><a href=\"#远程连接交换机\" class=\"headerlink\" title=\"远程连接交换机\"></a>远程连接交换机</h2><h3 id=\"进入配置模式下\"><a href=\"#进入配置模式下\" class=\"headerlink\" title=\"进入配置模式下\"></a>进入配置模式下</h3><ol start=\"0\">\n<li><code>enable</code> 进入特权模式</li>\n<li><code>config t</code> 进入全局配置模式</li>\n</ol>\n<blockquote>\n<p><em>接下来的配置，均在全局配置模式<code>Switch(config)#</code>下进行，进入接口配置模式<code>Switch(config-if)#</code>，可通过 <code>exit</code>退出，回到全局配置模式 <code>Switch(config)#</code></em></p>\n</blockquote>\n<h3 id=\"设置交换机vlan的IP地址\"><a href=\"#设置交换机vlan的IP地址\" class=\"headerlink\" title=\"设置交换机vlan的IP地址\"></a>设置交换机vlan的IP地址</h3><ol>\n<li><code>interface vlan 2</code> 进入配置<code>vlan 2</code> （由于<code>vlan 1</code>是默认的，初始化的时候，所有接口都在<code>vlan 1</code>下，所以这里使用<code>vlan 2</code>进行远程连接）</li>\n<li><code>ip address 192.168.1.1 255.255.255.0</code> 设置交换机<code>vlan 2</code>的ip地址为<code>192.168.1.1</code>，子网掩码为<code>255.255.255.0</code></li>\n<li><code>no shutdown</code> 启用<code>vlan 2</code><br>ps.鼠标悬浮在交换机上，可查看接口状态，以及vlan状态，<code>up</code>表示开启&#x2F;正在使用，<code>down</code>表示关闭&#x2F;未使用</li>\n</ol>\n<h3 id=\"交换机特定接口分配vlan-1\"><a href=\"#交换机特定接口分配vlan-1\" class=\"headerlink\" title=\"交换机特定接口分配vlan\"></a>交换机特定接口分配vlan</h3><ol>\n<li><code>interface f0/1</code> 进入接口配置 <code>Switch(config-if)#</code></li>\n<li><code>switch access vlan 2</code> 分配<code>vlan 2</code>给该接口</li>\n</ol>\n<h3 id=\"配置远程登录\"><a href=\"#配置远程登录\" class=\"headerlink\" title=\"配置远程登录\"></a>配置远程登录</h3><ol>\n<li><code>line vty 0 4</code> 设置同时允许5个虚拟终端登陆</li>\n<li><code>password 123456</code> 设置登录密码，如不设置，PC则无法使用<code>telnet</code>命令进行远程登录</li>\n<li><code>login</code> 使密码设置生效</li>\n</ol>\n<p><code>show run</code>部分配置结果<br><img data-src=\"/p/29c0cb74/configure-shortcut.png\" alt=\"配置部分截图\"></p>\n<h3 id=\"设置PC登录交换机\"><a href=\"#设置PC登录交换机\" class=\"headerlink\" title=\"设置PC登录交换机\"></a>设置PC登录交换机</h3><ul>\n<li>设置PC的IP地址</li>\n</ul>\n<p>PC要能登录交换机，其IP地址需要和交换机vlan地址在同一个子网上才可以访问，连接，所以设置PC的IP为<code>192.168.1.2</code>，子网掩码为<code>255.255.255.0</code>，网关设为交换机IP<code>192.168.1.1</code></p>\n<ul>\n<li><code>telnet</code>登录</li>\n</ul>\n<p><code>telnet 交换机IP</code>即可访问交换机，输入事先设定的密码<code>123456</code>即可登录操作交换机。</p>\n<p><img data-src=\"/p/29c0cb74/success-access.png\" alt=\"远程登录成功\"></p>\n<p>有问题可以在评论里交流 (逃…</p>\n","categories":["网络管理"],"tags":["Note","Network","Cisco","Switch"]},{"title":"Cisco路由基本配置使用","url":"/p/5cc180f7/","content":"<p>Cisco Packet Tracer模拟配置路由器<br>主要是基本配置说明、静态路由表及默认路由表配置</p>\n<span id=\"more\"></span>\n\n<h2 id=\"路由器基本配置\"><a href=\"#路由器基本配置\" class=\"headerlink\" title=\"路由器基本配置\"></a>路由器基本配置</h2><p>该开始连接路由，交换机和PC，会发现在和路由相连的那段是红色的状态，这个并不是bug，而是路由器尚未配置好，导致设备和路由器无法连接上。</p>\n<p><img data-src=\"/p/5cc180f7/startconnect.png\"></p>\n<p>进入路由的IOS(命令行)，会发现它在询问你是否进行配置，然后跟着提示一步一步进行配置参数操作，配置好后和路由相连那段的状态就会从红色变为绿色了。</p>\n<p><img data-src=\"/p/5cc180f7/routebaseconfig.png\" alt=\"route basic config\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 进行配置对话？</span><br><span class=\"line\">Continue with configuration dialog? [yes/no]: yes</span><br><span class=\"line\"></span><br><span class=\"line\">// 在任何节点你都可以输入`?`获得帮助，使用`ctrl-c`随时可以退出配置对话，默认设置在方括号中。</span><br><span class=\"line\">At any point you may enter a question mark &#x27;?&#x27; for help.</span><br><span class=\"line\">Use ctrl-c to abort configuration dialog at any prompt.</span><br><span class=\"line\">Default settings are in square brackets &#x27;[]&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">// 基本管理设置只配置足够的连接来管理系统，扩展设置将要求您配置系统上的每个接口</span><br><span class=\"line\">Basic management setup configures only enough connectivity</span><br><span class=\"line\">for management of the system, extended setup will ask you</span><br><span class=\"line\">to configure each interface on the system</span><br><span class=\"line\"></span><br><span class=\"line\">Would you like to enter basic management setup? [yes/no]: yes</span><br><span class=\"line\">Configuring global parameters:</span><br><span class=\"line\">  //输入主机名</span><br><span class=\"line\">  Enter host name [Router]: R1</span><br><span class=\"line\"></span><br><span class=\"line\">  The enable secret is a password used to protect access to</span><br><span class=\"line\">  privileged EXEC and configuration modes. This password, after entered, becomes encrypted in the configuration.</span><br><span class=\"line\">  //输入加密密码(设置进入全局配置模式时，需要输入密码)</span><br><span class=\"line\">  Enter enable secret: 123456</span><br><span class=\"line\"></span><br><span class=\"line\">  The enable password is used when you do not specify an</span><br><span class=\"line\">  enable secret password, with some older software versions,and some boot images.</span><br><span class=\"line\">  //设置明文密码，当未设置加密密码时将启用该密码(然并卵，当然要设置加密密码啦)</span><br><span class=\"line\">  Enter enable password: 123</span><br><span class=\"line\"></span><br><span class=\"line\">  The virtual terminal password is used to protect</span><br><span class=\"line\">  access to the router over a network interface.</span><br><span class=\"line\">  //虚拟终端密码用于保护通过网络接口访问路由器</span><br><span class=\"line\">  Enter virtual terminal password: 123</span><br><span class=\"line\">Configure SNMP Network Management? [no]:</span><br><span class=\"line\">//配置简单网络管理协议，默认跳过</span><br><span class=\"line\">Current interface summary</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">//从上面的接口摘要中输入用于连接到管理网络的接口名称</span><br><span class=\"line\">Enter interface name used to connect to the</span><br><span class=\"line\">management network from the above interface summary:</span><br><span class=\"line\">FastEthernet0/0</span><br><span class=\"line\"></span><br><span class=\"line\">//设置管理网络接口的IP地址</span><br><span class=\"line\">Configuring interface FastEthernet0/0:</span><br><span class=\"line\">  Configure IP on this interface? [yes]: yes</span><br><span class=\"line\">    IP address for this interface: 10.0.0.1</span><br><span class=\"line\">    Subnet mask for this interface [255.0.0.0] :</span><br><span class=\"line\"></span><br><span class=\"line\">The following configuration command script was created:</span><br><span class=\"line\">// 显示配置信息，自行查看及检查</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由间连接\"><a href=\"#路由间连接\" class=\"headerlink\" title=\"路由间连接\"></a>路由间连接</h2><p>两台路由器之间使用DCE串口线相连(连接路由器串口Series)。<br>一开始也会出现两端节点状态显示为红色的情况，这可能是路由相连串口的IP地址没有配置好。进入全局配置模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">int se2/0 //进入对应的串口号进行串口配置</span><br><span class=\"line\">ip address 10.0.0.2 255.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>这样就配置好端口ip，这时候两端状态也从红色的阻塞状态变成绿色的连通状态。</p>\n<h2 id=\"设置静态路由表-多个路由器之间\"><a href=\"#设置静态路由表-多个路由器之间\" class=\"headerlink\" title=\"设置静态路由表(多个路由器之间)\"></a>设置静态路由表(多个路由器之间)</h2><p>进入全局配置模式进行配置(路由配置命令大部分和<a href=\"/p/29c0cb74/#%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%BF%9B%E5%85%A5%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F\">交换机的配置</a>命令一样)</p>\n<p>设置静态路由，根据请求的目标IP和下一跳的地址进行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip route &lt;目标IP&gt; &lt;子网掩码&gt; &lt;下一跳地址&gt;</span><br><span class=\"line\">eg. ip route 192.168.1.0 255.255.255.0 11.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>整个过程中需要注意的是：</p>\n<ol>\n<li>PC要设置好IP地址，子网掩码以及<u>网关</u><br>不同交换机下的主机之间通信可不设置网关，但不同路由下的主机通信必须设置网关。</li>\n<li>串口相连的交换机必须是同一网段<br>如果不是同一网段，那么路由的arp表里可能找不到你所请求的主机mac信息，导致路由转发信息，下一跳上的设备接收不到。(别问我我怎么知道的，刚开始我也只是有一个大胆的想法，没想到也让我大吃一惊&#x2F;苦涩)<br>对于这问题的调试以及说明可参考<a href=\"http://blog.sina.com.cn/s/blog_6281f8d60100falt.html\">相连路由器端口IP地址为什么必须在同一个网段</a>（一样试着踩坑的）</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>网络拓扑：<br><img data-src=\"/p/5cc180f7/route-s.png\"></p>\n<ol>\n<li>路由基本配置</li>\n<li>配置PC对应的的IP，子网掩码，网关</li>\n<li>设置静态路由表<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">对于图中的Route0，配置好后，路由表添加一条：</span><br><span class=\"line\">ip route 192.168.2.0 255.255.255.0 10.0.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">对于图中的Route1，配置好后，路由表添加一条：</span><br><span class=\"line\">ip route 192.168.2.0 255.255.255.0 10.0.0.2</span><br></pre></td></tr></table></figure>\n这样两台路由器下不同子网的主机就可以进行通信，可以通过ping&#x2F;tracert查看。</li>\n</ol>\n<p><img data-src=\"/p/5cc180f7/watch-route-run.png\"></p>\n<h2 id=\"设置默认路由\"><a href=\"#设置默认路由\" class=\"headerlink\" title=\"设置默认路由\"></a>设置默认路由</h2><p>实际情况一条一条设置静态路由表，在现实生活中是不太可能的。<br>把所有情况都列举出来，这样太累了。对于这种情况，可采用默认路由设置，可以看作<code>if...else</code>的形式。if下的情况就是一条一条设置的静态路由表，而默认路由则是剩下的else。</p>\n<p>默认路由设置方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip route 0.0.0.0 0.0.0.0 &lt;默认下一跳地址&gt;</span><br><span class=\"line\">// 0.0.0.0 表示匹配任意ip/子网掩码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>网络拓扑：<br><img data-src=\"/p/5cc180f7/route-topu.png\"></p>\n<p>路由表设置如下：(类型中C表示直连，S表示静态路由)<br><img data-src=\"/p/5cc180f7/route-table.png\"></p>\n<p>这样子配置好不同路由下的主机，即使处于不同网段，也可以相互通信。</p>\n<blockquote>\n<p>ps.如果未完全配置好路由表，执行<code>tracert 某IP</code>有可能出现一直查询网关IP，而不把信息传给下一跳的情况。</p>\n<p>别问我怎么知道:-)</p>\n</blockquote>\n","categories":["网络管理"],"tags":["Note","Network","Cisco","Route"]},{"title":"oh my posh美化PowerShell","url":"/p/d67c16f7/","content":"<p>折腾一下PS的美化——oh my posh</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装-scoop\"><a href=\"#安装-scoop\" class=\"headerlink\" title=\"安装 scoop\"></a>安装 scoop</h2><p>可参考<a href=\"https://spencerwoo.com/\">@Spencer Woo</a>的<a href=\"https://spencerwoo.com/posts/2019/01/12/scoop.html#scoop-%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE\">这篇文章</a>，介绍了关于scoop的安装以，配置及使用</p>\n<p>主要步骤：(使用powershell进行以下操作)</p>\n<ol>\n<li>允许本地脚本执行</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set-executionpolicy</span> remotesigned <span class=\"literal\">-scope</span> currentuser</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 Scoop</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-concfg\"><a href=\"#安装-concfg\" class=\"headerlink\" title=\"安装 concfg\"></a>安装 concfg</h2><p><code>concfg</code>可以用来导入和导出 Windows 控制台的设置<br>可通过Scoop进行安装，会自动配置好环境变量</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scoop install concfg</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-posh-git\"><a href=\"#安装-posh-git\" class=\"headerlink\" title=\"安装 posh-git\"></a>安装 posh-git</h2><p><code>posh-git</code> 是 <code>oh-my-posh</code> 的依赖，在 <code>scoop</code> 的 <code>extras</code> 包中。</p>\n<ol>\n<li>添加名为 <code>extras</code> 的 <code>bucket</code></li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scoop bucket add extras</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 <code>posh-git</code></li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scoop install posh<span class=\"literal\">-git</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-oh-my-posh\"><a href=\"#安装-oh-my-posh\" class=\"headerlink\" title=\"安装 oh my posh\"></a>安装 oh my posh</h2><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scoop install <span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在没有设置<code>更纱字体 Team SC</code>之前，我的powershell的命令提示符会出现很奇怪的箭头（向上弯），估计是有一些字体不匹配，不能很好地显示出来。看着别扭，把更纱字体加到注册表中，以便修改powershell中的字体配置。</p>\n<p><img data-src=\"/p/d67c16f7/1.png\" alt=\"修改字体前\"><br><img data-src=\"/p/d67c16f7/2.png\" alt=\"修改字体后\"></p>\n<h3 id=\"字体配置\"><a href=\"#字体配置\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h3><ol>\n<li>安装<a href=\"https://github.com/be5invis/Sarasa-Gothic\">更纱字体</a></li>\n<li>修改注册表，在<code>HKEY_LOCAL_MACHINE &gt;&gt; SOFTWARE &gt;&gt; Microsoft &gt;&gt; Windows NT &gt;&gt; CurrentVersion &gt;&gt; Console &gt;&gt; TrueTypeFont</code>中添加一个字符串项目，内容为<code>Sarasa Term SC</code></li>\n</ol>\n<h3 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-Theme</span> Agnoster</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"应用配置\"><a href=\"#应用配置\" class=\"headerlink\" title=\"应用配置\"></a>应用配置</h3><p>新建一个 <code>config.json</code> 文件，键入如下内容，根据个人需要自行修改，我的是<a href=\"https://umm.js.org/download/oh_my_posh/oh_my_posh_cfg.json\">oh_my_posh_cfg.json</a></p>\n<p>这里用的是<code>.json</code>文件，之前看了很多教程，用的是<code>.cfg</code>文件，然后我用的时候出现了<code>concfg: ERROR: couldn&#39;t load settings from xxx.cfg</code>这样的错误。</p>\n<p>然后，我查了一下看到有人用<code>.json</code>文件在其他地方进行配置，我就试了一下，感人~<br>出现 <code>Console settings were imported from &#39;xxx.json&#39;</code>就说明导入配置成功。</p>\n<p>ps. 如果导入配置文件，但字体无法正常加载可以手动修改powershell的属性，设置字体为<code>Sarasa Team SC</code></p>\n<p>另外，可以在PowerShell 配置文件中设置字体以及启动加载项：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. 输入<span class=\"variable\">$Profile</span>得到PowerShell默认配置文件的位置</span><br><span class=\"line\">&gt; <span class=\"variable\">$Profile</span></span><br><span class=\"line\">C:\\Users\\用户名\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>. 查看下路径下是否存在该文件</span><br><span class=\"line\">&gt; <span class=\"built_in\">Test-path</span> <span class=\"variable\">$profile</span></span><br><span class=\"line\">返回True ，表示存在</span><br><span class=\"line\">返回False，则需要自己创建：</span><br><span class=\"line\">&gt; <span class=\"built_in\">New-item</span> –<span class=\"built_in\">type</span> file –force <span class=\"variable\">$profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>. 修改配置文件</span><br><span class=\"line\">&gt; Notepad <span class=\"variable\">$profile</span></span><br><span class=\"line\">写入：</span><br><span class=\"line\"><span class=\"built_in\">Import-Module</span> <span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Theme</span> Agnoster</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>. 重启powershell查看变化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><img data-src=\"/p/d67c16f7/result.png\" alt=\"powershell效果图\"></p>\n<h2 id=\"配合cmder使用\"><a href=\"#配合cmder使用\" class=\"headerlink\" title=\"配合cmder使用\"></a>配合cmder使用</h2><p>除了设置powershell为默认环境外，以及修改字体为<code>Sarasa Term SC</code>，还需要在<code>cmder\\vendor\\profile.ps1</code>末尾加上:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Import-Module</span> <span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Theme</span> Agnoster</span><br></pre></td></tr></table></figure>\n\n<p>效果图：<br><img data-src=\"/p/d67c16f7/result_cmder.png\" alt=\"powershell效果图\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.iszy.cc/2018/05/06/beautify-powershell/\">Powershell 美化 ——oh-my-posh</a></li>\n<li><a href=\"https://spencerwoo.com/posts/2019/01/12/scoop.html\">「一行代码」搞定软件安装卸载，用 Scoop 管理你的 Windows 软件</a></li>\n</ol>\n","categories":["PowerShell"],"tags":["Windows","Software","PowerShell"]},{"title":"Python实现Github commit时间分析","url":"/p/5c5365ec/","content":"<p>之前没怎么接触api，最近分析了一下关于GitHub用户的<code>commit</code>时间，初步得出关于该用户的<code>commit</code>时间规律等等。（ 事前查了一下，网上大部分关于GitHub上数据分析的文章推荐使用官方提供的api: <a href=\"https://developer.github.com/v3/\">GitHub Developer</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"API调用\"><a href=\"#API调用\" class=\"headerlink\" title=\"API调用\"></a>API调用</h2><p>对于Github上用户 所有提交的<code>commmit</code>，通过遍历其每个仓库的<code>commit</code>得到。</p>\n<h3 id=\"某用户所有的仓库\"><a href=\"#某用户所有的仓库\" class=\"headerlink\" title=\"某用户所有的仓库\"></a>某用户所有的仓库</h3><p>链接格式：<code>https://api.github.com/users/&#123;username&#125;/repos</code></p>\n<blockquote>\n<p>具体使用可参考：<a href=\"https://developer.github.com/v3/repos/#list-user-repositories\">List user repositories</a></p>\n</blockquote>\n<h3 id=\"单个仓库的commits\"><a href=\"#单个仓库的commits\" class=\"headerlink\" title=\"单个仓库的commits\"></a>单个仓库的commits</h3><p>链接格式：<code>https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;/commits</code></p>\n<p>注意：commits后面不能加<code>/</code>，因为加<code>/</code>后面要到<code>SHA</code>值，否则，会出现 <code>&quot;No commit found for SHA: &quot;</code>的错误。</p>\n<blockquote>\n<p>具体使用可参考：<a href=\"https://developer.github.com/v3/repos/commits/#get-a-single-commit\">get-a-single-commit</a></p>\n<p>调用api后返回整整齐齐的json数据，在其中对于json数据操作就可以得到想要的信息。<br>完整api文档&#x2F;教程可参考：</p>\n<p><a href=\"https://developer.github.com/v3/\">GitHub Developer v3 API文档</a></p>\n<p><a href=\"https://developer.github.com/v3/guides/getting-started/\">GitHub Developer v3 API教程</a></p>\n</blockquote>\n<h2 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h2><h3 id=\"获取API返回内容\"><a href=\"#获取API返回内容\" class=\"headerlink\" title=\"获取API返回内容\"></a>获取API返回内容</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_data</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&#x27;</span>&#125;</span><br><span class=\"line\">    html = requests.get(url, headers=headers) <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> html.status_code == <span class=\"number\">200</span>: <span class=\"comment\"># 判断请求是否成功</span></span><br><span class=\"line\">        <span class=\"comment\"># print(html)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> html.content <span class=\"comment\"># 返回网页内容</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取某用户所有的repo-name。\"><a href=\"#获取某用户所有的repo-name。\" class=\"headerlink\" title=\"获取某用户所有的repo name。\"></a>获取某用户所有的repo name。</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_all_repo</span>(<span class=\"params\">name</span>): <span class=\"comment\"># 某人所有的repo</span></span><br><span class=\"line\">    url_repos = <span class=\"string\">&#x27;https://api.github.com/users/&#123;name&#125;/repos&#x27;</span>.<span class=\"built_in\">format</span>(name=name)</span><br><span class=\"line\">    html = get_data(url_repos)</span><br><span class=\"line\"></span><br><span class=\"line\">    json_data = json.loads(html)</span><br><span class=\"line\">    <span class=\"comment\"># json_data里储存的是html下的所有数据</span></span><br><span class=\"line\">    all_repos = [] <span class=\"comment\"># repos&#x27;s name数据存放数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> json_data:</span><br><span class=\"line\">            repo = item[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            all_repos.append(repo)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(all_repos) <span class=\"comment\"># 某用户的所有repo列表</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>( <span class=\"string\">&quot;the %s totally has %d repos&quot;</span> %(name,<span class=\"built_in\">len</span>(all_repos)) )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name,all_repos</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(e)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取repo下作者的commit时间\"><a href=\"#获取repo下作者的commit时间\" class=\"headerlink\" title=\"获取repo下作者的commit时间\"></a>获取repo下作者的commit时间</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_data</span>(<span class=\"params\">html</span>):</span><br><span class=\"line\">    json_data = json.loads(html) <span class=\"comment\"># json_data里储存的是html下的所有数据</span></span><br><span class=\"line\">    commit_date_all = [] <span class=\"comment\"># commits date数据存放数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> json_data:</span><br><span class=\"line\">            commits = item[<span class=\"string\">&#x27;commit&#x27;</span>][<span class=\"string\">&#x27;committer&#x27;</span>]</span><br><span class=\"line\">            commit_date_all.append(commits[<span class=\"string\">&#x27;date&#x27;</span>])</span><br><span class=\"line\">            <span class=\"comment\"># print(commit_date_all)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> commit_date_all</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"planB\"><a href=\"#planB\" class=\"headerlink\" title=\"planB\"></a>planB</h2><blockquote>\n<p>re分析Github commit页面获取所有GitHub commmit时间</p>\n</blockquote>\n<h3 id=\"获取仓库commit-sha\"><a href=\"#获取仓库commit-sha\" class=\"headerlink\" title=\"获取仓库commit sha\"></a>获取仓库commit sha</h3><p>GitHub个人仓库的<code>commit</code> url的构成如下，每个repo都对应一个commit sha值，后面的num是一页的<code>commit</code>数，一页有35个，从1开始，每页加34。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://github.com/&#123;user&#125;/&#123;repo_name&#125;/commits/master?after=&#123;commit_sha&#125;+&#123;num&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过分析页面元素，利用re简单提取commit sha</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_sha</span>(<span class=\"params\">user, repo_name</span>): <span class=\"comment\"># 用户的每个repo对应一个commit sha</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://github.com/&#123;user&#125;/&#123;repo_name&#125;/commits/master&quot;</span>.<span class=\"built_in\">format</span>(user=user, repo_name=repo_name)</span><br><span class=\"line\">    html = get_html(url)</span><br><span class=\"line\">    commit_sha = re.findall(<span class=\"string\">r&#x27;href=&quot;https://github.com/.*commit/(.*?)&quot;&#x27;</span>, html)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> commit_sha</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取某用户所有repo\"><a href=\"#获取某用户所有repo\" class=\"headerlink\" title=\"获取某用户所有repo\"></a>获取某用户所有repo</h3><p>通过遍历一个人在所有的repo下的commit时间，来实现获取一个人所有的<code>commit</code>时间。<br>方法也是通过分析页面元素，利用re简单提取所有的仓库名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_all_repo</span>(<span class=\"params\">user</span>):</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://github.com/&#123;user&#125;&#x27;</span>.<span class=\"built_in\">format</span>(user=user)</span><br><span class=\"line\">    html = get_html(url)</span><br><span class=\"line\">    all_repo = re.findall(<span class=\"string\">r&#x27;&lt;span class=&quot;repo js-repo&quot; title=&quot;(.*)&quot;&#x27;</span>, html)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> all_repo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取某repo下的所有commit时间\"><a href=\"#获取某repo下的所有commit时间\" class=\"headerlink\" title=\"获取某repo下的所有commit时间\"></a>获取某repo下的所有commit时间</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">single_repo_commits</span>(<span class=\"params\">user, repo_name</span>):</span><br><span class=\"line\">    num = <span class=\"number\">0</span></span><br><span class=\"line\">    page_flag = <span class=\"number\">66</span> <span class=\"comment\"># 设置页面初始标志,用于判断是否到达末页</span></span><br><span class=\"line\">    page_num = <span class=\"number\">0</span></span><br><span class=\"line\">    data_num = <span class=\"number\">0</span></span><br><span class=\"line\">    commit_sha = get_sha(user, repo_name)</span><br><span class=\"line\">    all_date = [] <span class=\"comment\"># 储存时间数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (page_flag <span class=\"keyword\">and</span> page_num&lt;<span class=\"number\">5</span>): <span class=\"comment\"># 测试前五页</span></span><br><span class=\"line\">        url = <span class=\"string\">&quot;https://github.com/&#123;user&#125;/&#123;repo_name&#125;/commits/master?after=&#123;commit_sha&#125;+&#123;num&#125;&quot;</span>.<span class=\"built_in\">format</span>(user=user, repo_name=repo_name, commit_sha=commit_sha, num=num) <span class=\"comment\"># 构建链接</span></span><br><span class=\"line\">        html = get_html(url) <span class=\"comment\"># 获取页面内容</span></span><br><span class=\"line\">        time_data = re.findall(<span class=\"string\">r&#x27;&lt;relative-time datetime=(.*)&lt;/relative-time&gt;&#x27;</span>, html) <span class=\"comment\"># re匹配时间元素</span></span><br><span class=\"line\">        page_flag = <span class=\"built_in\">len</span>(time_data)</span><br><span class=\"line\">        num = num + <span class=\"number\">34</span> <span class=\"comment\"># 进入下一页</span></span><br><span class=\"line\">        page_num = page_num+<span class=\"number\">1</span></span><br><span class=\"line\">        data_num = data_num+<span class=\"built_in\">len</span>(time_data)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;page %d is ok\\n get %d date&quot;</span> % (page_num, <span class=\"built_in\">len</span>(time_data)))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> date <span class=\"keyword\">in</span> time_data:</span><br><span class=\"line\">            all_date.append(date[<span class=\"number\">1</span>:<span class=\"number\">20</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>) <span class=\"comment\"># 适当延时一下 单位：s</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;the repo &lt;%s&gt; totally get %d commits&#x27;date&quot;</span> % (repo_name, data_num))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> all_date</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>对获取的时间数据进行简单的数据分析。</p>\n<ul>\n<li>统计一天内各时间段的出现频率，这个可以分析出某人的工作时间偏好等等。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hour_Hz</span>():</span><br><span class=\"line\">    datals = []</span><br><span class=\"line\">    date_h = []</span><br><span class=\"line\">    hour_count = &#123;&#125;</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;commits.txt&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        datals.append(i.split(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    <span class=\"comment\"># datals[0]所有date的集合</span></span><br><span class=\"line\">    dateall = datals[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(dateall))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(dateall)):</span><br><span class=\"line\">        date_h.append((dateall[i][<span class=\"number\">11</span>:<span class=\"number\">13</span>]))</span><br><span class=\"line\">    <span class=\"comment\"># date_h是所有小时的集合</span></span><br><span class=\"line\">    <span class=\"comment\"># print(date_h)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> date_h:</span><br><span class=\"line\">        hour_count[key] = hour_count.get(key, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># print (hour_count)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hour_count</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>绘制线性图更直观显示结果：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hour_Hz</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    datals = []</span><br><span class=\"line\">    date_h = []</span><br><span class=\"line\">    hour_count = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(file_path)   <span class=\"comment\"># 对xx文本的分析</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        datals.append(i.split(<span class=\"string\">&quot;,&quot;</span>)) <span class=\"comment\"># 文本格式分割形成列表</span></span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    dateall = datals[<span class=\"number\">0</span>] <span class=\"comment\"># datals[0]表示所有date的集合</span></span><br><span class=\"line\">    <span class=\"comment\"># print(len(dateall))</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(dateall)):</span><br><span class=\"line\">        date_h.append((dateall[i][<span class=\"number\">11</span>:<span class=\"number\">13</span>])) <span class=\"comment\"># 取时间hour部分 ps.date_h是所有小时的集合</span></span><br><span class=\"line\">    <span class=\"comment\"># print(date_h)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> date_h:</span><br><span class=\"line\">        hour_count[key] = hour_count.get(key, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># print (hour_count)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hour_count</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hour_Hz_plot</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    hour_sort=[]</span><br><span class=\"line\">    h_key_sort = []</span><br><span class=\"line\"></span><br><span class=\"line\">    hour_H = hour_Hz(file_path) <span class=\"comment\">#得到时间分析数据，各时间的出现频率</span></span><br><span class=\"line\">    h_key = <span class=\"built_in\">list</span>(hour_H.keys())</span><br><span class=\"line\">    ind = np.arange(<span class=\"built_in\">len</span>(h_key)) <span class=\"comment\"># 图表的x轴间隔</span></span><br><span class=\"line\">    <span class=\"comment\"># 整理数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(h_key)):</span><br><span class=\"line\">        index = <span class=\"built_in\">str</span>(i) <span class=\"keyword\">if</span> i&gt;<span class=\"number\">9</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;0&#x27;</span> + <span class=\"built_in\">str</span>(i)</span><br><span class=\"line\">        hour_sort.append(hour_H[index]) <span class=\"comment\"># 整理散乱顺序数据为00-23顺序</span></span><br><span class=\"line\">        h_key_sort.append(i) <span class=\"comment\"># 绘图时x轴刻度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 绘图</span></span><br><span class=\"line\">    fig=plt.figure()</span><br><span class=\"line\">    ax = fig.add_subplot(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">    rects1 = ax.plot(ind, hour_sort, <span class=\"string\">&#x27;r-&#x27;</span>, marker=<span class=\"string\">&#x27;o&#x27;</span>) <span class=\"comment\"># 设置图表参数</span></span><br><span class=\"line\">    plt.xticks(np.arange(<span class=\"built_in\">len</span>(h_key)), h_key_sort) <span class=\"comment\"># 画x轴标签</span></span><br><span class=\"line\">    <span class=\"comment\"># plt.show()</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：</p>\n<p><img data-src=\"/p/5c5365ec/Broken-line.png\" alt=\"折线图\"></p>\n<ul>\n<li>通过箱型图显示工作日</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">weekday_2_box</span>(<span class=\"params\">file_path</span>):</span><br><span class=\"line\">    datals = []</span><br><span class=\"line\">    date_weekday = []</span><br><span class=\"line\">    weekday_count = &#123;&#125;</span><br><span class=\"line\">    f = <span class=\"built_in\">open</span>(file_path)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">        datals.append(i.split(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    dateall = datals[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"comment\"># print(len(dateall))</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(dateall)):</span><br><span class=\"line\">        weekday = datetime.strptime((dateall[i][<span class=\"number\">0</span>:<span class=\"number\">10</span>]),<span class=\"string\">&quot;%Y-%M-%d&quot;</span>).weekday()+<span class=\"number\">1</span></span><br><span class=\"line\">        date_weekday.append(weekday)</span><br><span class=\"line\">    all_weekday = date_weekday</span><br><span class=\"line\">    <span class=\"comment\"># print(all_weekday)</span></span><br><span class=\"line\">    fig,ax = plt.subplots(figsize=(<span class=\"number\">5</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\">    plt.boxplot(all_weekday)</span><br><span class=\"line\">    plt.title(<span class=\"string\">&#x27;weekday boxplot&#x27;</span>)</span><br><span class=\"line\">    plt.setp(ax,xticklabels=[<span class=\"string\">&#x27;weekday&#x27;</span>])</span><br><span class=\"line\">    plt.grid(<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：</p>\n<p><img data-src=\"/p/5c5365ec/box.png\" alt=\"箱型图\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>整体思路比较简单，也许Github比较善良(-:</p>\n<p>所有commit时间数据 &lt; 所有repo的commit时间数据 &lt; 某个repo的所有commit时间数据 &lt; 单个repo某页commit时间数据</p>\n<p>完整程序：</p>\n<ol>\n<li><p><a href=\"/article_code/Github-commit-time-spider.py\">Github用户commit数据爬取</a></p>\n</li>\n<li><p><a href=\"/article_code/Github-commit-analysis.py\">Github用户commit数据分析</a></p>\n</li>\n</ol>\n<p>今年时间进度：▓▓▓▓▓▓▓▓▓▓▓▓▓▓░  99%</p>\n","categories":["Python"],"tags":["Python","Spider"]},{"title":"Python简单整合Excel信息","url":"/p/1ff69962/","content":"<p>经常有许多信息分散在好几个Excel文件中，这时候人为进行查找整合就显得特别慢且累…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"OpenPyXl\"><a href=\"#OpenPyXl\" class=\"headerlink\" title=\"OpenPyXl\"></a>OpenPyXl</h2><p>在知乎上看了一下<a href=\"https://zhuanlan.zhihu.com/p/23998083\">Python-Excel 模块哪家强？</a>，对于只是简单操作excel，还是<code>openpyxl</code>比较小巧方便，功能也比较全。</p>\n<p>但只支持<code>.xlsx</code>格式，对于<code>.xls</code>格式的文件，不多的话，手动转换一下就好（另存为）。<br>参考文档：<a href=\"https://openpyxl.readthedocs.io/en/stable/index.html\">OpenPyXl</a></p>\n<blockquote>\n<p>简单易用，功能广泛，单元格格式&#x2F;图片&#x2F;表格&#x2F;公式&#x2F;筛选&#x2F;批注&#x2F;文件保护等等功能应有尽有，图表功能是其一大亮点，缺点是对 VBA 支持的不够好。</p>\n</blockquote>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><blockquote>\n<p>Example:<br>在<code>ex1.xlsx</code>中sheet1的E列和H列分别是导师姓名以及所带多个学生的姓名（1对多）<br>在<code>ex2.xlsx</code>中shhet1的B列和F列分别是学生姓名以及待填的导师姓名（1对1）<br>现在要把学生所对应导师姓名对应填好</p>\n</blockquote>\n<p><img data-src=\"/p/1ff69962/test.png\" alt=\"图解\"></p>\n<p>如果只有5个人，那么查找，复制，粘贴就解决了，但是如果是50个人，那么效率就太低了…<br>解决这个问题，就是在<code>ex1</code>中查找到学生对应的导师姓名，然后写入<code>ex2</code>中，保存就好了。</p>\n<ol>\n<li>读取指定sheet内容</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> openpyxl <span class=\"keyword\">import</span> load_workbook</span><br><span class=\"line\"></span><br><span class=\"line\">wb = load_workbook(<span class=\"string\">&#x27;ex1.xlsx&#x27;</span>) <span class=\"comment\"># 加载xlsx内容</span></span><br><span class=\"line\">sheet = wb.get_sheet_by_name(<span class=\"string\">&#x27;sheet1&#x27;</span>) <span class=\"comment\"># 找到需要操作的sheet</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>找到学生对应导师姓名</li>\n</ol>\n<p>因为导师和学生的姓名在同一行，通过<code>findTea</code>遍历各行找到该学生对应的导师姓名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">findTea</span>(<span class=\"params\">sheet, stuname</span>):</span><br><span class=\"line\">    teaNames = <span class=\"built_in\">list</span>(sheet[<span class=\"string\">&#x27;E&#x27;</span>])</span><br><span class=\"line\">    stuNames = <span class=\"built_in\">list</span>(sheet[<span class=\"string\">&#x27;H&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">26</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> stuname <span class=\"keyword\">in</span> stuNames[i].value:</span><br><span class=\"line\">            <span class=\"comment\"># print(teaNames[i].value)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> teaNames[i].value</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将信息写入<code>ex2</code>对应位置并保存</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">35</span>):</span><br><span class=\"line\">    stuname = stuNames2[i].value</span><br><span class=\"line\">    teaname = findTea(sheet, stuname)</span><br><span class=\"line\">    teaNames2[i].value = teaname</span><br></pre></td></tr></table></figure>\n\n<p>保存修改后的excel (做了那么多，不保存对于没有😥)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">wb1.save(<span class=\"string\">&#x27;ex2.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"随想\"><a href=\"#随想\" class=\"headerlink\" title=\"随想\"></a>随想</h2><p>最近看到一个repo，作者的REMDME，我的想法大概也是吧。编程可以用于解决许多日常繁琐的问题，同时，最让我着迷的是，编程的创造，可以有无限可能，只要你想得到，基本上有办法实现。</p>\n<p>Awesome!</p>\n<blockquote><p>I do not consider myself a programmer. I create these little programs as experiments to play with the language, or to solve problems for myself. I would gladly accept pointers from others to improve, simplify, or make the code more efficient.</p>\n<footer><strong>geekcomputers</strong><cite><a href=\"https://github.com/geekcomputers/Python\">README</a></cite></footer></blockquote>\n","categories":["Python"],"tags":["Python","Excel"]},{"title":"Python实现今年时间进度","url":"/p/5a3f823d/","content":"<p>参考即刻「今年的时间进度变更提醒」<br>做了一个一模(mao)一样的…<br>Interesting!</p>\n<span id=\"more\"></span>\n\n<p>只要用<code>time</code>库就可以实现</p>\n<h2 id=\"判断平闰年\"><a href=\"#判断平闰年\" class=\"headerlink\" title=\"判断平闰年\"></a>判断平闰年</h2><blockquote>\n<p>根据平闰年的概念定义进行判断</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">judgeYear</span>(<span class=\"params\">year</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (year%<span class=\"number\">4</span> == <span class=\"number\">0</span>) &amp; (year%<span class=\"number\">100</span> != <span class=\"number\">0</span>):</span><br><span class=\"line\">        allday = <span class=\"number\">366</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> year%<span class=\"number\">400</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        allday = <span class=\"number\">366</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        allday = <span class=\"number\">365</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> allday</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"time库\"><a href=\"#time库\" class=\"headerlink\" title=\"time库\"></a>time库</h2><blockquote>\n<p>这是一个很基础的，也很常用的库<br><code>time.localtime()</code>返回的是一个类(class)<br> 返回的是time.struct_time(tm_year&#x3D;2018, tm_mon&#x3D;11, tm_mday&#x3D;2, tm_hour&#x3D;23, tm_min&#x3D;24, tm_sec&#x3D;46, tm_wday&#x3D;4, tm_yday&#x3D;306, tm_isdst&#x3D;0)<br>尝试print你就知道每个变量的含义了，其实看名字也一目了然……<br>那这个程序里，我要的只是，“今天是一年中的第几天”，即<code>tm_yday</code><br>调用的话就是 <code>time.localtime().tm_yday</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">localt = time.localtime()</span><br><span class=\"line\"><span class=\"comment\"># print(localt)</span></span><br><span class=\"line\">allday = judgeYear(localt.tm_year)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h2><blockquote>\n<p>进度条想设计成什么样看个人，也可以用turtle画一个，也蛮简单的<br>这里用的是文本进度条<br>简单粗暴，字符相加，就成一家</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sad = yday/allday <span class=\"comment\"># 一年进度 sad~</span></span><br><span class=\"line\">scale = <span class=\"number\">15</span> <span class=\"comment\"># 进度条长度</span></span><br><span class=\"line\">i = <span class=\"built_in\">int</span>(<span class=\"number\">15</span>*sad)</span><br><span class=\"line\">passed = <span class=\"string\">&#x27;▓&#x27;</span> * i <span class=\"comment\"># 今年走过的%</span></span><br><span class=\"line\">leave = <span class=\"string\">&#x27;░&#x27;</span> * (scale - i) <span class=\"comment\"># 今年剩下的%</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\r&#123;0&#125;&#123;1&#125; &#123;2:3.0f&#125;% \\n&quot;</span>.<span class=\"built_in\">format</span>(passed,leave,sad*<span class=\"number\">100</span>),end=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>▓▓▓▓▓▓▓▓▓▓▓▓░░░  84%</p>\n<p>至此一个进度条就出来了 <a href=\"/article_code/missday.py\">完整程序</a></p>\n<h2 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h2><p>今年只剩下59天了，还有很多东西想学好🙃🙃🙃，加把劲了~</p>\n","categories":["Python"],"tags":["Python"]},{"title":"爬取探书FM-每天听本书","url":"/p/e09d667/","content":"<p>闲的…刚好想听听书，初略了解一下整书内容，或是听听以前看过的书，了解一下别人对这本书的理解及看法。<br>看到有人推荐探书FM，一天一书，还行。<br>ps.「得到」也有一个栏目叫「每天听本书」，可是只能付费，so…<br>其实就是闲着想写个爬虫练练手而已。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"查找api\"><a href=\"#查找api\" class=\"headerlink\" title=\"查找api\"></a>查找api</h2><p>通过浏览器审查元素获取该页面的<code>webapi</code></p>\n<blockquote>\n<p>具体就是<code>F12</code>-&gt; <code>Network</code> -&gt;<code>刷新页面</code></p>\n</blockquote>\n<p>得到webapi，api查询返回数据中的dataList中存放者音频数据，包括文件名，各种格式音频链接，有mp3，aac等格式。</p>\n<p>api链接：<a href=\"http://www.tingban.cn/webapi/audios/list?id=1100001475776&amp;pagesize=20&amp;pagenum=%7Bpagenum%7D&amp;sorttype=1\">http://www.tingban.cn/webapi/audios/list?id=1100001475776&amp;pagesize=20&amp;pagenum={pagenum}&amp;sorttype=1</a></p>\n<blockquote>\n<p>pagenum 页数<br>pagesize 每页返回音频数（可修改，在0-50之间）</p>\n</blockquote>\n<p><img data-src=\"/p/e09d667/api.png\"></p>\n<h2 id=\"获取音频名及链接\"><a href=\"#获取音频名及链接\" class=\"headerlink\" title=\"获取音频名及链接\"></a>获取音频名及链接</h2><p>这里建立一个字典用于存放音频(key)和对应的链接(value)<br>对返回的json数据进行处理即可。（有api就是很舒服的一件事）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">data_json</span>(<span class=\"params\">resp</span>): <span class=\"comment\"># resp为请求页面返回的响应(respond)</span></span><br><span class=\"line\">    url_single_list = []</span><br><span class=\"line\">    audioName_list = []</span><br><span class=\"line\">    download_dict = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> resp.text: <span class=\"comment\"># 页面有数据才进行操作</span></span><br><span class=\"line\">        url_fmdata = resp.content.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"comment\"># 对返回数据进行utf-8编码</span></span><br><span class=\"line\">        result = json.loads(url_fmdata).get(<span class=\"string\">&quot;result&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(type(result))</span></span><br><span class=\"line\">        dataList = result[<span class=\"string\">&quot;dataList&quot;</span>] <span class=\"comment\"># 所有音频数据</span></span><br><span class=\"line\">        <span class=\"comment\"># print(len(dataList))</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataList:</span><br><span class=\"line\">            url_single = data[<span class=\"string\">&#x27;aacPlayUrl&#x27;</span>] <span class=\"comment\"># 这里下载aac文件，因为小</span></span><br><span class=\"line\">            audioName = data[<span class=\"string\">&quot;audioName&quot;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># print(url_single)</span></span><br><span class=\"line\">            <span class=\"comment\"># print(audioName)</span></span><br><span class=\"line\">            url_single_list.append(url_single)</span><br><span class=\"line\">            audioName_list.append(audioName)</span><br><span class=\"line\">        single_data = <span class=\"built_in\">zip</span>(audioName_list, url_single_list)</span><br><span class=\"line\">        download_dict.update(single_data) <span class=\"comment\"># 获得此页面音频名及链接</span></span><br><span class=\"line\">        <span class=\"comment\"># print(download_dict)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> download_dict</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多线程下载音频\"><a href=\"#多线程下载音频\" class=\"headerlink\" title=\"多线程下载音频\"></a>多线程下载音频</h2><blockquote>\n<p>通过多线程下载可提高下载速率。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">thread_lock = threading.BoundedSemaphore(value = <span class=\"number\">5</span>) <span class=\"comment\"># 设置5个线程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">download_mp3</span>(<span class=\"params\">url,download_name,n</span>):</span><br><span class=\"line\">    path = <span class=\"string\">&#x27;fm-mp3/&#x27;</span>+ download_name + url[-<span class=\"number\">4</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path): <span class=\"comment\"># 防止程序中断后覆盖下载</span></span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path,<span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(r.content)</span><br><span class=\"line\">    thread_lock.release()  <span class=\"comment\"># 下载完解锁</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%d is ok&quot;</span> %n)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    download_list_all = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page_num <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">15</span>): <span class=\"comment\"># max = 14 # 在pagesize=20的情况下一共14页数据</span></span><br><span class=\"line\">        url = <span class=\"string\">&quot;http://www.tingban.cn/webapi/audios/list?id=1100001475776&amp;pagesize=20&amp;pagenum=&#123;i&#125;&amp;sorttype=1&quot;</span>.<span class=\"built_in\">format</span>(i=page_num) <span class=\"comment\"># 设置api链接，修改页数，这里默认20，最大可修改为50</span></span><br><span class=\"line\">        resp = get_html(url)</span><br><span class=\"line\">        url_list = data_json(resp)</span><br><span class=\"line\">        <span class=\"comment\"># print(url_list)</span></span><br><span class=\"line\">        download_list_all.update(url_list)</span><br><span class=\"line\">    <span class=\"comment\"># print(download_list_all)</span></span><br><span class=\"line\">    all_url_name = <span class=\"built_in\">list</span>(download_list_all.keys()) <span class=\"comment\"># 所有的文件名，type：list</span></span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(all_url_name)):</span><br><span class=\"line\">        download_name = all_url_name[n]</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\">        url = download_list_all[download_name] <span class=\"comment\"># 待下载的音频链接</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;download &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(download_name))</span><br><span class=\"line\">        path = <span class=\"string\">&#x27;fm-mp3/&#x27;</span>+ download_name + url[-<span class=\"number\">4</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">            thread_lock.acquire()</span><br><span class=\"line\">            t = threading.Thread(target = download_mp3,args = (url,download_name,n))</span><br><span class=\"line\">            t.start()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%d is ok&quot;</span> %n)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>基本思路：音频url-&gt;下载音频<br>url：通过api获得,整理成字典以便下载<br>下载：通过多线程提高下载速度<br>ps.通过判断文件是否存在实现「伪·断点下载」</p>\n<p>完整程序：<a href=\"/article_code/get_fm.py\">探书FM爬虫</a></p>\n<blockquote>\n<p>说起来整个程序也就是在做这两件事，看起来很简单，但实际真的动手写会遇到一些问题，基本上是基础知识方面，久不用就会忘记忽略。</p>\n<p>对于页数可以稍微优化成通过判断数据是否为空来判断是否到尾页</p>\n</blockquote>\n<h2 id=\"今年时间进度\"><a href=\"#今年时间进度\" class=\"headerlink\" title=\"今年时间进度\"></a>今年时间进度</h2><p>今年还剩下 353 天   ░░░░░░░░░░░░░░░   3%</p>\n","categories":["Python"],"tags":["Python","Spider"]},{"title":"IDEA 个人使用配置","url":"/p/b6e4654c/","content":"<p>记录下使用 IDEA 的配置、插件以及一些实用小技巧</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><ol>\n<li><p>修改字体</p>\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; Font</code></li>\n<li>修改字体为<code>JetBrains Mono</code>，大小修改为 16</li>\n</ul>\n</li>\n<li><p>代码提示不区分大小写</p>\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion </code></li>\n<li>取消勾选<code>Match case</code><ul>\n<li>旧版本：进入<code>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion </code>中，将右侧的<code>case sensitive completion</code>修改为<code>NONE</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>编辑代码在方法之间加入一条分隔线</p>\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Appearance</code>勾选<code>Show method separators</code></li>\n</ul>\n</li>\n<li><p>显示空格</p>\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Appearance</code>勾选<code>Show whitespaces</code></li>\n</ul>\n</li>\n<li><p>配置控制台中信息自动换行</p>\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Console</code>，勾选<code>Use soft wraps in console</code></li>\n</ul>\n</li>\n<li><p>启用滚轮缩放字体大小</p>\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General</code>，勾选<code>Change font size(Zoom) with Ctrl + Mouse Wheel</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"行注释设置\"><a href=\"#行注释设置\" class=\"headerlink\" title=\"行注释设置\"></a>行注释设置</h2><h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>第一行是默认配置的效果，第二行是修改后的</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- //     System.out.println(&quot;&quot;);</span></span><br><span class=\"line\"><span class=\"addition\">+ \t  // System.out.println(&quot;&quot;);</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; Java</code></li>\n<li>在右边选择 <code>Code Generation</code>的 Tab</li>\n<li>在<code>Comment Code</code>中，把 <code>Line comment at first column</code>和<code>Block comment at first column</code>前的复选框去掉</li>\n<li>勾选上<code>Add a space at comment start</code></li>\n</ul>\n<blockquote>\n<p>参考 <a href=\"https://stackoverflow.com/questions/18821275/intellij-comment-format\">Intellij comment format</a></p>\n</blockquote>\n<p><img data-src=\"https://i.stack.imgur.com/3gQAI.png\"></p>\n<h3 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h3><p>第一行是默认配置的效果，第二行是修改后的</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ &lt;!--    test--&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;!--test--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; XML</code></li>\n<li>在右边选择 <code>Code Generation</code>的 Tab</li>\n<li>在<code>Comment Code</code>中，把 <code>Line comment at first column</code>和<code>Block comment at first column</code>前的复选框去掉</li>\n</ul>\n<h2 id=\"设置添加文件头信息\"><a href=\"#设置添加文件头信息\" class=\"headerlink\" title=\"设置添加文件头信息\"></a>设置添加文件头信息</h2><p>在 Java 文件中自动添加作者、时间等信息</p>\n<ul>\n<li><p>进入<code>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates</code>中，找到<code>includes</code>，修改<code>File Header</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> umm</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@date</span> $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建 Java 文件，效果如下，自动在类上添加了作者和时间信息：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> umm</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/5/9 20:53</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"自动引入包\"><a href=\"#自动引入包\" class=\"headerlink\" title=\"自动引入包\"></a>自动引入包</h2><ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General -&gt; Auto Import </code></li>\n<li>勾选<code>Add unambigious imports on the fly</code>（动态引入明确的 import项）</li>\n<li>勾选<code>Optimize import on the fly</code>（自动调整或者删除不使用的 import 项）</li>\n</ul>\n<h2 id=\"文件末尾添加空白行\"><a href=\"#文件末尾添加空白行\" class=\"headerlink\" title=\"文件末尾添加空白行\"></a>文件末尾添加空白行</h2><ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General</code></li>\n<li>在<code>On Save</code>中勾选<code>Ensure every saved file ends with a line break</code></li>\n</ul>\n<h2 id=\"去除行尾多余空格\"><a href=\"#去除行尾多余空格\" class=\"headerlink\" title=\"去除行尾多余空格\"></a>去除行尾多余空格</h2><ul>\n<li>进入<code>File -&gt; Settings -&gt; Editor -&gt; General</code></li>\n<li>在<code>On Save</code>中勾选<code>Remove trailing blank lines at the end of saved files</code></li>\n</ul>\n<h2 id=\"IDEA-Keymap\"><a href=\"#IDEA-Keymap\" class=\"headerlink\" title=\"IDEA Keymap\"></a>IDEA Keymap</h2><ol start=\"0\">\n<li>遇到问题，查看解决办法 <code>alt + enter</code></li>\n<li>折叠代码 <code>ctrl + shift + -</code></li>\n<li>展开代码 <code>ctrl + shift + =</code></li>\n<li>查找类 <code>ctrl + n</code></li>\n<li>查找接口的实现类 <code>ctrl + shift + b</code></li>\n<li>查看类或接口的继承关系 <code>ctrl + h</code></li>\n<li>注释代码块 <code>ctrl + shift + /</code></li>\n<li>注释代码 <code>ctrl + /</code></li>\n<li>复制光标所在行&#x2F;复制选择内容，并把复制内容插入光标位置下面 <code>ctrl + d</code></li>\n<li>在当前文件进行文本查找 <code>ctrl + f</code></li>\n<li>方法参数提示显示 <code>ctrl + p</code></li>\n<li>显示generate <code>alt + insert</code></li>\n<li>显示类可重写的方法 <code>ctrl + o</code></li>\n<li>格式化代码 <code>ctrl+alt+L</code></li>\n<li>重新显示代码提示： <code>ctrl+space</code></li>\n<li>显示对象类型：选中对象， <code>ctrl + shift + p</code></li>\n<li>选中相同的字符串：<code>alt + j</code></li>\n<li>上下移动光标所在行：<code>ctrl + shift + ↑/↓</code></li>\n</ol>\n<h2 id=\"IDEA-Plugins\"><a href=\"#IDEA-Plugins\" class=\"headerlink\" title=\"IDEA Plugins\"></a>IDEA Plugins</h2><p>具体插件描述可以查看插件对应的主页</p>\n<h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\".ignore\"></a>.ignore</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/7495--ignore\">.ignore - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>用于版本管理时设置忽略文件的</p>\n</blockquote>\n<h3 id=\"Alibaba-Java-Coding-Guidelines\"><a href=\"#Alibaba-Java-Coding-Guidelines\" class=\"headerlink\" title=\"Alibaba Java Coding Guidelines\"></a>Alibaba Java Coding Guidelines</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines\">Alibaba Java Coding Guidelines - IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>用于检测代码规范</p>\n</blockquote>\n<h3 id=\"BackgroundImage\"><a href=\"#BackgroundImage\" class=\"headerlink\" title=\"BackgroundImage\"></a>BackgroundImage</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/72-backgroundimage\">BackgroundImage - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>设置 IDE 透明背景</p>\n</blockquote>\n<h3 id=\"CheckStyle-IDEA\"><a href=\"#CheckStyle-IDEA\" class=\"headerlink\" title=\"CheckStyle-IDEA\"></a>CheckStyle-IDEA</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/1065-checkstyle-idea\">CheckStyle-IDEA - plugin for IntelliJ IDEA and Android Studio | JetBrains</a></p>\n<blockquote>\n<p>检测代码规范</p>\n</blockquote>\n<h3 id=\"CodeGlance\"><a href=\"#CodeGlance\" class=\"headerlink\" title=\"CodeGlance\"></a>CodeGlance</h3><blockquote>\n<p>类似 Sublime Text 的右侧代码小地图</p>\n<p>显示&#x2F;隐藏的快捷键：ctrl+shift+g</p>\n</blockquote>\n<p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/7275-codeglance\">CodeGlance - plugin for IntelliJ IDEs | JetBrains</a></p>\n<p><img data-src=\"https://plugins.jetbrains.com/files/7275/screenshot_16821.png\"></p>\n<h3 id=\"Free-MyBatis-plugin\"><a href=\"#Free-MyBatis-plugin\" class=\"headerlink\" title=\"Free MyBatis plugin\"></a>Free MyBatis plugin</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin\">Free MyBatis plugin - IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>增强 idea 对 mybatis 支持的插件，主要功能如下：</p>\n<ul>\n<li>生成 mapper xml 文件</li>\n<li>快速从代码跳转到 mapper 及从 mapper 返回代码</li>\n<li>mybatis 自动补全及语法错误提示</li>\n<li>集成 mybatis generator gui 界面</li>\n<li>根据数据库注解，生成 swagger model 注解</li>\n</ul>\n</blockquote>\n<h3 id=\"GenerateAllSetter\"><a href=\"#GenerateAllSetter\" class=\"headerlink\" title=\"GenerateAllSetter\"></a>GenerateAllSetter</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/9360-generateallsetter\">GenerateAllSetter - plugin for IntelliJ IDEA and Android Studio | JetBrains</a></p>\n<blockquote>\n<p>一键调用一个对象的所有的 set 方法</p>\n<p>快捷键：alt+enter</p>\n<p>使用可参考：<a href=\"https://github.com/gejun123456/intellij-generateAllSetMethod\">gejun123456&#x2F;intellij-generateAllSetMethod</a></p>\n</blockquote>\n<h3 id=\"google-java-format\"><a href=\"#google-java-format\" class=\"headerlink\" title=\"google-java-format\"></a>google-java-format</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/8527-google-java-format\">google-java-format - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>Google Java 代码规范</p>\n</blockquote>\n<h3 id=\"Grep-Console\"><a href=\"#Grep-Console\" class=\"headerlink\" title=\"Grep Console\"></a>Grep Console</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/7125-grep-console\">Grep Console - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>优化控制台输出显示及使用</p>\n</blockquote>\n<h3 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h3><blockquote>\n<p>根据Gson库使用的要求，将JSONObject格式的String 解析成实体</p>\n<p>快捷键：alt+s</p>\n<p>具体使用可参考：<a href=\"https://github.com/zzz40500/GsonFormat\">zzz40500&#x2F;GsonFormat</a></p>\n</blockquote>\n<p><img data-src=\"https://plugins.jetbrains.com/files/7654/screenshot_15729.png\"></p>\n<h3 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/6317-lombok\">Lombok - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>Provides support for lombok annotations to write great Java code with IntelliJ IDEA.</p>\n</blockquote>\n<h3 id=\"Maven-Helper\"><a href=\"#Maven-Helper\" class=\"headerlink\" title=\"Maven Helper\"></a>Maven Helper</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/7179-maven-helper\">Maven Helper - plugin for IntelliJ IDEA | JetBrains</a></p>\n<blockquote>\n<p>用于检测并快捷修复依赖冲突，检测出有冲突的依赖将其 exclude</p>\n</blockquote>\n<h3 id=\"MetricsReloaded\"><a href=\"#MetricsReloaded\" class=\"headerlink\" title=\"MetricsReloaded\"></a>MetricsReloaded</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/93-metricsreloaded\">MetricsReloaded - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>计算程序圈复杂度（Cyclomatic Complexity）</p>\n<p>圈复杂度越高，代码越难维护</p>\n</blockquote>\n<h3 id=\"Nyan-Progress-Bar\"><a href=\"#Nyan-Progress-Bar\" class=\"headerlink\" title=\"Nyan Progress Bar\"></a>Nyan Progress Bar</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar\">Nyan Progress Bar - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>Pretty progress bars with nyan cat for IJ based IDEs.</p>\n<p>加载时的进度条变成可爱的猫咪</p>\n</blockquote>\n<h3 id=\"One-Dark-theme\"><a href=\"#One-Dark-theme\" class=\"headerlink\" title=\"One Dark theme\"></a>One Dark theme</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/12178-atom-onedark-theme\">Atom OneDark Theme - theme for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>暗黑代码主题</p>\n</blockquote>\n<p><img data-src=\"https://plugins.jetbrains.com/files/12178/screenshot_19448.png\"></p>\n<h3 id=\"SequenceDiagram\"><a href=\"#SequenceDiagram\" class=\"headerlink\" title=\"SequenceDiagram\"></a>SequenceDiagram</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/8286-sequencediagram\">SequenceDiagram - plugin for IntelliJ IDEA and Android Studio | JetBrains</a></p>\n<blockquote>\n<p>生成程序时序图</p>\n</blockquote>\n<h3 id=\"SpotBugs\"><a href=\"#SpotBugs\" class=\"headerlink\" title=\"SpotBugs\"></a>SpotBugs</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/14014-spotbugs\">SpotBugs - plugin for IntelliJ IDEA | JetBrains</a></p>\n<blockquote>\n<p>FindBugs 替代品，检测代码问题及规范</p>\n</blockquote>\n<h3 id=\"String-Manipulation\"><a href=\"#String-Manipulation\" class=\"headerlink\" title=\"String Manipulation\"></a>String Manipulation</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/2162-string-manipulation\">String Manipulation - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>Case switching, sorting, filtering, incrementing, aligning to columns, grepping, escaping, encoding…</p>\n</blockquote>\n<h3 id=\"Translation\"><a href=\"#Translation\" class=\"headerlink\" title=\"Translation\"></a>Translation</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/8579-translation\">Translation - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>翻译插件</p>\n</blockquote>\n<p><img data-src=\"https://plugins.jetbrains.com/files/8579/screenshot_18932.png\"></p>\n<h3 id=\"WakaTime\"><a href=\"#WakaTime\" class=\"headerlink\" title=\"WakaTime\"></a>WakaTime</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/7425-wakatime\">WakaTime - plugin for IntelliJ IDEs | JetBrains</a></p>\n<blockquote>\n<p>Metrics, insights, and time tracking automatically generated from your programming activity.</p>\n</blockquote>\n<p><img data-src=\"https://plugins.jetbrains.com/files/7425/screenshot_18534.png\"></p>\n<h3 id=\"RestfulToolkit\"><a href=\"#RestfulToolkit\" class=\"headerlink\" title=\"RestfulToolkit\"></a>RestfulToolkit</h3><p>plugin homepage: <a href=\"https://plugins.jetbrains.com/plugin/10292-restfultoolkit\">RestfulToolkit - plugin for IntelliJ IDEA | JetBrains</a></p>\n<blockquote>\n<p>A toolkit for RESTful services development.</p>\n</blockquote>\n<p><img data-src=\"https://plugins.jetbrains.com/files/10292/screenshot_17679.png\"></p>\n<h2 id=\"IDEA-Code-Tip\"><a href=\"#IDEA-Code-Tip\" class=\"headerlink\" title=\"IDEA Code Tip\"></a>IDEA Code Tip</h2><ul>\n<li><p>for 循环快捷生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; l1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// l1.for</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s : l1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// l1.fori</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i1 &lt; l1.size(); i1++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// l1.forr</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> l1.size() - <span class=\"number\">1</span>; i1 &gt;= <span class=\"number\">0</span>; i1--) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>快捷定义变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new String().var</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>null 判空</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// s.null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>notnull 判非空</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// s.notnull</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>nn 判非空</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// s.nn</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>cast 强转</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// s.cast</span></span><br><span class=\"line\">((String) s)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>not 取反</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isApp</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// isApp.not</span></span><br><span class=\"line\">!isApp</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h2><ul>\n<li>使用过程中遇到光标变成块状，进入<code>File -&gt; Settings -&gt; Editor -&gt; Gnenral -&gt; Appearence</code>，取消勾选<code>Use block caret</code></li>\n</ul>\n","categories":["Tools"],"tags":["Tool","IDEA"]},{"title":"IDEA 直接使用文件夹手动创建工程","url":"/p/ee9cdb04/","content":"<p>IDEA 不能直接编译运行<code>.java</code>单文件，要新建工程，在工程里面才可以编译运行。但是工程要一步一步设置，太费事了。</p>\n<p>这里讲下如何直接将文件夹快速变成一个工程，然后运行<code>.java</code>文件。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"使用空文件夹\"><a href=\"#使用空文件夹\" class=\"headerlink\" title=\"使用空文件夹\"></a>使用空文件夹</h2><ol>\n<li><p>使用 IDEA 打开该文件夹，如果该文件夹不是一个IDEA Project，那么IDEA会在文件夹根目录下新建一个<code>.idea</code>的文件夹，存放相关配置</p>\n</li>\n<li><p>设置一个<code>Source Root </code>文件夹，在该文件夹下才可以创建<code>.java</code>文件。新建一个文件夹<code>test1</code>作为<code>Source Root </code></p>\n<p>这时候在<code>Source Root</code>下新建<code>test.java</code>，写一个简单输出<code>System.out.println(&quot;test&quot;)</code>来测试</p>\n</li>\n<li><p><code>Add Configuration</code>，选择<code>Application</code></p>\n<p><img data-src=\"/p/ee9cdb04/image-20200220212104225.png\"></p>\n<p>需要设置的是Name、Main class、Working directory，一般Working directory默认就有，是你打开的文件夹的路径。Name随便起一个，Main Class就是刚刚写的测试类，选一下就行。</p>\n<p><img data-src=\"/p/ee9cdb04/image-20200220212304014.png\"></p>\n</li>\n<li><p>接下来直接run一下，嗯，报错了。意思是要指定一个文件夹，用于存放编译生成的文件，如<code>.class</code>等。根目录下建一个<code>output</code>文件夹，打开Project Structure，在<code>output</code>处选择一下,或者直接右键<code>Mark as output</code></p>\n<p><img data-src=\"/p/ee9cdb04/image-20200220212251202.png\"></p>\n</li>\n<li><p>这时候<code>Run</code>还是灰色，这里是IDEA的bug，很坑。关闭工程然后重新打开就好了。这样的文件夹算是一个Project了。</p>\n</li>\n</ol>\n<h2 id=\"使用已有非IDEA项目\"><a href=\"#使用已有非IDEA项目\" class=\"headerlink\" title=\"使用已有非IDEA项目\"></a>使用已有非IDEA项目</h2><p>步骤和上面差不多。需要注意的是设置<code>Source Root</code>，如包名是<code>com.test.xxx</code>，那么选择<code>com</code>的上一级文件夹（推荐）或者<code>com</code>文件夹作为<code>Source Root</code>。</p>\n","categories":["Tools"],"tags":["Windows","Java","IDEA"]},{"title":"IDEA 使用 WSL 的 Linux 环境进行开发","url":"/p/9ddb2d1/","content":"<p>最近遇到有调用<code>.so</code>的动态链接库里的需求，而<code>.so</code>是 Linux 下才可以读取识别的类型，Windows 环境的 JDK 加载不了，看到IDEA也有支持 WSL，刚好切换下。</p>\n<span id=\"more\"></span>\n\n<p>WSL 用的是Ubuntu，需要安装 JDK：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n\n<p>然后修改 IDEA 的<code>Run/Debug Configurations</code>：</p>\n<p><img data-src=\"/p/9ddb2d1/IDEA-WSL-config.png\"></p>\n<p>选择 WSL 后会检测机器上的 WSL 的 Linux 发行版和 JDK 的版本和路径。</p>\n<p>这样就可以愉快的使用 WSL 上的 Linux 环境进行开发🎉</p>\n<p>后面打算把本地的 Postgre&#x2F;MySQL 等数据库也迁移到 WSL 中管理和使用。</p>\n","categories":["Tools"],"tags":["Tool","IDEA","WSL"]},{"title":"日常好物-Web篇","url":"/p/1a5a87d0/","content":"<p>生活里常用的工具，持续更新</p>\n<span id=\"more\"></span>\n\n<h2 id=\"showRSS\"><a href=\"#showRSS\" class=\"headerlink\" title=\"showRSS\"></a><a href=\"https://showrss.info/\">showRSS</a></h2><p>故名思义：剧+RSS。<br>平常喜欢看英美剧，通过订阅 RSS 就可以及时收到更新提醒。</p>\n<h2 id=\"沉浸式翻译\"><a href=\"#沉浸式翻译\" class=\"headerlink\" title=\"沉浸式翻译\"></a><a href=\"https://chromewebstore.google.com/detail/bpoadfkcbjbfhfodiogcnhhhpibjhbnh\">沉浸式翻译</a></h2><p>双语翻译看外语文章好用，还可以翻译电子书、字幕翻译等等</p>\n<h2 id=\"uBlock-Origin\"><a href=\"#uBlock-Origin\" class=\"headerlink\" title=\"uBlock Origin\"></a><a href=\"https://chromewebstore.google.com/detail/cjpalhdlnbpafiamejdnhcphjbkeiagm\">uBlock Origin</a></h2><p>跳过「阅读全文」只需要一行配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">!filter readmore.js via https://github.com/fang5566/uBlock/wiki/%E9%9D%99%E6%80%81%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99%E8%AF%AD%E6%B3%95#%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C%E8%BF%87%E6%BB%A4</span><br><span class=\"line\">/readmore.js</span><br></pre></td></tr></table></figure>\n","categories":["Tools"],"tags":["Tool","Life"]},{"title":"Octave安装使用","url":"/p/ad444f4c/","content":"<p>Matlab开源替代软件————Octave</p>\n<span id=\"more\"></span>\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>关于Octave的介绍可参考<a href=\"https://zh.wikipedia.org/wiki/GNU_Octave\">维基百科</a></p>\n<p>简单来说，就是Matlab的开源替代版。<del>据说，最开始Octave就是按照Matlab搭的模型。</del></p>\n<p>ps.自带中文包,良心.png</p>\n<p>pps. Matlab的缺点就是大，安装完十几个G，而Octave安装包只有200多M，安装完，也不过1~2G大小，而且开源免费，支持Linux,Windows,macOS等平台。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><blockquote>\n<p>因为它是<a href=\"https://zh.wikipedia.org/wiki/GNU%E8%A8%88%E5%8A%83\" title=\"GNU计划\">GNU计划</a>的一部分，所以它是<a href=\"https://zh.wikipedia.org/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81\" title=\"GNU通用公共许可证\">GNU通用公共许可证</a>条款下的<a href=\"https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6\" title=\"自由软件\">自由软件</a>。</p>\n</blockquote>\n<p>官方页面：<a href=\"https://www.gnu.org/software/octave/\">https://www.gnu.org/software/octave/</a></p>\n<p>其实还有一个 <a href=\"https://octave.org/\">https://octave.org/</a> 但是也是指向 <a href=\"https://www.gnu.org/software/octave/\">https://www.gnu.org/software/octave/</a></p>\n<p>这里是 <a href=\"https://www.gnu.org/software/octave/#install\">下载链接</a><br>有安装版(<code>.exe</code>)和免安装(<code>zip</code>,<code>7z</code>)，</p>\n<p>Windows用户个人建议选安装版本( <code>.exe</code>) 安装使用，我在用免安装版本总会遇到奇奇怪怪的问题（也不是不能用），要自己多动手配置，查资料解决🙃</p>\n<p>eg：<code>plot</code>函数，在安装版本下，正常能用；而在免安装下，使用<code>plot</code>函数出现未响应</p>\n<blockquote>\n<p><code>plot</code>默认用的是<code>qt</code>图形工具。</p>\n<p>在Octave命令行中使用<code>graphics_toolkit</code>查询但前使用的图形工具，<code>available_graphics_toolkits</code>查询可用图形工具</p>\n<p><code>\\Octave\\share\\octave\\site\\m\\startup\\octaverc</code>中写入<code>graphics_toolkit(&#39;gnuplot&#39;)</code> 修改图形工具为<code>gnuplot</code></p>\n<p>ps.修改为<code>fltk</code> 也可以</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>过程中遇到<code>JRE(Java Runtime Environment)</code>未安装的问题可以先跳过，意思就是，没有Java相关的依赖环境，某些函数操作可能不能使用。安装<code>JRE</code>后，即可使用相应函数。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在大部分语法函数，都与Matlab一样。</p>\n<p><a href=\"https://octave.org/doc/\">官方参考文档</a></p>\n<p>ps.也可以参考matlab的，基本上相似。<del>主要是matlab有中文</del>😂</p>\n<p>现学现卖一下：</p>\n<figure class=\"highlight m\"><table><tr><td class=\"code\"><pre><span class=\"line\">x<span class=\"built_in\">=</span><span class=\"number\">2</span>:<span class=\"number\">0.2</span>:<span class=\"number\">4</span>;</span><br><span class=\"line\">y<span class=\"built_in\">=</span><span class=\"number\">1</span>:<span class=\"number\">0.2</span>:<span class=\"number\">3</span>;</span><br><span class=\"line\">[X,Y]<span class=\"built_in\">=</span>meshgrid(x,y);<span class=\"comment\">% make the grid</span></span><br><span class=\"line\">Z<span class=\"built_in\">=</span>(X-<span class=\"number\">3</span>).^<span class=\"number\">2</span>-(Y-<span class=\"number\">2</span>).^<span class=\"number\">2</span>;</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);surf(Z);title(<span class=\"string\">&#x27;surf&#x27;</span>)</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);mesh(Z);title(<span class=\"string\">&#x27;mesh&#x27;</span>)</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);meshz(Z);title(<span class=\"string\">&#x27;meshz&#x27;</span>)</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);contour(Z);title(<span class=\"string\">&#x27;contour&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img data-src=\"/p/ad444f4c/Octave-test.png\" alt=\"Octave运行结果截图\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在没有太高要求下，Octave是代替Matlab很好的一个工具了</p>\n<p>ps.丢一个在U盘，随身携带一个 Matlab ···</p>\n","categories":["Tools"],"tags":["Tool","Software","Machine Learning"]},{"title":"WSL to WSL 2","url":"/p/dd37077/","content":"<p>更新 WSL 到 WSL 2，对<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#update-to-wsl-2\">官方步骤</a>的一些补充。</p>\n<span id=\"more\"></span>\n\n<p>在官方给的升级步骤中有对更新到 WSL 2，必须满足的条件进行描述，具体查看<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#update-to-wsl-2\">官方步骤</a>，查看系统版本是否符合升级标准。</p>\n<p>这里简单描述一下我的升级步骤。<del>官方的步骤跳跃性有点大…</del></p>\n<ol>\n<li><p>启用“虚拟机平台”可选组件</p>\n<p> 安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。<br> 以<strong>管理员身份</strong>打开 PowerShell 并运行：</p>\n <figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p> <strong>重新启动</strong>计算机，以完成 WSL 安装并更新到 WSL 2。</p>\n</li>\n<li><p>设置 WSL 2 为默认版本</p>\n <figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-default-version</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查分配给每个已安装的 Linux 分发版的 WSL 版本</p>\n <figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--list</span> <span class=\"literal\">--verbose</span></span><br><span class=\"line\"><span class=\"comment\"># 简写</span></span><br><span class=\"line\">wsl <span class=\"literal\">-l</span> <span class=\"literal\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p> 输出将显示 Linux 版本以及 所在的 WSL 版本，下面是 Ubuntu 系统在 WSL 下的输出：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAME      STATE           VERSION</span><br><span class=\"line\">* Ubuntu    Stopped         1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载 Linux 内核更新包，下载参见<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package\">download-the-linux-kernel-update-package</a></p>\n<blockquote>\n</blockquote>\n</li>\n<li><p>安装完成后，请继续执行下一步 - 在安装新的 Linux 分发时，将 WSL 2 设置为默认版本。</p>\n <figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">`w<span class=\"built_in\">sl</span> <span class=\"literal\">--set-version</span> &lt;distribution name&gt; &lt;versionNumber&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eg.这里将 Ubuntu 从 WSL 版本升级为 WSL 2 版本</span></span><br><span class=\"line\">wsl <span class=\"literal\">--set-version</span> Ubuntu <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查 WSL 版本是否切换成功：&#96;&#96;wsl –list –verbose&#96;</p>\n</li>\n</ol>\n<p>如图所示：</p>\n<p><img data-src=\"/p/dd37077/Update-To-WSL2.jpg\"></p>\n<p>根据上面的步骤成功将 WSL 升级到 WSL 2，如果在安装过程中遇到问题，可参考官方提供的<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#troubleshooting-installation\">排查安装问题</a></p>\n","categories":["Tools"],"tags":["Tool","WSL","WSL 2"]},{"title":"CAJ转PDF并添加书签","url":"/p/49abadb9/","content":"<p>最近因为一些莫须有的原因阅览caj文件，需要转成pdf文件。<br>简单呀：CAJviewr里利用打印就可以生成PDF</p>\n<blockquote>\n<p>缺点：转换得到的是图片构成的pdf，这下不舒服了</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>换方法：在GitHub上看到一个项目 **<a href=\"https://github.com/JeziL/caj2pdf\">caj2pdf</a>**，但···😥作者如是说:</p>\n<blockquote>\n<p>Convert CAJ (China Academic Journals) files to PDF. 转换中国知网 CAJ 格式文献为 PDF。佛系转换，成功与否，皆是玄学。</p>\n</blockquote>\n<p>再换：那就从根本上入手，直接从知网上<code>down pdf</code></p>\n<blockquote>\n<p>想起之前藏的一个脚本：<a href=\"https://greasyfork.org/zh-CN/scripts/18842-cnki-%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91-pdf-%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD-%E7%89%B9%E5%88%B6%E7%89%88\">CNKI 中国知网 PDF 全文下载（特制版）</a></p>\n</blockquote>\n<p>终于，有点顺了，问题来了，down下来的内容虽然不是图片了，但是没有目录，这么多页，看锤子？嗯，后来被坑了点，走了弯路 &#x2F;心情复杂。最后用的这个解决🙁</p>\n<blockquote>\n<p><code>Freepictopdf</code>和<code>PdgCntEditor</code>然后参见<a href=\"https://zhuanlan.zhihu.com/p/47271995\">如何用FreePic2Pdf和PdgCntEditor制作目录</a></p>\n</blockquote>\n","categories":["Tools"],"tags":["Tool","Software","CAJ"]},{"title":"WSL 2 apt-get upgrade failed","url":"/p/6a514871/","content":"<p>从 WSL 更新到 WSL 2 遇到各种各样的问题，有的是WSL的锅（DNS 解析），有的看起来是 Ubuntu 18.x 的锅（与服务器上的 Hash Sum 不匹配）…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"apt-get-update-Failed\"><a href=\"#apt-get-update-Failed\" class=\"headerlink\" title=\"apt-get update Failed\"></a><code>apt-get update</code> Failed</h2><p>执行<code>apt-get update</code>出现类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Err:1 http://security.ubuntu.com/ubuntu bionic-security InRelease</span><br><span class=\"line\">Temporary failure resolving &#x27;security.ubuntu.com&#x27;</span><br><span class=\"line\">Err:2 http://archive.ubuntu.com/ubuntu bionic InRelease</span><br><span class=\"line\">Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class=\"line\">Err:3 http://archive.ubuntu.com/ubuntu bionic-updates InRelease</span><br><span class=\"line\">Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class=\"line\">Err:4 http://archive.ubuntu.com/ubuntu bionic-backports InRelease</span><br><span class=\"line\">Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/bionic/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class=\"line\">W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/bionic-updates/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class=\"line\">W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/bionic-backports/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;</span><br><span class=\"line\">W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/bionic-security/InRelease  Temporary failure resolving &#x27;security.ubuntu.com&#x27;</span><br><span class=\"line\">W: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考: <a href=\"https://stackoverflow.com/questions/60269422/windows10-wsl2-ubuntu-debian-apt-get-update-failed-no-network\">Windows10 WSL2 Ubuntu &#x2F; Debian # apt-get update failed # no network</a></p>\n</blockquote>\n<p>问题应该是 WSL 2 默认配置 nameserver 为 <code>172.24.0.1</code>（见<code>/etc/resolv.conf</code>），导致域名解析出现问题，尝试临时修改其为<code>8.8.8.8</code>，但重启后又被WSL还原成原来的 ip。在<code>resolv.conf</code>中提示我们，这个文件是 WSL 自动生成的，添加<code>wsl.conf</code>并添加以下配置阻止其自动生成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[network]</span><br><span class=\"line\">generateResolvConf = false</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>wsl.conf</code>后，修改<code>resolv.conf</code>内的 nameserver 为 <code>8.8.8.8</code>。</p>\n<p>然后执行 <code>wsl --shutdown</code> 关闭 wsl，然后重新打开 wsl 使其生效。再次执行 <code>apt-get update</code> 获取更新成功，然后执行<code>apt-get upgrade</code> 更新。</p>\n<p>理论上应该是这样，but，but 来了就又有问题了😒，这次是 Ubuntu 的···</p>\n<h2 id=\"Hash-Sum-mismatch\"><a href=\"#Hash-Sum-mismatch\" class=\"headerlink\" title=\"Hash Sum mismatch\"></a>Hash Sum mismatch</h2><p>执行<code>apt-get update</code>出现类似:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Err:13 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages</span><br><span class=\"line\">  Hash Sum mismatch</span><br><span class=\"line\">  Hashes of expected file:</span><br><span class=\"line\">   - Filesize:1692900 [weak]</span><br><span class=\"line\">   - SHA256:e58b3101e1d0444991213c9fe20885111482f4291aa46dc4003a8231fd619948</span><br><span class=\"line\">   - SHA1:570e4387f94d8b2e42ce0c19edfb8aea3670c9d7 [weak]</span><br><span class=\"line\">   - MD5Sum:d1e21e80df991ad2e922abf08fdcc726 [weak]</span><br><span class=\"line\">  Hashes of received file:</span><br><span class=\"line\">   - SHA256:1a4b7b0a073f9777a6ca619ec72cedd0c334b6adfa3de24250a8993fb5ba8ef9</span><br><span class=\"line\">   - SHA1:bbbdac5a83aa63c268b935492b1d1f05191e288e [weak]</span><br><span class=\"line\">   - MD5Sum:a8ed28d1989bc15cb81de9712ef46659 [weak]</span><br><span class=\"line\">   - Filesize:1692900 [weak]</span><br><span class=\"line\">  Last modification reported: Sat, 28 Nov 2020 00:44:13 +0000</span><br><span class=\"line\">  Release file created at: Sat, 28 Nov 2020 07:02:51 +0000</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>参考：<a href=\"https://bugs.launchpad.net/ubuntu/+source/apt/+bug/1785778\">Failed to fetch url Hash Sum mismatch Ubuntu 18.04 LTS</a></p>\n</blockquote>\n<p>看起来是 Ubuntu 18.04 的锅，先查看 wsl 中的 Ubuntu 版本看是不是 18.04 这个版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsb_release -a</span><br><span class=\"line\">No LSB modules are available.</span><br><span class=\"line\">Distributor ID: Ubuntu</span><br><span class=\"line\">Description:    Ubuntu 18.04.4 LTS</span><br><span class=\"line\">Release:        18.04</span><br><span class=\"line\">Codename:       bionic</span><br></pre></td></tr></table></figure>\n\n<p>解决方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">rm</span> -rf /var/lib/apt/lists/*</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update -o Acquire::CompressionTypes::Order::=gz</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get update &amp;&amp; <span class=\"built_in\">sudo</span> apt-get upgrade</span><br></pre></td></tr></table></figure>\n","categories":["Tools"],"tags":["Tool","WSL","WSL 2"]},{"title":"Windows软件整理","url":"/p/2fc530c8/","content":"<p>整理一下电脑上各种奇奇怪怪的软件。<del>排名不分先后</del><br>不定期更新···</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>一些说明：<br>斜体: 付费<br>删除线: 仍推荐但我已不用或被替代的软件</p>\n</blockquote>\n<blockquote>\n<p>修改格式参考以及推荐阅读: <a href=\"https://tmr.js.org/p/3cfe7536/\">Windows 软件推荐列表</a></p>\n</blockquote>\n<p>7-zip：开源压缩软件</p>\n<blockquote>\n<p>另外也推荐Bandizip</p>\n</blockquote>\n<p><del><em>ABBYY：OCR</em></del><br><em>Adobe Acrobat DC：查看，编辑PDF</em></p>\n<p>Adobe Media Encode CC：视频音频编码</p>\n<p><em>Adobe Photoshop CC：修图</em></p>\n<p><em>Altium Designer：绘制PCB</em></p>\n<p>Anaconda：Python包管理器</p>\n<p><del>Apowersoft：安卓&#x2F;iPhone手机画面实时投屏</del></p>\n<p>aria2: 下载工具</p>\n<p>Another Redis Desktop Manager：Redis 数据管理</p>\n<p>BTsync：文件同步备份</p>\n<p><del>冰点文库下载器：下载百度文库内容</del></p>\n<p><del>百度网盘：…</del></p>\n<p>Calibre：图书馆管理，编辑（支持kindle的azw3格式）</p>\n<p>CCleaner：系统优化工具，清理垃圾，注册表等等</p>\n<p>CAJviewer：查看caj文件（知网）</p>\n<p>DesktopNaotu: 开源桌面脑图</p>\n<p>Dev Cpp：C&#x2F;C++ IDE</p>\n<p>Ditto：Windows 剪贴板增强工具(MS store)</p>\n<p>Dism++：Windows系统辅助工具</p>\n<p>DiskGenius：数据恢复软件,硬盘分区工具,系统备份软件</p>\n<p>Everything：文件快速搜索</p>\n<p><del><em>FastStoneCapture：截图，录屏</em></del></p>\n<p>FileLocator Pro：文件内容检索</p>\n<p><del>Free Download Manager(FDM)：下载器（支持BT下载）</del></p>\n<p>Firefox：浏览器</p>\n<p>Fluent Terminal：终端</p>\n<p>foobar2000：音乐播放器</p>\n<p>Google Chrome：浏览器</p>\n<p><del>GifCam：录制Gif</del></p>\n<p>格式工厂：常见格式转换</p>\n<p>火绒：杀毒软件，防火墙</p>\n<blockquote>\n<p>另外还推荐小红伞，卡巴斯基等等<br><del>一起用的话会怼起来</del>)</p>\n</blockquote>\n<p>IrfanView: 图片查看器</p>\n<p><del><em>Internet Download Manager：下载器</em></del></p>\n<p><del>iSider Tools：PPT插件</del></p>\n<p>Java：Java运行环境</p>\n<p>Joplin：开源笔记应用</p>\n<p>坚果云：网盘</p>\n<p>Keepass: 密码管理工具</p>\n<p>Listary：文件搜索</p>\n<p><del>Listen1：聚合音乐播放器</del></p>\n<p>LockHunter：查看文件占用，可用于删除顽固文件</p>\n<p><em>Matlab：数学软件</em></p>\n<p><em>Microsoft Office：Word，Excel，PPT</em></p>\n<p>MinGW：C&#x2F;C++</p>\n<p>Memreduct：内存清理</p>\n<p>MPV：播放器</p>\n<p>mupdf: 轻量级PDF阅读器</p>\n<p><em>Navicat Premium 12：数据库管理</em></p>\n<p>ngrok：快捷进行NAT</p>\n<p><em>NI Multisim：电路仿真</em></p>\n<p>Node.js：博客搭建</p>\n<p>Notepad++：编辑器</p>\n<p>Onedrive：微软云</p>\n<p><del>PanDownload：百度云高速下载</del></p>\n<p><del>Parsec：可以实现联机游戏远程同玩</del></p>\n<p><em>PhotoZoom Pro：图片放大，不失真</em></p>\n<p>Postman：网络请求测试</p>\n<p><del>PotPlayer：播放器</del></p>\n<p><del>Pycharm：Python IDE</del></p>\n<p>Pngyu：png压缩软件</p>\n<p>Proxifier：代理相关</p>\n<p>Quicklook：文件预览（MS Store）</p>\n<p><del>RainMeter：系统美化</del></p>\n<p>Resilio Sync：备份</p>\n<p>人人影视：看剧</p>\n<p>ScreenToGif：录制&#x2F;制作gif</p>\n<p>Sketchbook：画画（MS Store）</p>\n<p>Snipaste：开源截图软件（MS Store）</p>\n<p><del>Splash!：Unsplash（MS Store）</del></p>\n<p>Splayer：播放器-字幕（MS Store）</p>\n<p>Spotify：听歌</p>\n<p>Steam：玩游戏</p>\n<p>Sublime：文本编辑器</p>\n<p><em>Shape Collage：图片拼接</em></p>\n<p>Spacesniffer：磁盘分析</p>\n<p>Sumatrapdf: PDF 阅读器</p>\n<p>TeamViewer：远程控制</p>\n<p>Tim：…</p>\n<p>TranslucentTB：任务栏透明化（MS Store）</p>\n<p>天若OCR：OCR</p>\n<p>Ubuntu：WSL</p>\n<p><del>uTools：实用工具合集</del></p>\n<p><em>VMware：虚拟机</em></p>\n<p><del><em>VS 2017：IDE</em></del></p>\n<p>VNote: Markdown编辑器</p>\n<p>VS Code：编辑器</p>\n<p>Wox：快捷启动</p>\n<p><del>万彩脑图大师：思维导图</del></p>\n<p>万彩办公大师：奇奇怪怪的办公小工具，功能齐全</p>\n<p>网易云UWP：音乐播放器</p>\n<p>微信：…</p>\n<p>Xmind&#x2F;Xmind Zen：思维导图</p>\n<p>XShell 6：远程终端</p>\n<p>逍遥安卓：安卓模拟器</p>\n<p><del>迅雷：下载器</del></p>\n<p>Yu-writer：Markdown编辑器</p>\n","categories":["Tools"],"tags":["Windows","Tool","Software"]},{"title":"搭建 Zerotier Moons Server","url":"/p/d744f606/","content":"<p>搭建 Zerotier 私有根服务器（Moons），用于中转加速</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Install-Zerotier\"><a href=\"#Install-Zerotier\" class=\"headerlink\" title=\"Install Zerotier\"></a>Install Zerotier</h2><ul>\n<li>安装 Zerotier：</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -s https://install.zerotier.com | <span class=\"built_in\">sudo</span> bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新 Zerotier：</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum update zerotier-one</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>开机启动 Zerotier：</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> zerotier-one</span><br></pre></td></tr></table></figure>\n\n<p>其他系统的安装步骤可以参考<a href=\"https://www.zerotier.com/download/\">Download-Zerotier</a></p>\n<h2 id=\"Config-Service-Zerotier\"><a href=\"#Config-Service-Zerotier\" class=\"headerlink\" title=\"Config Service Zerotier\"></a>Config Service Zerotier</h2><ol>\n<li>加入 Zerotier 网络，需要 sudo 执行</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">其中 &lt;network_id&gt; 是你想加入的网络的16位网络 ID</span><br><span class=\"line\">zerotier-cli <span class=\"built_in\">join</span> &lt;network_id&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要退出一个网络：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">zerotier-cli leave &lt;network_id&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建World定义，生成 moon 模板：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zerotier-idtool initmoon &lt;identity.public of one root&gt; &gt;&gt;moon.json</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;identity.public of one root&gt;: usually /var/lib/zerotier-one/identity.public on Linux</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/zerotier-one</span><br><span class=\"line\">zerotier-idtool initmoon identity.public &gt;&gt;moon.json</span><br></pre></td></tr></table></figure>\n\n<p><code>moon.json</code>包含密钥信息，<strong>因此要将其保存在安全的地方</strong>，里有一个id字段，是 moon 的 World id，和在 Zerotier 管理面板中的id一致，如果不一致，那么就是前面的步骤出现了问题。</p>\n<p>这个 moon 的 World ID 在后面客户端设置添加 moon 服务器会用到。</p>\n<ol start=\"3\">\n<li>修改 moon.json 设置<code>stableEndpoints</code>：</li>\n</ol>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &quot;stableEndpoints&quot;: [ &quot;xxx/9993&quot;,&quot;2001:abcd:abcd::1/9993&quot;]</span></span><br><span class=\"line\"><span class=\"addition\">+ &quot;stableEndpoints&quot;: [ &quot;&lt;server ip&gt;/9993&quot;,&quot;2001:abcd:abcd::1/9993&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>生成实际的已签名 World：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">zerotier-idtool genmoon moon.json</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，将生成一个名为<code>000000deadbeef00.moon</code>的文件。它本身不包含机密密钥，但会由<code>moon.json</code>文件中的 secret 进行签名</p>\n<ol start=\"5\">\n<li>复制被签名的文件（<code>000000deadbeef00.moon</code>）到 Zerotier 安装位置的<code>moons.d</code>文件夹中，如果安装目录下不存在<code>moons.d</code>就新建一个：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/lib/zerotier-one</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> moons.d</span><br><span class=\"line\"><span class=\"built_in\">cp</span> /var/lib/zerotier-one/000000ab497ac53b.moon /var/lib/zerotier-one/moons.d/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>重启 Zerotier，并重启服务器：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart zerotier-one.service</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Config-Client\"><a href=\"#Config-Client\" class=\"headerlink\" title=\"Config Client\"></a>Config Client</h2><p>连接 moon server：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zerotier-cli orbit &lt;moon id&gt; &lt;any of its root id&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># 这里设置 moon id 和 root id 一致</span></span><br><span class=\"line\">zerotier-cli orbit deadbeef00 deadbeef00</span><br></pre></td></tr></table></figure>\n\n<p>执行完，通过：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">zerotier-cli listpeers</span><br></pre></td></tr></table></figure>\n\n<p>如果在列表中找到 moon 的条目，那就是连接 moon 成功了，它们现在将被用作备选的根服务器。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://docs.zerotier.com/zerotier/moons/\">Private Root Servers</a></li>\n<li><a href=\"https://www.wnark.com/archives/152.html\">zerotier自建moon教程</a></li>\n</ul>\n","categories":["Tools"],"tags":["Tool","Zerotier One"]},{"title":"Chrome扩展程序推荐","url":"/p/28b0c2eb/","content":"<p>Chrome 扩展整理及推荐，长期更新。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h2><p>用于管理 Chrome扩展程序，快捷启用&#x2F;关闭等。</p>\n<h3 id=\"Extension-Manager\"><a href=\"#Extension-Manager\" class=\"headerlink\" title=\"Extension Manager\"></a>Extension Manager</h3><p>支持插件搜索，方便切换。</p>\n<p>支持分组管理扩展状态，根据不同场景，启用相应插件。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco\">扩展地址</a></p>\n<h3 id=\"Extensity\"><a href=\"#Extensity\" class=\"headerlink\" title=\"Extensity\"></a>Extensity</h3><p>可以快捷启用&#x2F;关闭，支持插件搜索。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/extensity/jjmflmamggggndanpgfnpelongoepncg\">扩展地址</a></p>\n<h2 id=\"标签页管理\"><a href=\"#标签页管理\" class=\"headerlink\" title=\"标签页管理\"></a>标签页管理</h2><h3 id=\"Aerys\"><a href=\"#Aerys\" class=\"headerlink\" title=\"Aerys\"></a>Aerys</h3><p>快速归类和整理标签，以及快捷搜索标签页</p>\n<p>标签页开多了很实用，方便查找整理</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/aerys-tab-manager/kclbicheojedbinfjdjjolmciodoihkl\">扩展地址</a></p>\n<h3 id=\"OneTab\"><a href=\"#OneTab\" class=\"headerlink\" title=\"OneTab\"></a>OneTab</h3><blockquote>\n<p>单击OneTab图标，将所有标签页转换成一个列表<br>忍不了太多标签页的时候用，all in one</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall\">扩展地址</a></p>\n<h2 id=\"网页翻译\"><a href=\"#网页翻译\" class=\"headerlink\" title=\"网页翻译\"></a>网页翻译</h2><h3 id=\"沙拉查词\"><a href=\"#沙拉查词\" class=\"headerlink\" title=\"沙拉查词\"></a>沙拉查词</h3><p>网页划词翻译，以及快捷查词，很方便。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg\">扩展地址</a></p>\n<h3 id=\"划词翻译\"><a href=\"#划词翻译\" class=\"headerlink\" title=\"划词翻译\"></a>划词翻译</h3><p>也挺好用的一个划词翻译插件</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad\">扩展地址</a></p>\n<h3 id=\"彩云小译\"><a href=\"#彩云小译\" class=\"headerlink\" title=\"彩云小译\"></a>彩云小译</h3><p>在页面嵌入中文翻译，中英对照，很好用，推荐。</p>\n<p>对于免费用户有使用次数限制，可以使用<a href=\"https://github.com/ttttmr/Caiyun\">ttttmr&#x2F;Caiyun</a>，具体操作见<a href=\"https://github.com/ttttmr/Caiyun/blob/master/README.md\">README</a></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/lingocloud-web-translatio/jmpepeebcbihafjjadogphmbgiffiajh\">扩展地址</a></p>\n<h2 id=\"页面优化\"><a href=\"#页面优化\" class=\"headerlink\" title=\"页面优化\"></a>页面优化</h2><h3 id=\"几枝\"><a href=\"#几枝\" class=\"headerlink\" title=\"几枝\"></a>几枝</h3><blockquote>\n<p>在新标签页上展示中国传统色的层叠波浪动画效果搭配经典诗词</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/%E5%87%A0%E6%9E%9D/hfohpokminpknagcgncibpacohagppjn\">扩展地址</a></p>\n<h3 id=\"Suspicious-Site-Reporter\"><a href=\"#Suspicious-Site-Reporter\" class=\"headerlink\" title=\"Suspicious Site Reporter\"></a>Suspicious Site Reporter</h3><p>Chrome地址中恢复显示<code>http</code>和<code>www</code>标志</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/suspicious-site-reporter/jknemblkbdhdcpllfgbfekkdciegfboi\">扩展地址</a></p>\n<h3 id=\"简悦\"><a href=\"#简悦\" class=\"headerlink\" title=\"简悦\"></a>简悦</h3><p>优化文章阅读体验</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll\">扩展地址</a></p>\n<h3 id=\"Dark-Reader\"><a href=\"#Dark-Reader\" class=\"headerlink\" title=\"Dark Reader\"></a>Dark Reader</h3><p>Chrome 黑暗模式</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh\">扩展地址</a></p>\n<h3 id=\"Enhanced-Steam\"><a href=\"#Enhanced-Steam\" class=\"headerlink\" title=\"Enhanced Steam\"></a>Enhanced Steam</h3><p>优化 Steam 页面体验，可以查看历史价格等等。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/enhanced-steam/okadibdjfemgnhjiembecghcbfknbfhg\">扩展地址</a></p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><p>推荐阅读<a href=\"https://tmr.js.org/p/c85c3c06/\">GitHub 优化体验</a></p>\n<h4 id=\"Awesome-Autocomplete-for-GitHub\"><a href=\"#Awesome-Autocomplete-for-GitHub\" class=\"headerlink\" title=\"Awesome Autocomplete for GitHub\"></a>Awesome Autocomplete for GitHub</h4><p>添加即时搜索功能到GitHub的搜索栏</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/awesome-autocomplete-for/djkfdjpoelphhdclfjhnffmnlnoknfnd\">扩展地址</a></p>\n<h4 id=\"Remu\"><a href=\"#Remu\" class=\"headerlink\" title=\"Remu\"></a>Remu</h4><p>Github Star 管理工具</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/remu/bajifjohhghngljcfhkbpcggafpiajdo\">扩展地址</a></p>\n<h4 id=\"GitHub-Isometric-Contributions\"><a href=\"#GitHub-Isometric-Contributions\" class=\"headerlink\" title=\"GitHub Isometric Contributions\"></a>GitHub Isometric Contributions</h4><p>将GitHub贡献切换为等距像素艺术版本</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/github-isometric-contribu/mjoedlfflcchnleknnceiplgaeoegien\">扩展地址</a></p>\n<h3 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a>Stylus</h3><p>调整网页外观</p>\n<p>推荐<a href=\"https://userstyles.org/styles/161455/chrome-scrollbar-beautify\">Chrome滚动条美化</a></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne\">扩展地址</a></p>\n<h3 id=\"uBlock-Origin\"><a href=\"#uBlock-Origin\" class=\"headerlink\" title=\"uBlock Origin\"></a>uBlock Origin</h3><p>一款高效的网络请求过滤工具，占用极低的内存和 CPU。</p>\n<p>嗯，可以用来屏蔽广告。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm\">扩展地址</a></p>\n<h3 id=\"uBlacklist\"><a href=\"#uBlacklist\" class=\"headerlink\" title=\"uBlacklist\"></a>uBlacklist</h3><p>禁止特定的网站显示在搜索结果中(支持 Google、Startpage、Duckduckgo)。效果等同于使用搜索中使用<code>-site:xxx.com</code>语法，但本身是将结果隐藏，可以快速恢复展示。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe\">扩展地址</a></p>\n<h3 id=\"Wikiwand-Wikipedia-Modernized\"><a href=\"#Wikiwand-Wikipedia-Modernized\" class=\"headerlink\" title=\"Wikiwand: Wikipedia Modernized\"></a>Wikiwand: Wikipedia Modernized</h3><p>维基百科页面优化</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/wikiwand-wikipedia-modern/emffkefkbkpkgpdeeooapgaicgmcbolj\">扩展地址</a></p>\n<h2 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h2><h3 id=\"AHA-Music-浏览器中的音乐雷达\"><a href=\"#AHA-Music-浏览器中的音乐雷达\" class=\"headerlink\" title=\"AHA Music - 浏览器中的音乐雷达\"></a>AHA Music - 浏览器中的音乐雷达</h3><p>检测当前页面播放的音频，听歌识曲</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/aha-music-song-finder-for/dpacanjfikmhoddligfbehkpomnbgblf\">扩展地址</a></p>\n<h3 id=\"Web-Scraper\"><a href=\"#Web-Scraper\" class=\"headerlink\" title=\"Web Scraper\"></a>Web Scraper</h3><p>不用写代码的网页爬虫工具</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/web-scraper/jnhgnonknehpejjnehehllkliplmbmhn\">扩展地址</a></p>\n<h3 id=\"二维码生成器\"><a href=\"#二维码生成器\" class=\"headerlink\" title=\"二维码生成器\"></a>二维码生成器</h3><p>将输入的任意内容都转化成二维码</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/quick-qr-code-generator/afpbjjgbdimpioenaedcjgkaigggcdpp\">扩展地址</a></p>\n<h3 id=\"Checker-Plus-for-Gmail™\"><a href=\"#Checker-Plus-for-Gmail™\" class=\"headerlink\" title=\"Checker Plus for Gmail™\"></a>Checker Plus for Gmail™</h3><blockquote>\n<p>无需打开 Gmail 或 Inbox，即可收到桌面邮件通知，方便地查看、收听或删除邮件，并且支持多账户</p>\n</blockquote>\n<p>增强Gmail提醒</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj\">扩展地址</a></p>\n<h3 id=\"Dualsub\"><a href=\"#Dualsub\" class=\"headerlink\" title=\"Dualsub\"></a>Dualsub</h3><p>通用字幕渲染器，可以生成双语字幕，支持Netflix、Youtube、BiliBili等常见视频网站，但是字体大小无法很好地调整，只有大号小号两种。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/dualsub/gnlibmlfpencglodjpgnalbdebfhpmfp\">扩展地址</a></p>\n<h3 id=\"EditThisCookie\"><a href=\"#EditThisCookie\" class=\"headerlink\" title=\"EditThisCookie\"></a>EditThisCookie</h3><p>修改网页Cookie</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg\">扩展地址</a></p>\n<h3 id=\"Wappalyzer\"><a href=\"#Wappalyzer\" class=\"headerlink\" title=\"Wappalyzer\"></a>Wappalyzer</h3><p>分析网页所使用技术</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg\">扩展地址</a></p>\n<h3 id=\"图片助手-ImageAssistant-批量图片下载器\"><a href=\"#图片助手-ImageAssistant-批量图片下载器\" class=\"headerlink\" title=\"图片助手(ImageAssistant) 批量图片下载器\"></a>图片助手(ImageAssistant) 批量图片下载器</h3><p>提取当前页面上的所有图片，供选择下载</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/imageassistant-batch-imag/dbjbempljhcmhlfpfacalomonjpalpko\">扩展地址</a></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><ol>\n<li><p>查看扩展快捷键：地址栏输入<code>chrome://extensions/shortcuts</code></p>\n</li>\n<li><p>快速截全屏：打开DevTools(<code>Ctrl+Shift+i</code>)，打开命令面板(<code>Ctrl+Shift+p</code>)，输入<code>capture</code>可选择截图模式</p>\n</li>\n</ol>\n<blockquote class=\"blockquote-center\">\n<p>君子生非异也，善假于物也</p>\n<p>——荀子《劝学》</p>\n\n</blockquote>\n","categories":["Tools"],"tags":["Tool","Software","Chrome","Extension"]},{"title":"Mac App","url":"/p/503cf802/","content":"<p>日常环境切换到 Mac，发现好多有意思的app，配置也比 Windows 简单。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"RapidAPI\"><a href=\"#RapidAPI\" class=\"headerlink\" title=\"RapidAPI\"></a>RapidAPI</h2><p>API 工具</p>\n<blockquote>\n<p>我认识的时候叫 Paw，当时还是收费的好像，现在大部分功能免费了，可以试试</p>\n</blockquote>\n<p><a href=\"https://paw.cloud/\">地址</a></p>\n<h2 id=\"Proxyman\"><a href=\"#Proxyman\" class=\"headerlink\" title=\"Proxyman\"></a>Proxyman</h2><p>抓包软件，开源免费</p>\n<blockquote>\n<p>针对iOS系统简单易用，也有windows版本，但我觉得很难用。</p>\n</blockquote>\n<p><a href=\"https://proxyman.io/\">地址</a></p>\n<h2 id=\"RunCat\"><a href=\"#RunCat\" class=\"headerlink\" title=\"RunCat\"></a>RunCat</h2><p>状态栏上的一只可爱猫咪，跑步速度反映了CPU的使用率</p>\n<blockquote>\n<p>可以查看CPU、内存、电池、磁盘使用信息等</p>\n</blockquote>\n<p><a href=\"https://apps.apple.com/cn/app/runcat/id1429033973\">地址</a></p>\n<h2 id=\"Raycast\"><a href=\"#Raycast\" class=\"headerlink\" title=\"Raycast\"></a>Raycast</h2><p>启动器，拥有丰富的扩展，但我日常使用频率最高的应该是剪切板历史</p>\n<p><a href=\"https://www.raycast.com/\">地址</a></p>\n<h2 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh-my-zsh\"></a>oh-my-zsh</h2><p>mac 终端默认是zsh，直接装上 oh-my-zsh + p10k</p>\n<ul>\n<li><a href=\"https://ohmyz.sh/#install\">oh my zsh 安装</a></li>\n<li><a href=\"https://github.com/romkatv/powerlevel10k\">p10k安装</a></li>\n</ul>\n<h2 id=\"HomeBrew\"><a href=\"#HomeBrew\" class=\"headerlink\" title=\"HomeBrew\"></a>HomeBrew</h2><p>macOS（或 Linux）缺失的软件包的管理器，可以安装 Chrome、Gnupg 等</p>\n<p><a href=\"https://brew.sh/\">地址</a></p>\n<h2 id=\"GPG\"><a href=\"#GPG\" class=\"headerlink\" title=\"GPG\"></a>GPG</h2><p>对 git 的提交进行签名，增加可信度（主要是想要那个小绿标）</p>\n<p>建议直接看 GitHub 关于此的文档的文档 <a href=\"https://docs.github.com/zh/authentication/managing-commit-signature-verification/about-commit-signature-verification\">关于提交签名验证</a></p>\n<p><img data-src=\"https://docs.github.com/assets/cb-17614/mw-1440/images/help/commits/verified-commit.webp\"></p>\n<blockquote>\n<p>安装的时候没看到Github这个文档，找了一个教程安装，后面发现都是这个Github文档的内容。</p>\n</blockquote>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><p>VS Code 中使用GPG进行提交签名需要开启：<code>git.enableCommitSigning</code></p>\n<h3 id=\"pinentry-mac\"><a href=\"#pinentry-mac\" class=\"headerlink\" title=\"pinentry-mac\"></a>pinentry-mac</h3><p>安装 pinentry-mac 的时候遇到一个问题，<code>git commit</code>出现:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">gpg: 签名时失败： 缺少 pinentry</span><br><span class=\"line\">gpg: [stdin]: clear-sign failed: 缺少 pinentry</span><br></pre></td></tr></table></figure>\n\n<p>我大致猜到是配置 pinentry-mac 时哪里出了问题，导致提交的时候没有弹出输入gpg pin的窗口。<br>后面找到GitHub的文档 <a href=\"https://docs.github.com/zh/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key\">将您的签名密钥告知 Git</a>，重新操作一遍就可以。感觉这一步嫌疑最大</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -r ~/.zshrc ]; <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;\\nexport GPG_TTY=$(tty)&#x27;</span> &gt;&gt; ~/.zshrc; \\</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> -e <span class=\"string\">&#x27;\\nexport GPG_TTY=$(tty)&#x27;</span> &gt;&gt; ~/.zprofile; <span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>以及 pinentry-mac 的安装和配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install pinentry-mac</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;pinentry-program <span class=\"subst\">$(which pinentry-mac)</span>&quot;</span> &gt;&gt; ~/.gnupg/gpg-agent.conf</span><br><span class=\"line\">killall gpg-agent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"proxychains\"><a href=\"#proxychains\" class=\"headerlink\" title=\"proxychains\"></a>proxychains</h2><p>proxychains 在 Mac 终端不生效，需要手动关闭SIP（System Integrity Protection）</p>\n<blockquote>\n<p>我也不想关，方法可以参考：<a href=\"https://www.tcdw.net/post/proxychains-with-sip\">故事：试图不关闭 SIP 在 macOS Sierra 上使用 proxychains-ng</a> （发现一个有意思的博客</p>\n<p>感觉是可行的，但略微麻烦，所以换透明代理解决终端代理问题</p>\n</blockquote>\n<h2 id=\"Macs-Fan-Control\"><a href=\"#Macs-Fan-Control\" class=\"headerlink\" title=\"Macs Fan Control\"></a>Macs Fan Control</h2><p>控制风扇转速的，解决偶尔散热问题</p>\n<p><a href=\"https://crystalidea.com/macs-fan-control\">地址</a></p>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>参考<a href=\"https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">生成新的 SSH 密钥并将其添加到 ssh-agent</a></p>\n<h2 id=\"LocalSend\"><a href=\"#LocalSend\" class=\"headerlink\" title=\"LocalSend\"></a>LocalSend</h2><p>开源局域网文件传输，全平台体验很好，平常跨设备传点文件很方便。</p>\n<p><a href=\"https://localsend.org/\">地址</a></p>\n<h2 id=\"Snipaste\"><a href=\"#Snipaste\" class=\"headerlink\" title=\"Snipaste\"></a>Snipaste</h2><p>截图软件，Windows 上也用，简单易用</p>\n<p><a href=\"https://www.snipaste.com/\">地址</a></p>\n<h2 id=\"Scroll-Reverser\"><a href=\"#Scroll-Reverser\" class=\"headerlink\" title=\"Scroll-Reverser\"></a>Scroll-Reverser</h2><p>控制触控板和鼠标的滚动方向，就可以实现单独控制触控板和鼠标的滚动习惯</p>\n<p><a href=\"https://github.com/pilotmoon/Scroll-Reverser\">地址</a></p>\n","categories":["Tools"],"tags":["Tool","App","Mac"]},{"title":"WSL下使用 oh my zsh","url":"/p/e91c415b/","content":"<p>WSL 使用 oh my zsh 安装记录</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h2><p>安装oh my zsh 前需要安装zsh</p>\n<blockquote>\n<p>zsh是一个shell</p>\n<p>oh my zsh 是一个zsh框架</p>\n</blockquote>\n<p>关于安装zsh，<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH\">官方教程</a>写的很详细了。</p>\n<p>对于<strong>Ubuntu</strong>, Debian &amp; derivatives (<strong>Windows 10 WSL</strong> | Native Linux kernel with Windows 10 build 1903) 使用：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install zsh</span><br></pre></td></tr></table></figure>\n\n<p>不同的操作系统下，命令不一样，具体可以查看：<a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH#how-to-install-zsh-on-many-platforms\">How to install zsh on many platforms</a></p>\n<h3 id=\"检查安装\"><a href=\"#检查安装\" class=\"headerlink\" title=\"检查安装\"></a>检查安装</h3><ol>\n<li><p>验证安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">zsh --version</span><br></pre></td></tr></table></figure>\n\n<p>Expected result: <code>zsh 5.1.1</code> or more recent.</p>\n</li>\n<li><p>设置zsh为默认shell：<code>chsh -s $(which zsh)</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出并再次登录以使用新的默认shell</p>\n</li>\n<li><p>测试默认shell设置是否有效</p>\n</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n<p>  Expected result: <code>/bin/zsh</code> or similar.</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$SHELL</span> --version</span><br></pre></td></tr></table></figure>\n<p>  Expected result: <code>zsh 5.1.1</code> or similar</p>\n<h2 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh my zsh\"></a>安装 oh my zsh</h2><p>作者推荐使用 curl 或者 wget 最简单方便的安装方法。</p>\n<blockquote>\n<p>Oh My Zsh is installed by running one of the following commands in your terminal. You can install this via the command-line with either <code>curl</code> or <code>wget</code>.</p>\n</blockquote>\n<h3 id=\"via-curl\"><a href=\"#via-curl\" class=\"headerlink\" title=\"via curl\"></a>via curl</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"via-wget\"><a href=\"#via-wget\" class=\"headerlink\" title=\"via wget\"></a>via wget</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(wget -O- https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h2><h3 id=\"修改-zshrc-文件\"><a href=\"#修改-zshrc-文件\" class=\"headerlink\" title=\"修改 zshrc 文件\"></a>修改 zshrc 文件</h3><p>使用nano修改，<del>对Vim不熟</del></p>\n<ol>\n<li>修改</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># edit</span></span><br><span class=\"line\">ZSH_THEME=<span class=\"string\">&quot;ys&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>保存</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctrl+x 退出</span><br><span class=\"line\">输入 y 确认保存</span><br><span class=\"line\">回车确认</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义配置主题\"><a href=\"#自定义配置主题\" class=\"headerlink\" title=\"自定义配置主题\"></a>自定义配置主题</h2><p>简约化，有一些东西可以隐藏起来使得shell 看起来比较简洁，比如：</p>\n<p>默认配置下，ys 主题会显示计算机名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># alice @ &#123;computer name&#125; in ~/.oh-my-zsh on git:master o [12:18:48]</span></span><br></pre></td></tr></table></figure>\n\n<p>Expected result:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># alice ~/.oh-my-zsh on git:master o</span></span><br></pre></td></tr></table></figure>\n\n<p>具体步骤：</p>\n<ol>\n<li>找到 wsl 子系统存<code>oh my zsh</code>文件的地方，默认路径：（注意替换username，另外，可借助 Everything 等工具搜索<code>.oh-my-zsh</code>）</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\&#123;username&#125;\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\home\\&#123;wsl-username&#125;\\.oh-my-zsh</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>复制<code>ys.zsh-theme</code>，在复制那份修改，以免出现bug</li>\n</ol>\n<p>  进入主题所在目录</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/themes</span><br></pre></td></tr></table></figure>\n\n<p>  复制 ys 主题：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> ys.zsh-theme test.zsh-theme</span><br></pre></td></tr></table></figure>\n\n<p>  修改<code>test.zsh-theme</code>（每行末尾的<code># xxx</code>为注释，代码内不要加入），下面是默认配置：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 默认配置</span><br><span class=\"line\">PROMPT=&quot;</span><br><span class=\"line\">  %&#123;$terminfo[bold]$fg[blue]%&#125;#%&#123;$reset_color%&#125; \\  # 显示蓝色 #</span><br><span class=\"line\">  %(#,%&#123;$bg[yellow]%&#125;%&#123;$fg[black]%&#125;%n%&#123;$reset_color%&#125;,%&#123;$fg[cyan]%&#125;%n) \\</span><br><span class=\"line\">  %&#123;$fg[white]%&#125;@ \\ # 显示 @</span><br><span class=\"line\">  %&#123;$fg[green]%&#125;%m \\ # 显示 &#123;computer name&#125;</span><br><span class=\"line\">  %&#123;$fg[white]%&#125;in \\ # 显示 in</span><br><span class=\"line\">  %&#123;$terminfo[bold]$fg[yellow]%&#125;%~%&#123;$reset_color%&#125;\\ # 显示当前路径</span><br><span class=\"line\">  $&#123;hg_info&#125;\\  # 显示 Mercurial 信息</span><br><span class=\"line\">  $&#123;git_info&#125;\\ # 显示 git 信息</span><br><span class=\"line\">   \\</span><br><span class=\"line\">  %&#123;$fg[white]%&#125;[%*] $exit_code # 显示时间和exit code</span><br><span class=\"line\">  %&#123;$terminfo[bold]$fg[red]%&#125;$ %&#123;$reset_color%&#125;&quot; # 显示红色的 $</span><br></pre></td></tr></table></figure>\n\n<p>  默认配置对应的效果：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PRIVILEGES USER @ MACHINE in DIRECTORY on git:BRANCH STATE [TIME] C:LAST_EXIT_CODE</span></span><br><span class=\"line\">$ COMMAND</span><br></pre></td></tr></table></figure>\n\n<p>  删除<code>4、5、6行</code>以及<code>11行</code>（可选），即删除：（这里的<code>-</code>表示删除，<code>#</code>表示注释）</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">- %&#123;$fg[white]%&#125;@ \\ # 删除 @</span><br><span class=\"line\">- %&#123;$fg[green]%&#125;%m \\ # 删除&#123;computer name&#125;</span><br><span class=\"line\">- %&#123;$fg[white]%&#125;in \\ # 删除 in</span><br><span class=\"line\">- %&#123;$fg[white]%&#125;[%*] # 删除时间</span><br></pre></td></tr></table></figure>\n\n<p>  最终得到：</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PROMPT=&quot;</span><br><span class=\"line\">%&#123;$terminfo[bold]$fg[blue]%&#125;#%&#123;$reset_color%&#125; \\</span><br><span class=\"line\">%(#,%&#123;$bg[yellow]%&#125;%&#123;$fg[black]%&#125;%n%&#123;$reset_color%&#125;,%&#123;$fg[cyan]%&#125;%n) \\</span><br><span class=\"line\">%&#123;$terminfo[bold]$fg[yellow]%&#125;%~%&#123;$reset_color%&#125;\\</span><br><span class=\"line\">$&#123;hg_info&#125;\\</span><br><span class=\"line\">$&#123;git_info&#125;\\</span><br><span class=\"line\"> \\</span><br><span class=\"line\">$exit_code</span><br><span class=\"line\">%&#123;$terminfo[bold]$fg[red]%&#125;$ %&#123;$reset_color%&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>  对应的效果：<br>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PRIVILEGES USER DIRECTORY on git:BRANCH STATE C:LAST_EXIT_CODE</span></span><br><span class=\"line\">$ COMMAND</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>切换主题为修改后的的<code>test</code>主题，参考<a href=\"#%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98\">切换主题</a></li>\n</ol>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>舒服了~</p>\n<p><img data-src=\"/p/e91c415b/result.png\"></p>\n<blockquote class=\"blockquote-center\">\n<p>国庆快乐~</p>\n\n</blockquote>\n\n","categories":["Tools"],"tags":["Windows","Tool","Software","WSL","oh my zsh","zsh"]},{"title":"Postman 实现 Token 参数化","url":"/p/c23ff637/","content":"<p>最近使用Postman有一个需求，访问的网页需要进行 Token 验证（Token 可以从一个网址获取），然后请求的时候需要在请求头中带上Token，且Token有一定的有效期，过期需要重新获取。每次手动获取 Token 然后写入请求头中显然太麻烦了。然后研究了下如何使用 Postman 自动实现这个过程。涉及到 Postman 的<code>Variables</code>、<code>Pre-request Script</code>的使用。</p>\n<span id=\"more\"></span>\n\n<p>平时使用 Postman 就是简单地使用<code>GET</code>、<code>POST</code>等方法进行接口测试。Postman 很强大，有很多功能都没有用到，这次遇到这个需求，顺便学习下 Postman 其他功能的使用。</p>\n<h2 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h2><p>当我意识到有好几个接口都需要在请求头加入 Token 才可以访问内容，但是 Token 过期了，又需要手动一个一个修改Token值，这就很麻烦以及浪费时间。我首先想到可以通过设置环境变量来解决，在 Header 中设置 Token 的值为变量值<code>&#123;&#123;Token&#125;&#125;</code>每次获取新的Token时，更新环境变量<code>Token</code>，然后就可以更新每个请求头中的 Token 值，就不用手动一个一个修改。</p>\n<p>Variable的作用域如下图：</p>\n<p><img data-src=\"/p/c23ff637/var-scope.jpg\"></p>\n<blockquote>\n<p>If a variable with the same name is declared in two different scopes, the value stored in the variable with narrowest scope will be used—for example if there is a global and a local variable both named username, the local value will be used when the request runs.</p>\n<p>如果在两个不同的作用域中声明了具有相同名称的变量，则将使用存储在作用域最小的变量中的值，例如，如果一个全局变量和一个局部变量都名为username，那么在运行请求时将使用局部变量的值。</p>\n</blockquote>\n<p>关于Variable的描述和设置使用具体参考：<a href=\"https://learning.postman.com/docs/sending-requests/variables/\">Using variables</a></p>\n<p>但这里还需要手动获取 Token 以及手动修改变量中的 Token 值，下面描述下如何通过脚本实现 Token 的自动化获取以及设置到 Headers 中。</p>\n<h2 id=\"Pre-request-Script\"><a href=\"#Pre-request-Script\" class=\"headerlink\" title=\"Pre-request Script\"></a>Pre-request Script</h2><p>Postman 有一个 Pre-request Script 的功能，可以在每次请求前执行 Postman JavaScript 脚本。</p>\n<p>关于 Postman JavaScript 的描述和文档可以参考：</p>\n<ol>\n<li><p><a href=\"https://learning.postman.com/docs/writing-scripts/intro-to-scripts/\">Scripting in Postman</a></p>\n</li>\n<li><p><a href=\"https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/\">Postman JavaScript reference</a></p>\n</li>\n</ol>\n<p>发送请求并提取返回的 Token，下面提供Postman 通过脚本发送Post请求的示例，根据自己的需要进行修改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">pm.<span class=\"title function_\">sendRequest</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://&#123;your url to get token&#125;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">header</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;raw&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">raw</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">username</span>: <span class=\"string\">&quot;username&quot;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&quot;password&quot;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提取 Response Body 中的 token 值, 并添加到 Headers 中</span></span><br><span class=\"line\">    pm.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">add</span>(&#123; <span class=\"attr\">key</span>: <span class=\"string\">&#x27;Token&#x27;</span>, <span class=\"attr\">value</span>: res.<span class=\"title function_\">json</span>().<span class=\"property\">access_token</span> &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以将这个脚本放在 Collection 的 Pre-request Script 中，这样整个 Collection 中的请求都会默认带上 Token 值。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>Postman 功能很多，也很强大，根据我的需求来了解它。这次因为 Token 需要参数化，学习了一些 Postman JavaScript 的使用。</p>\n<p>这个可操作性很大，比如某些需要登录后才可以进行的操作，可以通过 Postman 的 Pre-request Script 模拟登录获取 Cookie 或者 Token，然后进行操作，有点变相爬虫的味道哈哈。</p>\n<blockquote class=\"blockquote-center\">\n<p>突然发现和初中的好朋友已有十年交情了！</p>\n<p>人生呐~</p>\n<p>– 2020.12.06</p>\n\n</blockquote>\n","categories":["Tools"],"tags":["Postman","Pre-request Script","Variables"]},{"title":"移除 CSDN 广告","url":"/p/cfda3825/","content":"<p>偶尔会点开 CSDN，不得不说搜索引擎的 SEO 做的真好，但点进去铺天盖地的广告和最近的“红包雨”就离谱…</p>\n<p>这里描述下我的解决方法，移除广告。</p>\n<span id=\"more\"></span>\n\n<p>“红包雨”是由一个 <code>redpack.js</code> 生成的，通过 f12 查看网络请求，选择 js 那一项就可以看到加载的脚本。</p>\n<p>通过网络请求加载的脚本，可以使用 ublock 添加规则就可以实现屏蔽：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># csdn block</span><br><span class=\"line\">g.csdnimg.cn/*.js</span><br><span class=\"line\">csdnimg.cn/*.js</span><br></pre></td></tr></table></figure>\n\n<p>在搜索结果中隐藏 CSDN 站点的内容，需要用到 ublacklist 插件，添加一个规则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*://*.csdn.net/*</span><br></pre></td></tr></table></figure>\n\n<p>ublacklist 用于优化搜索引擎体验可以参考：<a href=\"https://github.com/cobaltdisco/Google-Chinese-Results-Blocklist\">中文搜索结果黑名单</a>，订阅配置清理搜索结果</p>\n","categories":["Tools"],"tags":["Tool","Advertise"]},{"title":"移除“阅读全文”的限制","url":"/p/b9afc11d/","content":"<p>看文章的时候，偶尔会遇到阅读全文需要去微信公众号获取一个验证码，然后输入才可以阅读剩余全文的（后面简称<code>阅读限制</code>）。不知道那个 genius 想出来的，这种限制在我看来，对于阅读文章的体验来说，真的很差。这里介绍一种简单绕过的方法。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"可行性\"><a href=\"#可行性\" class=\"headerlink\" title=\"可行性\"></a>可行性</h2><p>分析一下什么样的情况，下面描述的方法是可以解决的。</p>\n<p>首先进入<code>f12</code>进入开发者工具，看一下网络请求<code>Network</code>，前几个请求中有一个是页面内容的，名称和网址的最后一部分是一样的，然后点击看一下<code>preview</code>，查看页面内容<strong>实际</strong>加载了哪些。</p>\n<p>这里以<code>https://cn.bing.com/?ensearch=1&amp;FORM=BEHPTB</code>为例，网址以<code>?ensearch=1&amp;FORM=BEHPTB</code>结尾，对应查看<code>Network</code>中的<code>?ensearch=1&amp;FORM=BEHPTB</code>请求，可以在preview中预览内容：</p>\n<p><img data-src=\"/p/b9afc11d/uri-find-html-preview.png\"></p>\n<p>这里可以看到预览里显示的内容并不完整，丢失了一些图片和样式。</p>\n<p>在存在“阅读限制”的网页，通过查看请求的网页响应请求，如果看到<code>preview</code>里显示的是完整的文章，可能会缺少一些样式或者图片，但文字内容是<strong>完整</strong>的，那么网页中的“阅读限制”，只是通过脚本、层叠样式来隐藏或者遮住文章余下部分。</p>\n<p>对于这种情况是可以通过屏蔽相应脚本，移除遮挡的样式就行。下面提供的解决方法也是<strong>基于此前提</strong>的。</p>\n<p>其实到这里，你想要查看所有内容，那最简单就是在开发者工具里的直接看网络请求<code>preview</code>里该网页的内容，但<code>preview</code>里可能里会缺少一些样式，看起来不太舒服，而且每篇文章这样操作也不方便。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p><code>f12</code>打开开发者工具，查看页面元素，选取那个<code>阅读全文</code>按钮，查看周边元素，发现这个：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://readmore.openwrite.cn/js/readmore.js&quot;</span> type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里去加载了这个外部脚本，而不是站点内部集成的，那么屏蔽了，应该就可以。有的站点的脚本域名可能和这个不一样，但我发现最后指向的还是这个站点的脚本。</p>\n<p>也可以看一下网络请求，加载外部脚本一般也会发起请求的，里面很明显有一个名为<code>readmore</code>的请求，使用 uBlock 屏蔽了就行。</p>\n<p><img data-src=\"/p/b9afc11d/readmore-network.png\" alt=\"readmore-network.png\"></p>\n<p>对于在按钮周围没有很明显看到加载了哪个脚本，那么进入开发者工具，查看网络请求中的<code>js</code>，过滤请求内容类型，只看脚本类型。</p>\n<p>用来做“阅读限制”的脚本可能名字不一定叫<code>readmore.js</code>，但是可以搜索你看到的弹窗里出现的内容，比如<code>关注xxx</code>什么的，脚本少的话也可以点开大致看下，找到后在 uBlock 中屏蔽就行，具体操作：</p>\n<p><img data-src=\"/p/b9afc11d/dev-tools-search-content.png\" alt=\"开发者工具中搜索响应内容\"></p>\n<p>在 uBlock 中添加一条自定义静态规则，屏蔽这个名为<code>readmore.js</code>的脚本就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">readmore.openwrite.cn/js/readmore.js</span><br></pre></td></tr></table></figure>\n\n<p>更新一下，最近看到一些网站把这个 js 放到自己站点上静态加载，之前的屏蔽方式是根据 url 来的，就不生效了，可恶。</p>\n<p>现在想通过文件名来进行屏蔽过滤，然后去翻了下 uBlock 的 <a href=\"https://github.com/fang5566/uBlock/wiki/%E9%9D%99%E6%80%81%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99%E8%AF%AD%E6%B3%95#%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C%E8%BF%87%E6%BB%A4\">wiki</a>，通过这样匹配文件名就可以了，更通用一些：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">^readmore.js^</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ps. uBlock 添加了规则后，重新刷新一下页面，如果发现还是存在“阅读限制”，试一下清除缓存，强制刷新页面，可能是之前加载页面的时候脚本已经缓存在本地导致的</p>\n</blockquote>\n<p>移除脚本后发现有样式遮挡，就用 uBlock 的移除元素的功能就行。</p>\n","categories":["Tools"],"tags":["Chrome","Advertise","uBlock","Tools"]},{"title":"移除人人影视广告","url":"/p/2b23f1c1/","content":"<p><del>人人影视凉了</del></p>\n<p>平常用人人影视来追剧，但应用内不可避免的存在广告，如右下弹窗、中央封面等。而且不好关闭，容易误点，导致自动打开浏览器访问该网址。折腾了下，最后通过全局拦截限制应用访问指定url实现去广告的目的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a><strong>TL;DR</strong></h2><p>人人影视当前版本：v3.2.8</p>\n<p>修改<code>C:\\Users\\&#123;username&#125;\\AppData\\Roaming\\rrshare\\settings.ini</code>中的广告配置项，有关<code>Ad</code>、<code>Advertisement</code>的配置项置空，解决搜索栏处弹窗，以及修改启动弹窗图片。</p>\n<p>打开<code>火绒</code>-&gt;<code>防护中心</code>-&gt;<code>网络防护</code>-&gt;<code>恶意网址拦截</code>，添加以下规则，全局拦截应用访问这两个网址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://pc.zmzapi.com/index.php?g=api/*a=ad_list</span><br><span class=\"line\">http://pc.zmzapi.com/index.php?g=api/*a=focus_banner</span><br></pre></td></tr></table></figure>\n\n<p>拦截前：</p>\n<p><img data-src=\"/p/2b23f1c1/origin.jpg\"></p>\n<p>拦截后：</p>\n<p><img data-src=\"/p/2b23f1c1/result.jpg\"></p>\n<hr>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ol>\n<li><p>使用 WireShark 抓取 80 端口流量分析：<code>tcp.port == 80</code></p>\n</li>\n<li><p>过滤域名筛选人人影视的流量：<code>http.host contains zmz</code></p>\n</li>\n<li><p>观察筛选出的包，这里取了个巧，猜测 url 带有 <code>ad</code> 字样：<code>http.request.uri contains &quot;ad&quot;</code></p>\n</li>\n</ol>\n<p>所以整体过滤表达式就是：<code>tcp.port == 80 &amp;&amp; http.host contains &quot;zmz&quot; &amp;&amp; http.request.uri contains &quot;ad&quot;</code></p>\n<p>然后很明显看到一个 url 是<code>http://pc.zmzapi.com/index.php?g=api/public&amp;m=v2&amp;client=5&amp;accesskey=xxx&amp;a=ad_list</code>很明显是广告列表了…</p>\n<p>这个 url 返回的是右下角弹出和首页信息流相关广告（图片url）的 json:</p>\n<p><img data-src=\"/p/2b23f1c1/ad_list.jpg\"></p>\n<p>首页顶部有几个广告位的 banner，这个抓包时看到有一个 url 结尾带 focus_banner，里面就是这些banner 广告的图片 url 以及文字信息：</p>\n<p><img data-src=\"/p/2b23f1c1/focus_banner.jpg\"></p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Everything 搜了一下 <code>rrshare</code>，发现有一个同名文件夹在<code>C:\\Users\\&#123;username&#125;\\AppData\\Roaming\\rrshare</code>目录下。里面有一个<code>settings.ini</code>（广告配置🤦‍♂️），<code>.ini</code>后缀的一般是配置文件，打开一看各种<code>Advertisement</code>字段，主要在<code>settings</code>部分：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[settings]</span></span><br><span class=\"line\"><span class=\"attr\">SkinType</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">LogoUrl</span>=C:/Users/zh100/AppData/Roaming/rrshare/logo.jpg <span class=\"comment\">;弹窗显示的图片，弹窗去不掉把它改成你喜欢的图片吧</span></span><br><span class=\"line\"><span class=\"attr\">LogoClickUrl</span>=                <span class=\"comment\">;弹窗点击调转的链接</span></span><br><span class=\"line\"><span class=\"attr\">LastClearWebCacheTime</span>=       <span class=\"comment\">;最后一次清楚web缓存的时间</span></span><br><span class=\"line\"><span class=\"attr\">AutoDownloadLink</span>=<span class=\"number\">1</span>           <span class=\"comment\">;自动下载链接</span></span><br><span class=\"line\"><span class=\"attr\">AdUpdateTime</span>=                <span class=\"comment\">;广告更新时间戳</span></span><br><span class=\"line\"><span class=\"attr\">FlickerAdUrl</span>=                <span class=\"comment\">;闪烁的广告网址</span></span><br><span class=\"line\"><span class=\"attr\">FlickerAdClickUrl</span>=           <span class=\"comment\">;闪烁的广告点击网址</span></span><br><span class=\"line\"><span class=\"attr\">FlickerAdTip</span>=                <span class=\"comment\">;闪烁的广告提示</span></span><br><span class=\"line\"><span class=\"attr\">ShowTime</span>=</span><br><span class=\"line\"><span class=\"attr\">WebAdvertisement</span>=            <span class=\"comment\">;网页广告</span></span><br><span class=\"line\"><span class=\"attr\">Advertisement</span>=               <span class=\"comment\">;广告</span></span><br><span class=\"line\"><span class=\"attr\">P4PClientVersion</span>=<span class=\"number\">1024</span></span><br><span class=\"line\"><span class=\"attr\">OneFileLinkCount</span>=<span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">AllLinkCount</span>=<span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"attr\">WangXinP4PClientVersion</span>=<span class=\"number\">290</span></span><br><span class=\"line\"><span class=\"attr\">LatestPublishUpdateBeep</span>=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">IgnoreUnforcedUpgrade</span>=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">DonateToUs</span>=</span><br><span class=\"line\"><span class=\"attr\">SearchAdvertisement</span>=         <span class=\"comment\">;搜索栏处的广告</span></span><br></pre></td></tr></table></figure>\n\n<p>在软件关闭时进行修改，把这些字段都置空，然后重启，搜索栏处的广告就不会显示，软件启动时的大弹窗也可以自定义为自己喜欢的图片。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>折腾了下，通过限制应用访问广告信息来源的 url 解决广告显示的问题，避免了浏览信息误触跳转到奇奇怪怪的网站…</p>\n<p>还有一个待解决的是打开人人影视的时候有一个大的弹窗，感觉是内嵌，好像不能通过这种方式来删除。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://tmr.js.org/p/c12699d6/\">雷电模拟器去广告</a></p>\n</li>\n<li><p><a href=\"https://blog.naaln.com/2018/06/crack-yyets/\">去除人人影视广告</a></p>\n</li>\n</ul>\n<blockquote class=\"blockquote-center\">\n<p>小林泰三，去见他的手儿奈了</p>\n<p>– 2020.11.23</p>\n\n</blockquote>\n","categories":["Tools"],"tags":["Windows","Tool","Software","Advertise"]},{"title":"如何在Chrome中使用 uBlock Origin","url":"/p/51b230f0/","content":"<p>uBlock Origin 在 Chrome 139 版本之后就不受支持，由于 Chrome 中 Manifest v2支持被弃用，仅支持Manifest v3。具体可以参考 <a href=\"https://github.com/uBlockOrigin/uBlock-issues/wiki/About-Google-Chrome's-%22This-extension-may-soon-no-longer-be-supported%22\">About Google Chrome’s “This extension may soon no longer be supported”</a></p>\n<span id=\"more\"></span>\n\n<p>但如果还是想在Chrome中使用也可以，略微麻烦些。</p>\n<ol>\n<li>在 chrome:&#x2F;&#x2F;flags&#x2F; 中启用 Allow legacy extension manifest versions</li>\n<li>打开扩展程序中的开发者模式，手动安装 uBlock Origin 的<a href=\"https://github.com/gorhill/uBlock/releases\">插件包</a></li>\n</ol>\n<p>自用的规则贴一下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># csdn block</span><br><span class=\"line\">g.csdnimg.cn/*.js</span><br><span class=\"line\">csdnimg.cn/*.js</span><br><span class=\"line\"># 阅读全文弹窗</span><br><span class=\"line\">*/readmore.js</span><br></pre></td></tr></table></figure>\n","categories":["Tools"],"tags":["Tool","Software","uBlock"]},{"title":"manim笔记（一）","url":"/p/27c1bd05/","content":"<p>manim的学习记录。</p>\n<span id=\"more\"></span>\n\n<p>使用manim创建简单的视频主要有三步：创建对象，对象的位置，动画效果。</p>\n<h2 id=\"manim创建对象\"><a href=\"#manim创建对象\" class=\"headerlink\" title=\"manim创建对象\"></a>manim创建对象</h2><p>显示在动画里的图形、文字或者是图片等，你想控制它做出相应变化的，那么它应该是一个对象存在于你的程序中。</p>\n<p>for example:</p>\n<ol>\n<li>下面创建了一个半径为2，填充色为蓝色，边框颜色为红色，不透明度为0.5的圆。<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">circle = Circle(radius=<span class=\"number\">2</span>, fill_color=BLUE, color=RED, fill_opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"variable language_\">self</span>.play(ShowCreation(circle))</span><br></pre></td></tr></table></figure>\n<img data-src=\"/p/27c1bd05/create_circle.gif\"></li>\n</ol>\n<ul>\n<li>radius 圆的半径</li>\n<li>fill_color 图形填充的颜色</li>\n<li>color 圆的边框颜色</li>\n<li>fill_opacity 设置透明度</li>\n</ul>\n<p>下面是几种图形的基本创建方法：</p>\n<p>圆 radius -&gt; Circle(color&#x3D;.., )<br>矩形 height&#x2F;width -&gt; Rectangle(color&#x3D;…, width&#x3D;…, height&#x3D;…)<br>正方形 side_length -&gt; Square(color&#x3D;…, side_length&#x3D;…)<br>正三角形 tritangle &#x3D; Triangle(color&#x3D;BLUE)</p>\n<blockquote>\n<p>对于图形的操作具体可以看<code>..\\manim-master\\manimlib\\mobject\\geometry.py</code>以及<code>..\\manim-master\\manimlib\\mobject\\mobject.py</code></p>\n<p>btw: 设置填充色的同时，必须设置其透明度，否则默认透明度为0，设置的填充色不起作用。</p>\n</blockquote>\n<ol start=\"2\">\n<li>创建文本对象：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">text = TextMobject(<span class=\"string\">&quot;黑夜给了我一双黑色的眼睛&quot;</span>, color=RED, height=<span class=\"number\">0.5</span>, width=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"variable language_\">self</span>.play(ShowCreation(text))</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/27c1bd05/create_text.gif\"></p>\n<ul>\n<li>TextMobject的第一个参数是文本内容</li>\n<li>color 设置文本颜色</li>\n<li>height 设置文本高度</li>\n<li>width 设置文本总宽度</li>\n</ul>\n<blockquote>\n<p>btw: width不是单个文字的宽度，而是整体文本对象的宽度。</p>\n</blockquote>\n<ol start=\"3\">\n<li>创建组合对象</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">square = Square(fill_color=RED, color=RED, fill_opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">rectangle = Rectangle(height=<span class=\"number\">0.8</span>, width=<span class=\"number\">4</span>, fill_color=RED, color=RED, fill_opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">group = VGroup(square, rectangle) <span class=\"comment\"># 组合对象</span></span><br><span class=\"line\"><span class=\"variable language_\">self</span>.play(ApplyMethod(group.shift, LEFT * <span class=\"number\">4</span>)) <span class=\"comment\"># 左移四个单位</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>btw: 组合对象的概念，和PPT中的组合类似，将两个或两个以上的对象绑定在一起，方便对它们同时执行操作，如参数设置，移动，旋转等等。</p>\n</blockquote>\n<p><img data-src=\"/p/27c1bd05/create_group.gif\"></p>\n<h2 id=\"位置设置\"><a href=\"#位置设置\" class=\"headerlink\" title=\"位置设置\"></a>位置设置</h2><p>manim默认创建的视频的宽高由<code>..\\manim-master\\manimlib\\constants.py</code>里的FRAME_WIDTH和FRAME_HEIGHT确定的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">PRODUCTION_QUALITY_CAMERA_CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;pixel_height&quot;</span>: <span class=\"number\">1440</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pixel_width&quot;</span>: <span class=\"number\">2560</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;frame_rate&quot;</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DEFAULT_PIXEL_HEIGHT = PRODUCTION_QUALITY_CAMERA_CONFIG[<span class=\"string\">&quot;pixel_height&quot;</span>]</span><br><span class=\"line\">DEFAULT_PIXEL_WIDTH = PRODUCTION_QUALITY_CAMERA_CONFIG[<span class=\"string\">&quot;pixel_width&quot;</span>]</span><br><span class=\"line\">FRAME_HEIGHT = <span class=\"number\">8.0</span></span><br><span class=\"line\">FRAME_WIDTH = FRAME_HEIGHT * DEFAULT_PIXEL_WIDTH / DEFAULT_PIXEL_HEIGHT</span><br></pre></td></tr></table></figure>\n\n<p>以上是视频视频宽高设定的相关代码。</p>\n<blockquote>\n<p>高：FRAME_HEIGHT &#x3D; 8.0<br>宽：FRAME_WIDTH &#x3D; FRAME_HEIGHT * DEFAULT_PIXEL_WIDTH &#x2F; DEFAULT_PIXEL_HEIGHT &#x3D; 8.0 * 2560 &#x2F; 1440 &#x3D; 14.22</p>\n</blockquote>\n<p>之所以讲视频的宽高，是因为后面的位置确定和坐标有关。这里通过添加网格和坐标来显示效果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">plane = NumberPlane() <span class=\"comment\"># 添加网格</span></span><br><span class=\"line\">plane.add_coordinates() <span class=\"comment\"># 显示坐标</span></span><br><span class=\"line\"><span class=\"variable language_\">self</span>.play(ShowCreation(plane))</span><br><span class=\"line\"><span class=\"variable language_\">self</span>.wait(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/27c1bd05/gridon.gif\"></p>\n<p>图形的移动，指的是图形中心移动到具体的点或者已创建对象的中心位置。其中常用到的有<code>move_to</code>、<code>next_to</code>和<code>shift()</code></p>\n<ol>\n<li>move_to()</li>\n</ol>\n<blockquote>\n<p>Using: <code>move_to(point_or_mobject)</code><br>表示将对象的中心移动到特定的点或者是已创建对象的中心位置</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">move_test1</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        circle = Circle(color=BLUE) <span class=\"comment\"># 创建圆形</span></span><br><span class=\"line\">        circle.move_to(np.array([<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>])) <span class=\"comment\"># 图形中心移动到平面的点(2,2)的位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(circle))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/27c1bd05/move_test1.gif\"></p>\n<ol start=\"2\">\n<li>next_to()</li>\n</ol>\n<blockquote>\n<p>Using: next_to(mobject_or_point, direction_or_vector)<br>表示将对象的中心移动到距离特定的点或者是已创建对象的中心位置的direction_or_vector 的位置</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">move_test2</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># grid on</span></span><br><span class=\"line\">        plane = NumberPlane() <span class=\"comment\"># 创建网格</span></span><br><span class=\"line\">        plane.add_coordinates() <span class=\"comment\"># 添加坐标</span></span><br><span class=\"line\">        circle = Circle(color=BLUE) <span class=\"comment\"># 创建圆形</span></span><br><span class=\"line\">        dot = Dot() <span class=\"comment\"># 原点兼圆心</span></span><br><span class=\"line\">        dot1 = dot.copy()</span><br><span class=\"line\">        circle_dot = VGroup(circle, dot1) <span class=\"comment\"># 组合圆形和圆心</span></span><br><span class=\"line\">        rectangle = Rectangle(color=RED)</span><br><span class=\"line\">        line = Line(np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]), np.array([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]), color=YELLOW)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(plane)) <span class=\"comment\"># 显示网格</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add(dot) <span class=\"comment\"># 显示dot</span></span><br><span class=\"line\"></span><br><span class=\"line\">        circle.move_to(np.array([<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>]))</span><br><span class=\"line\">        rectangle.next_to(circle, DOWN+LEFT) <span class=\"comment\"># 把rectangle这个对象移动到circle这个对象的左下方</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(circle)) <span class=\"comment\"># 显示圆形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(FadeIn(line)) <span class=\"comment\"># 显示线条</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add(rectangle) <span class=\"comment\"># 显示矩形</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/27c1bd05/move_test2.gif\"></p>\n<ol start=\"3\">\n<li>shift()</li>\n</ol>\n<blockquote>\n<p>Using: shift(point)<br>将图形中心移动到特定的点，和move_to不一样的地方是，move_to支持移动到已创建图形的中心，而shift不行，它只能移动图形到特定点的位置。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">move_test3</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># grid on</span></span><br><span class=\"line\">        plane = NumberPlane() <span class=\"comment\"># 创建网格</span></span><br><span class=\"line\">        plane.add_coordinates() <span class=\"comment\"># 添加坐标</span></span><br><span class=\"line\">        circle = Circle(color=BLUE) <span class=\"comment\"># 创建圆形</span></span><br><span class=\"line\">        dot = Dot() <span class=\"comment\"># 原点兼圆心</span></span><br><span class=\"line\">        dot1 = dot.copy()</span><br><span class=\"line\">        circle_dot = VGroup(circle, dot1) <span class=\"comment\"># 组合圆形和圆心</span></span><br><span class=\"line\">        line = Line(np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]), np.array([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]), color=YELLOW)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(plane)) <span class=\"comment\"># 显示网格</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add(dot) <span class=\"comment\"># 显示dot</span></span><br><span class=\"line\">        <span class=\"comment\"># circle.move_to(np.array([2,2,0])) # 移动圆形到坐标轴的(2,2)的位置</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(circle))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ApplyMethod( circle_dot.shift, np.array([<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>])))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(FadeIn(line))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.add(line)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动画效果\"><a href=\"#动画效果\" class=\"headerlink\" title=\"动画效果\"></a>动画效果</h2><ol>\n<li>旋转 <code>rotate</code></li>\n</ol>\n<blockquote>\n<p>Using: rotate(angle)</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">square = Square(fill_color=RED, color=RED, fill_opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">square.rotate(np.pi / <span class=\"number\">4</span>) <span class=\"comment\"># 旋转pi/4</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>淡入淡出</li>\n</ol>\n<blockquote>\n<p>Using: self.play(FadeIn(mobject))<br>       self.play(FadeOut(mobject))</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">square = Square(fill_color=RED, color=RED, fill_opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"variable language_\">self</span>.play(FadeIn(square))</span><br><span class=\"line\"><span class=\"variable language_\">self</span>.play(FadeOut(square))</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Transform</li>\n</ol>\n<blockquote>\n<p>就是把一个对象变换为另一个对象，最经典的就是例程里的<code>SquareToCircle</code></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SquareToCircle</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        circle = Circle()</span><br><span class=\"line\">        square = Square()</span><br><span class=\"line\">        square.flip(RIGHT)</span><br><span class=\"line\">        square.rotate(-<span class=\"number\">3</span> * TAU / <span class=\"number\">8</span>)</span><br><span class=\"line\">        circle.set_fill(PINK, opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(square))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(Transform(square, circle)) <span class=\"comment\"># 方形转换为圆形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(FadeOut(square))</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/27c1bd05/SquareToCircle.gif\"></p>\n<ol start=\"4\">\n<li>TransformFromCopy</li>\n</ol>\n<blockquote>\n<p>效果顾名思义，看图意会</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SquareToText</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        circle = Circle()</span><br><span class=\"line\">        square = Square()</span><br><span class=\"line\">        text = TextMobject(<span class=\"string\">&quot;This is a square.&quot;</span>)</span><br><span class=\"line\">        square.flip(RIGHT)</span><br><span class=\"line\">        square.rotate(-<span class=\"number\">3</span> * TAU / <span class=\"number\">8</span>)</span><br><span class=\"line\">        circle.set_fill(PINK, opacity=<span class=\"number\">0.5</span>)</span><br><span class=\"line\">        text.shift(UP*<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(ShowCreation(square))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(TransformFromCopy(square, text)) <span class=\"comment\"># 方形转换为圆形</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/p/27c1bd05/SquareToCircle2.gif\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>3b1b留下来的<code>old_projects</code>的代码是个宝藏，虽然没有教程，可以看着旧的项目代码，自己模仿摸索。</p>\n<p>当你想用一个函数但你不知道它叫什么的时候，可以对<code>manim-master</code>文件夹里的代码进行搜索，找到函数，看一下定义以及使用过的地方，学习一下怎么调用的。然后加到你的程序里测试一下，看是不是你要的效果。</p>\n<p>许多函数名起的都很直接，比如旋转就是<code>rotate</code>，给坐标轴添加坐标就是<code>add_coordinates</code>。坐标的英文是<code>coordinates</code>，在<code>manim-master</code>里搜索<code>coordinates</code>就能看到有<code>add_coordinates</code>这个函数，然后参考旧的项目代码去尝试。</p>\n<blockquote>\n<p>ps. b站也有一些up主在做，可以学习一波~</p>\n</blockquote>\n","categories":["manim"],"tags":["Python","manim"]},{"title":"manim安装配置指北","url":"/p/637d228f/","content":"<p>关于manim的安装，以及简单配置使用，这篇文章是针对<code>manim</code> <strong>V1.0.0之前的版本</strong>安装配置的</p>\n<div class=\"note warning\"><p>对于<strong>manim 新版本（V1.0.0及以上）</strong>参考<a href=\"/p/36c1564c\">manim安装指北（二）</a></p>\n</div>\n\n<p>不定期更新完善，<del>咕咕</del></p>\n<ul>\n<li>2019.05.31 <a href=\"/p/637d228f\">manim V1.0.0 以下版本安装配置</a></li>\n<li>2021.08.28 <a href=\"/p/36c1564c\">manim V1.0.0 以上版本安装配置</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"manim安装\"><a href=\"#manim安装\" class=\"headerlink\" title=\"manim安装\"></a>manim安装</h2><div class=\"note warning\"><p>再次提醒：<br>对于<strong>新版本（V1.0.0及以上）</strong>可以参考<a href=\"/p/36c1564c\">manim安装指北（二）</a></p>\n</div>\n\n<p>manim 库用到许多软件环境，需要手动下载，配置环境变量。<br>以下是对<a href=\"https://github.com/3b1b/manim/blob/master/README.md\">官方教程</a>的小修小补，面向Windows系统，<del>配置环境什么的，Windows最容易出现问题</del>。</p>\n<h3 id=\"System-requirements\"><a href=\"#System-requirements\" class=\"headerlink\" title=\"System requirements\"></a>System requirements</h3><ol>\n<li><p>下载 FFmpeg<br> 这个 3b1b 在 README 里给了一个 <a href=\"https://www.wikihow.com/Install-FFmpeg-on-Windows\">教程</a>，安排的明明白白，这里不再赘述。<br> 终端执行以下命令，出现版本信息说明安装配置成功</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Cairo.</p>\n<div class=\"note warning\"><p>直接用pip安装在Windows上会出问题，报一堆错，然后安装失败</p>\n</div>\n\n<p>在<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycairo\">pythonlibs&#x2F;#pycairo</a>下载对应版本的轮子。<br>这里下载<code>pycairo‑1.18.0‑cp37‑cp37m‑win_amd64.whl</code>是对应 Python 版本3.7，Windows 64 bit</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pycairo‑1.18.0‑cp37‑cp37m‑win_amd64.whl</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>btw: 如果安装了 Anaconda，可以用<code>conda install pycairo</code>安装</p>\n</blockquote>\n</li>\n<li><p>安装一个 LaTeX distribution<br> 官方推荐使用 <a href=\"https://miktex.org/download\">MiKTeX</a></p>\n<blockquote>\n<p>我使用的是便携版(Portable Edition，只需要下载的标准安装包，并将其重命名为<code>miktex-portable.exe</code>)，然后需要把<code>...\\miktex-portable\\texmfs\\install\\miktex\\bin\\x64</code>（根据你存放的位置修改）添加到环境变量。</p>\n<p>在安装目录下双击打开<code>miktex-portable.cmd</code>，MikTex 启动默认隐藏在右下角托盘，双击打开图标配置界面，在<code>设置</code>中的<code>自动（即时）安装缺少的宏包</code>选择<code>全是</code>（建议）或者<code>询问</code>（每个包下载安装都要问你一遍，有点烦）</p>\n<p>因为 manim 涉及到 LaTex 的时候，尤其是涉及到中文，渲染生成动画过程中会依赖到一些 LaTex 宏包，一般会自动拉起 MikTex 进行下载，如果没有，那么打开 MikTex，然后再运行试试</p>\n</blockquote>\n<p> <img data-src=\"/p/637d228f/MikTex-Setting.png\" alt=\"MikTex-Setting\"></p>\n<p> 终端执行以下命令，出现版本信息说明安装配置成功</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">latex -version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装<a href=\"https://sourceforge.net/projects/sox/files/sox/\">SoX</a></p>\n</li>\n</ol>\n<h3 id=\"安装manim\"><a href=\"#安装manim\" class=\"headerlink\" title=\"安装manim\"></a>安装manim</h3><ol>\n<li><p>下载 manim 源文件</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/3b1b/manim.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Python 依赖包:</p>\n <div class=\"note warning\"><p>确保在<code>requirements.txt</code>中<code>pycairo==1.17.1</code> 修改为 <code>pycairo==1.18.0</code></p>\n</div>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试运行<br>  manim 的 “HelloWorld” 程序 SquareToCircle，在<code>manim-master</code>文件夹下执行<code>python manim.py example_scenes.py SquareToCircle -pl</code>成功画出一个圆，那么 manim 基本上是安装好了。<br>  执行结果：<br>  <img data-src=\"/p/637d228f/SquareToCircle.gif\" alt=\"SquareToCircle\"></p>\n <div class=\"note warning\"><p>如果程序执行出现关于<code>readline</code>的问题，Windows下需要安装<code>pyreadline</code>，<code>readline</code>库不支持Windows (QAQ~</p>\n</div>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pyreadline</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置manim支持中文\"><a href=\"#配置manim支持中文\" class=\"headerlink\" title=\"配置manim支持中文\"></a>配置manim支持中文</h2><blockquote>\n<p>这个问题之前弄了好久z_z</p>\n</blockquote>\n<p>未配置前，在动画中显示英文字符是没有问题的，但是如果使用了中文，就会出现 tex 生成失败的问题：（报错信息类似下面的）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;..\\manim\\manimlib\\extract_scene.py&quot;</span>, line <span class=\"number\">155</span>, <span class=\"keyword\">in</span> main</span><br><span class=\"line\">    scene = SceneClass(**scene_kwargs)</span><br><span class=\"line\">  File <span class=\"string\">&quot;..\\manim\\manimlib\\scene\\scene.py&quot;</span>, line <span class=\"number\">53</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.construct()</span><br><span class=\"line\">  File <span class=\"string\">&quot;test_code/Chinese-tex-test.py&quot;</span>, line <span class=\"number\">19</span>, <span class=\"keyword\">in</span> construct</span><br><span class=\"line\">    text01 = TextMobject(<span class=\"string\">&quot;黑夜给了我一双黑色的眼睛，&quot;</span>)</span><br><span class=\"line\">  File <span class=\"string\">&quot;..\\manim\\manimlib\\mobject\\svg\\tex_mobject.py&quot;</span>, line <span class=\"number\">148</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>, <span class=\"variable language_\">self</span>.arg_separator.join(tex_strings), **kwargs</span><br><span class=\"line\">  File <span class=\"string\">&quot;..\\manim\\manimlib\\mobject\\svg\\tex_mobject.py&quot;</span>, line <span class=\"number\">44</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    <span class=\"variable language_\">self</span>.template_tex_file_body</span><br><span class=\"line\">  File <span class=\"string\">&quot;..\\manim\\manimlib\\utils\\tex_file_writing.py&quot;</span>, line <span class=\"number\">19</span>, <span class=\"keyword\">in</span> tex_to_svg_file</span><br><span class=\"line\">    dvi_file = tex_to_dvi(tex_file)</span><br><span class=\"line\">  File <span class=\"string\">&quot;..\\manim\\manimlib\\utils\\tex_file_writing.py&quot;</span>, line <span class=\"number\">67</span>, <span class=\"keyword\">in</span> tex_to_dvi</span><br><span class=\"line\">    <span class=\"string\">&quot;See log output above or the log file: %s&quot;</span> % log_file)</span><br><span class=\"line\">Exception: Latex error converting to dvi. See log output above <span class=\"keyword\">or</span> the log file: ./media\\Tex\\c0be6cd076f8dffb.log</span><br></pre></td></tr></table></figure>\n\n<p>在<code>..\\manim-master\\manimlib</code>文件夹下有两个 tex 模板，<code>tex_template.tex</code>和<code>ctex_template.tex</code>，明显ctex的c指Chinese (广义上：CTex是Tex中文套件)</p>\n<p>然后在<code>..\\manim-master\\manimlib\\constants.py</code>中修改：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- TEX_USE_CTEX=False</span></span><br><span class=\"line\"><span class=\"addition\">+ TEX_USE_CTEX=True</span></span><br></pre></td></tr></table></figure>\n\n<p>Example:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> manimlib.imports <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run by `python manim.py &lt;path&gt;/Chinese-tex-test.py test_cn -pl`</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_cn</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        text01 = TextMobject(<span class=\"string\">&quot;黑夜给了我一双黑色的眼睛，&quot;</span>)</span><br><span class=\"line\">        text02 = TextMobject(<span class=\"string\">&quot;我却用它寻找光明。&quot;</span>)</span><br><span class=\"line\">        text03 = TextMobject(<span class=\"string\">&quot;顾城 《一代人》&quot;</span>)</span><br><span class=\"line\">        text_group = VGroup(text01, text02)</span><br><span class=\"line\">        text02.next_to(text01, DOWN)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(Write(text01))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(TransformFromCopy(text01, text02))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(Transform(text_group,text03))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>效果：<br><img data-src=\"/p/637d228f/test_cn.gif\" alt=\"顾城-《一代人》\"></p>\n<p><strong>注意事项：</strong></p>\n<p>这里 <strong>建议使用上面提到的MiKTeX</strong> ，在运行程序时，<strong>第一次最好联网进行</strong>，MiKTeX 会自动检查并弹出缺少的资源进行安装，比如一些包或者样式等等，缺少这些资源可能会导致 latex 转化格式失败，不支持中文等问题。</p>\n<p><img data-src=\"/p/637d228f/miss-package.png\" alt=\"Install missing resource\"></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>manim的资料比较少，基本上看着3b1b大佬的旧的项目代码以及阅读函数定义来学习创造。接下来尝试做一些小动画自娱自乐。</p>\n<p>ps.制作动画主要还是想象力，创造力。看3b1b的视频，每次都会说一句 nb。<del>真的nb!</del></p>\n<hr>\n<p>最近看到一些关于manim的中文资料，可以参考一下：</p>\n<ul>\n<li><a href=\"https://github.com/cai-hust/manim-tutorial-CN\">cai-hust&#x2F;manim-tutorial-CN</a></li>\n</ul>\n","categories":["manim"],"tags":["Python","manim"]},{"title":"manim安装配置指北（二）","url":"/p/36c1564c/","content":"<p>最近才发现 manim 已经有正式版本了 <code>1.0.0</code> 以上，目前最新是<code>1.1.0</code></p>\n<p>manim 的安装配置过程大大简化，在这里更新一下对于 <strong>manim V1.0.0 及以上版本</strong>的安装，以及如何配置 manim Latex支持中文等</p>\n<p>两年前写的<a href=\"/p/637d228f\">manim安装配置指北</a>是针对 <strong>manim V1.0.0 以下版本</strong>的安装配置</p>\n<p>希望 manim 的安装配置不再是劝退大家使用 manim 的门槛，想看到大家用 manim 制作出有意思的数学动画~</p>\n<span id=\"more\"></span>\n\n<h2 id=\"First-of-all\"><a href=\"#First-of-all\" class=\"headerlink\" title=\"First of all\"></a>First of all</h2><p>3b1b 出了<a href=\"https://3b1b.github.io/manim/\">manim官方教程</a>🎉</p>\n<p>里面有关于manim的安装配置和相关动画的制作教程，推荐！</p>\n<p>下面是对<a href=\"https://3b1b.github.io/manim/getting_started/installation.html\">manim官方安装教程</a>的一些补充以及讲一讲如何在manim中使用中文。</p>\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>manim 是运行在 Python 3.6 以上的环境中（官方推荐使用 Python 3.8 版本）</p>\n<h3 id=\"System-requirements\"><a href=\"#System-requirements\" class=\"headerlink\" title=\"System requirements\"></a>System requirements</h3><ol>\n<li><p>安装 FFmpeg<br>这个3b1b在README里给了一个 <a href=\"https://www.wikihow.com/Install-FFmpeg-on-Windows\">教程</a>，安排的明明白白，这里不再赘述。<br> 终端执行以下命令，出现版本信息说明安装配置成功</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 OpenGL</p>\n<blockquote>\n<p> 因为 OpenGL 包含在 python 包 PyOpenGL 中)，所以通过 pip 安装 PyOpenGL 即可</p>\n</blockquote>\n <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install PyOpenGL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LaTeX （可选，如果需要用到 LaTex 的话）</p>\n<blockquote>\n<p>PS. 以前官方推荐使用 <a href=\"https://miktex.org/download\">MiKTeX</a>，安装方式可以参考<a href=\"/p/637d228f/#System-requirements\">System requirements</a>这节里关于LaTex的安装。</p>\n</blockquote>\n<p> 现在官方推荐使用 <a href=\"https://tug.org/texlive/\">TeXLive-full</a>，安装方式根据<a href=\"https://tug.org/texlive/acquire-netinstall.html\">texlive页面的说明</a>下载安装就行。</p>\n<p> 一开始我用的是 MiKTeX，写文章的时候看到有推荐用 TeXLive-full，使用体验没有 MiKTeX 好，因为安装的时候一直在下载各种宏包，感觉是要把全部宏包缓存到本地😢<br> <del>到文章写完我还没用上 TeXLive，还在下宏包（安装目录已经 2.77G了）…</del><br> 最后下完在<code>texmf-dist</code>目录下各种各样宏包一共有<code>6.8G</code>😶</p>\n<blockquote>\n<p>个人推荐使用 MiKTeX</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"安装-manim\"><a href=\"#安装-manim\" class=\"headerlink\" title=\"安装 manim\"></a>安装 manim</h3><p>最简单的方式就是直接通过pip安装<code>manimgl</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install manimgl</span><br></pre></td></tr></table></figure>\n\n<p>还可以通过源码来使用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/3b1b/manim.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> manim</span><br><span class=\"line\">pip install -e .</span><br><span class=\"line\">manimgl example_scenes.py OpeningManimExample</span><br></pre></td></tr></table></figure>\n\n<p>或者通过 Anaconda 创建一个 manim 的虚拟环境：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/3b1b/manim.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> manim</span><br><span class=\"line\">conda create -n manim python=3.8</span><br><span class=\"line\">conda activate manim</span><br><span class=\"line\">pip install -e .</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置manim支持中文\"><a href=\"#配置manim支持中文\" class=\"headerlink\" title=\"配置manim支持中文\"></a>配置manim支持中文</h2><p>在之前的文章<a href=\"/p/637d228f/#%E9%85%8D%E7%BD%AEmanim%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87\">manim安装配置指北</a>里，旧版本的 manim 是在<code>\\manim-master\\manimlib\\constants.py</code>直接修改：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- TEX_USE_CTEX=False</span></span><br><span class=\"line\"><span class=\"addition\">+ TEX_USE_CTEX=True</span></span><br></pre></td></tr></table></figure>\n\n<p>而对于最新版本，出现了配置文件的东西，可以在<code>custom_config.yml</code>中进行配置。</p>\n<blockquote>\n<p>参考manim官方教程里的<a href=\"https://3b1b.github.io/manim/documentation/custom_config.html\">custom_config</a></p>\n</blockquote>\n<p>复制一份<code>manim/manimlib/default_config.yml</code>放在程序目录下，然后重命名为<code>custom_config.yml</code>，然后修改即可使用中文：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">tex:</span><br><span class=\"line\"><span class=\"deletion\">-  executable: &quot;latex&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+  executable: &quot;xelatex -no-pdf&quot;</span></span><br><span class=\"line\"><span class=\"deletion\">-  template_file: &quot;tex_template.tex&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+  template_file: &quot;ctex_template.tex&quot;</span></span><br><span class=\"line\"><span class=\"deletion\">-  intermediate_filetype: &quot;dvi&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+  intermediate_filetype: &quot;xdv&quot;</span></span><br><span class=\"line\">  text_to_replace: &quot;[tex_expression]&quot;</span><br><span class=\"line\">  # For ctex, use the following configuration</span><br><span class=\"line\">  # executable: &quot;xelatex -no-pdf&quot;</span><br><span class=\"line\">  # template_file: &quot;ctex_template.tex&quot;</span><br><span class=\"line\">  # intermediate_filetype: &quot;xdv&quot;</span><br></pre></td></tr></table></figure>\n\n\n<p>添加了custom_config.yml的目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">manim/</span><br><span class=\"line\">├── manimlib/ (这个目录是手动安装 manim 才有的，通过 pip 安装 manimgl是没有的)</span><br><span class=\"line\">│   ├── animation/</span><br><span class=\"line\">│   ├── ...</span><br><span class=\"line\">│   ├── default_config.yml</span><br><span class=\"line\">│   └── window.py</span><br><span class=\"line\">├── output/</span><br><span class=\"line\">├── code.py</span><br><span class=\"line\">└── custom_config.yml</span><br></pre></td></tr></table></figure>\n\n<p>测试一下中文，新版本使用<code>Tex</code>和<code>TexText</code>代替了<code>TexMobject</code>对象（<a href=\"https://github.com/3b1b/videos/commit/24a2001c6b591c2d272cc3c6f8b872ac3a6b8c22\">TexMobject -&gt; Tex and TextMobject -&gt; TexText</a>）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_cn</span>(<span class=\"title class_ inherited__\">Scene</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        text01 = TexText(<span class=\"string\">&quot;黑夜给了我一双黑色的眼睛，&quot;</span>)</span><br><span class=\"line\">        text02 = TexText(<span class=\"string\">&quot;我却用它寻找光明。&quot;</span>)</span><br><span class=\"line\">        text03 = TexText(<span class=\"string\">&quot;顾城 《一代人》&quot;</span>)</span><br><span class=\"line\">        text_group = VGroup(text01, text02)</span><br><span class=\"line\">        text02.next_to(text01, DOWN)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(Write(text01))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(TransformFromCopy(text01, text02))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.play(Transform(text_group,text03))</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.wait(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>运行:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">manimgl test.py test_cn</span><br></pre></td></tr></table></figure>\n\n<p>之前写的测试用例要稍微改一下，我发现将<code>TexMobject</code>改成<code>TexText</code>可以，而改成<code>Tex</code>不行，中文在渲染生成的时候会出现乱码。然后看了一下源码里<code>Tex</code>和<code>TexText</code>不一样的地方：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TexText</span>(<span class=\"title class_ inherited__\">Tex</span>):</span><br><span class=\"line\">    CONFIG = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;math_mode&quot;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;arg_separator&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Tex</code>和<code>TexText</code>都是继承了<code>SingleStringTex</code>对象，<code>TexText</code> 在配置（<code>CONFIG</code>）中关闭了 <code>math_mode</code>，将传入的参数在<code>get_tex_file_body</code>方法中当成文本处理，而不转换成数学公式格式处理：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_tex_file_body</span>(<span class=\"params\">self, tex_string</span>):</span><br><span class=\"line\">    new_tex = <span class=\"variable language_\">self</span>.get_modified_expression(tex_string)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.math_mode:</span><br><span class=\"line\">        new_tex = <span class=\"string\">&quot;\\\\begin&#123;align*&#125;\\n&quot;</span> + new_tex + <span class=\"string\">&quot;\\n\\\\end&#123;align*&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    new_tex = <span class=\"variable language_\">self</span>.alignment + <span class=\"string\">&quot;\\n&quot;</span> + new_tex</span><br><span class=\"line\"></span><br><span class=\"line\">    tex_config = get_tex_config()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tex_config[<span class=\"string\">&quot;tex_body&quot;</span>].replace(</span><br><span class=\"line\">        tex_config[<span class=\"string\">&quot;text_to_replace&quot;</span>],</span><br><span class=\"line\">        new_tex</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>大部分和之前写的差不多，配置 manim 支持中文的方式有一点变化，主要是在于配置文件上。稍微提一下是怎么解决的：</p>\n<p>当时看文档注意到有 custom_config 这个类似自定义配置的东西，一开始按原来的方法想要修改<code>constant.py</code>来解决，发现没有这个文件了，然后猜测 3b1b 可能把这部分的东西放到了 custom_config 部分，然后去找默认的配置<code>default_config.yml</code> 查看配置，在其中看到了关于 tex 模板的配置，看到熟悉的<code>tex_template</code>，在其下方有关于切换到 ctex 的一些配置说明，根据提示修改就可以。</p>\n<p>再次推荐 3b1b 的 <a href=\"https://3b1b.github.io/manim/\">manim官方教程</a>🎉</p>\n","categories":["manim"],"tags":["Python","manim"]},{"title":"饥荒服务器搭建指北","url":"/p/1af762f2/","content":"<p>记录搭建过程以及遇到的一些问题</p>\n<span id=\"more\"></span>\n\n<h2 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h2><p>这次使用的服务器是CentOS，安装所需依赖。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级包以及内核版本</span></span><br><span class=\"line\">yum -y update</span><br><span class=\"line\"><span class=\"comment\"># RedHat/CentOS 64 位</span></span><br><span class=\"line\">yum -y install glibc.i686 libstdc++.i686 libcurl4-gnutls-dev.i686</span><br></pre></td></tr></table></figure>\n\n<p>其他Linux系统可以参考<a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=590565473\">How to setup dedicated server with cave on Linux</a></p>\n<h2 id=\"安装SteamCMD\"><a href=\"#安装SteamCMD\" class=\"headerlink\" title=\"安装SteamCMD\"></a>安装SteamCMD</h2><p>最好新建一个用户来运行 SteamCMD，如果直接用 root 用户运行游戏服务端的话可能会有一定的安全隐患。在 root 权限下使用以下命令来创建一个新用户来运行游戏：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd -m steam</span><br><span class=\"line\"><span class=\"comment\"># 切换用户</span></span><br><span class=\"line\">su - steam</span><br></pre></td></tr></table></figure>\n\n<p>安装 SteamCMD ：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建目录存放SteamCMD</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/steamcmd &amp;&amp; <span class=\"built_in\">cd</span> ~/steamcmd</span><br><span class=\"line\"><span class=\"comment\"># 下载SteamCMD文件</span></span><br><span class=\"line\">wget <span class=\"string\">&quot;https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -xvzf steamcmd_linux.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 登录安装退出</span></span><br><span class=\"line\">./steamcmd.sh +login anonymous +force_install_dir /home/steam/dstserver +app_update 343050 validate +quit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检查依赖\"><a href=\"#检查依赖\" class=\"headerlink\" title=\"检查依赖\"></a>检查依赖</h2><p>通过运行饥荒服务器检查缺少的依赖：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/dstserver/bin</span><br><span class=\"line\">./dontstarve_dedicated_server_nullrenderer</span><br></pre></td></tr></table></figure>\n\n<p>我遇到了一个依赖错误，关于<code>libcurl-gnutls.so.4</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">error while loading shared libraries: libcurl-gnutls.so.4: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n\n<p>可能是有些源里可能没有<code>libcurl4-gnutls-dev</code>或者系统没有搜索到该文件。<br><strong>解决办法</strong>：</p>\n<p>可以直接安装<code>libcurl</code>然后做个软链接通过软连接的形式</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s libcurl.so.4 libcurl-gnutls.so.4</span><br></pre></td></tr></table></figure>\n\n<p>或者直接复制一个过去：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/lib/libcurl.so.4 ~/dstserver/bin/lib32/libcurl-gnutls.so.4</span><br></pre></td></tr></table></figure>\n\n<p>遇到关于<code>libstdc++.so.6</code>的问题可以参考<a href=\"https://www.vincehut.top/?p=192\">[重写]饥荒服务器搭建全指南</a></p>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><p>建议直接在Klei网站上操作，访问<a href=\"https://accounts.klei.com/account/game/list\">https://accounts.klei.com/account/game/list</a></p>\n<p><img data-src=\"/p/1af762f2/dst-config.png\"></p>\n<p>在此页面中配置服务器的名称，密码，游戏模式等，配置完成后下载配置上传到服务器的<code>~/.klei/DoNotStarveTogether</code>目录下。</p>\n<p>启动服务器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动世界服务器</span></span><br><span class=\"line\">./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_Name -shard Master</span><br><span class=\"line\"><span class=\"comment\"># 启动洞穴服务器</span></span><br><span class=\"line\">./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_Name -shard Caves</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mod-配置\"><a href=\"#Mod-配置\" class=\"headerlink\" title=\"Mod 配置\"></a>Mod 配置</h2><p>使用 Steam 客户端打开饥荒联机版的游戏，创建一个世界，添加并启用的所需 Mod，配置完后进入世界再退掉。然后打开世界存档位置(Windows)<code>Documents\\Klei\\DoNotStarveTogether\\Cluster_Name\\Master</code>，将本地的<code>modoverrides.lua</code>文件内容上传到服务器的<code>.klei/DoNotStarveTogether\\Cluster_Name\\Master</code>目录。</p>\n<p>然后在<code>~/steam/dstserver/mods</code>中编辑<code>dedicated_server_mods_setup.lua</code>(没有的话新建一个)，添加以下内容，数字是 Steam 创意工坊里Mod的 id，可以在Mod主页url里找到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ServerModSetup(&quot;758532836&quot;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里有一个小技巧，可以打开上面生成的<code>modoverrides.lua</code>，简单用正则<code>\\d&#123;9&#125;</code>匹配id，然后编辑器多光标编辑成<code>ServerModSetup(&quot;id&quot;)</code>这样的格式。</p>\n</blockquote>\n<p>然后重启饥荒服务器，安装Mod即可。</p>\n<h2 id=\"脚本启动与更新\"><a href=\"#脚本启动与更新\" class=\"headerlink\" title=\"脚本启动与更新\"></a>脚本启动与更新</h2><p>饥荒服务器版本和用户版本不一致会出现搜索不到服务器的问题。解决办法当然是更新啦，重复之前的步骤：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/steam/steamcmd</span><br><span class=\"line\">./steamcmd.sh +login anonymous +force_install_dir /home/steam/dstserver +app_update 343050 validate +quit</span><br></pre></td></tr></table></figure>\n\n<p>自动启动脚本，使用Tmux后台运行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 切换用户</span></span><br><span class=\"line\">su - steam</span><br><span class=\"line\"><span class=\"comment\"># 切换到执行文件所在目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/dstserver/bin</span><br><span class=\"line\"><span class=\"comment\"># 关闭 dst 这个 session ，使得这个脚本也可以作为重启 dst 使用</span></span><br><span class=\"line\">tmux kill-session -t dst</span><br><span class=\"line\"><span class=\"comment\"># 新建名为 minecraft 的会话，然后分离会话</span></span><br><span class=\"line\">tmux new -s dst -d</span><br><span class=\"line\"><span class=\"comment\"># 重命名会话 minecraft 的窗口为 &quot;start&quot;</span></span><br><span class=\"line\">tmux rename-window -t <span class=\"string\">&quot;dst&quot;</span> start</span><br><span class=\"line\"><span class=\"comment\"># 发送指令到会话 minecraft 的 start 窗口，执行启动命令</span></span><br><span class=\"line\">tmux send -t <span class=\"string\">&quot;dst:start&quot;</span> <span class=\"string\">&quot;./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_Name -shard Master&quot;</span> Enter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实饥荒服务器就是步骤多了一点，唯一比较坑的就是依赖问题。然后脚本自动化解决启动麻烦的问题以及更新问题。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://printempw.github.io/deploy-dont-starve-together-dedicated-server/#0x01-%E4%BA%8B%E5%89%8D%E5%87%86%E5%A4%87\">饥荒联机版独立服务器搭建踩坑记录</a></li>\n<li><a href=\"https://www.vincehut.top/index.php/2020/03/14/%e9%87%8d%e5%86%99%e9%a5%a5%e8%8d%92%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%90%ad%e5%bb%ba%e5%85%a8%e6%8c%87%e5%8d%97/\">[重写]饥荒服务器搭建全指南</a></li>\n<li><a href=\"https://forums.kleientertainment.com/forums/topic/64441-dedicated-server-quick-setup-guide-linux/\">Dedicated Server Quick Setup Guide - Linux</a></li>\n<li><a href=\"http://steamcommunity.com/sharedfiles/filedetails/?id=590565473\">How to setup dedicated server with cave on Linux</a></li>\n</ul>\n<blockquote class=\"blockquote-center\">\n<p>毕业季，毕业快乐~</p>\n\n</blockquote>\n","categories":["日常","游戏"],"tags":["Linux","Game","CentOS","DST","Tmux"]},{"title":"Linux搭建Minecraft/Terraria服务器","url":"/p/c3f443de/","content":"<p>Linux 上搭建Minecraft及Terraria服务器，使用脚本自动化启动及配置。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"搭建Minecraft服务器\"><a href=\"#搭建Minecraft服务器\" class=\"headerlink\" title=\"搭建Minecraft服务器\"></a>搭建Minecraft服务器</h2><p>首先，要配置<code>Java</code>环境，可以参考之前写的<a href=\"https://umm.js.org/p/a440bc27/\">Ubuntu 配置 Java 环境</a>，其他Linux发行版上操作大同小异。</p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ol>\n<li><p>下载<code>minecraft-server.jar</code></p>\n<blockquote>\n<p>下载地址：<a href=\"https://www.minecraft.net/en-us/download/server/\">https://www.minecraft.net/en-us/download/server/</a></p>\n</blockquote>\n</li>\n<li><p>第一次运行: <code>java -Xmx1024M -Xms1024M -jar &#123;jar name&#125; nogui</code>获得错误并退出，同时生成<code>eula.txt</code>，其中1024M是给其分配的内存大小，可以根据服务器内存大小自行调整。</p>\n</li>\n<li><p>修改 <code>eula.txt</code>，同意协议</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- eula=false</span></span><br><span class=\"line\"><span class=\"addition\">+ eula=true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若出现服务器无法连接的情况，修改<code>server.properties</code></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- online-mode=true</span></span><br><span class=\"line\"><span class=\"addition\">+ online-mode=false</span></span><br></pre></td></tr></table></figure>\n\n<p>关于minecraft的相关配置都在<code>server.properties</code>进行设置。关于各项参数的含义可参考<a href=\"https://minecraft-zh.gamepedia.com/Server.properties\">server.properties</a></p>\n</li>\n</ol>\n<h3 id=\"脚本自动化\"><a href=\"#脚本自动化\" class=\"headerlink\" title=\"脚本自动化\"></a>脚本自动化</h3><p>这里使用的是 tmux，后面有介绍一些命令和快捷键。这里直接上脚本：</p>\n<h4 id=\"启动-重启服务端\"><a href=\"#启动-重启服务端\" class=\"headerlink\" title=\"启动&#x2F;重启服务端\"></a>启动&#x2F;重启服务端</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭 minecraft 这个 session ，使得这个脚本也可以作为重启 mc 使用</span></span><br><span class=\"line\">tmux kill-session -t minecraft</span><br><span class=\"line\"><span class=\"comment\"># 新建名为 minecraft 的会话，然后分离会话</span></span><br><span class=\"line\">tmux new -s minecraft -d</span><br><span class=\"line\"><span class=\"comment\"># 重命名会话 minecraft 的窗口为 &quot;start&quot;</span></span><br><span class=\"line\">tmux rename-window -t <span class=\"string\">&quot;minecraft&quot;</span> start</span><br><span class=\"line\"><span class=\"comment\"># 这里的 path 修改成 server.jar 所在目录</span></span><br><span class=\"line\">tmux send -t <span class=\"string\">&quot;minecraft:start&quot;</span> <span class=\"string\">&quot;cd path&quot;</span> Enter</span><br><span class=\"line\"><span class=\"comment\"># 发送指令到会话 minecraft 的 start 窗口，执行启动命令</span></span><br><span class=\"line\">tmux send -t <span class=\"string\">&quot;minecraft:start&quot;</span> <span class=\"string\">&quot;java -Xms1024M -Xmx1536M -jar server.jar nogui&quot;</span> Enter</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关闭服务端\"><a href=\"#关闭服务端\" class=\"headerlink\" title=\"关闭服务端\"></a>关闭服务端</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 关闭 minecraft 这个 session ，使得这个脚本也可以作为重启 mc 使用</span></span><br><span class=\"line\">tmux kill-session -t minecraft</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>如果使用本地开服，可以使用<code>ngrok</code>或者其他内网穿透服务获得公网地址，但网络连接效果不佳。</p>\n<ul>\n<li><p>使用<code>ngrok</code>创建<code>tcp</code>连接映射（mc默认使用25565端口）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ngrok tcp 25565</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获得地址，类似<code>tcp://0.tcp.ngrok.io:17960</code></p>\n</li>\n<li><p>在mc里输入服务器地址：<code>0.tcp.ngrok.io:17960</code>即可</p>\n</li>\n</ul>\n<blockquote>\n<p>参考：<a href=\"https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/%E6%9E%B6%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8\">minecraft教程&#x2F;架设服务器</a></p>\n</blockquote>\n<h2 id=\"搭建Terraria服务器\"><a href=\"#搭建Terraria服务器\" class=\"headerlink\" title=\"搭建Terraria服务器\"></a>搭建Terraria服务器</h2><h3 id=\"安装使用-1\"><a href=\"#安装使用-1\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><ul>\n<li><p>下载<code>http://terraria.org/server/terraria-server-1353.zip</code></p>\n</li>\n<li><p>修改运行文件权限：<code>chmod u+x TerrariaServer*</code></p>\n</li>\n<li><p>运行服务端程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./TerrariaServer.bin.x86_64</span><br></pre></td></tr></table></figure>\n\n<p>然后会让你新建&#x2F;选择世界，以及配置限制最大玩家数等，基本上根据提示走就可以了。</p>\n</li>\n</ul>\n<h3 id=\"脚本自动化-1\"><a href=\"#脚本自动化-1\" class=\"headerlink\" title=\"脚本自动化\"></a>脚本自动化</h3><p>当然，还是自动化脚本方便点。</p>\n<p>创建一个terraria配置文件<code>terraria-conf</code>(配置文件对文件名没有要求)</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">maxplayers</span>=<span class=\"string\">6</span></span><br><span class=\"line\"><span class=\"attr\">port</span>=<span class=\"string\">13579</span></span><br><span class=\"line\"><span class=\"comment\"># 设置密码</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">your-pwd</span></span><br><span class=\"line\"><span class=\"attr\">world</span>=<span class=\"string\">/root/.local/share/Terraria/Worlds/sohot.wld</span></span><br><span class=\"line\"><span class=\"attr\">worldpath</span>=<span class=\"string\">/root/.local/share/Terraria/Worlds/</span></span><br><span class=\"line\"><span class=\"comment\"># 开启端口自动转发</span></span><br><span class=\"line\"><span class=\"attr\">upnp</span>=<span class=\"string\">1</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<blockquote>\n<p>设置世界地图路径的时候，用<code>~</code>代替<code>root</code>会出问题，找不到文件所在，这里写完整的绝对路径</p>\n</blockquote>\n<p>然后使用脚本自动化启动配置terraria服务器。脚本内容如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭 terraria 这个 session ，使得这个脚本也可以作为重启 terraria 使用</span></span><br><span class=\"line\">tmux kill-session -t terraria</span><br><span class=\"line\"><span class=\"comment\"># 新建名为 terraria 的会话，然后分离会话</span></span><br><span class=\"line\">tmux new -s terraria -d</span><br><span class=\"line\"><span class=\"comment\"># 重命名会话 terraria 的窗口为 &quot;start&quot;</span></span><br><span class=\"line\">tmux rename-window -t <span class=\"string\">&quot;terraria&quot;</span> start</span><br><span class=\"line\"><span class=\"comment\"># 这里的 path 修改成 执行文件 所在目录</span></span><br><span class=\"line\">tmux send -t <span class=\"string\">&quot;terraria:start&quot;</span> <span class=\"string\">&quot;cd ~/terraria/1403/Linux/&quot;</span> Enter</span><br><span class=\"line\"><span class=\"comment\"># 发送指令到会话 terraria 的 start 窗口，执行启动命令</span></span><br><span class=\"line\">tmux send -t <span class=\"string\">&quot;terraria:start&quot;</span> <span class=\"string\">&quot;./TerrariaServer.bin.x86_64 -config ~/terraria/terraria-conf&quot;</span> Enter</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>默认下，泰拉瑞亚世界文件保存在</p>\n<ul>\n<li>Linux：<code>~/.local/share/Terraria</code></li>\n<li>MacOS是<code>~/Library/Application Support/Terraria/Worlds</code></li>\n<li>Windows：<code>C:\\Users\\&#123;username&#125;\\Documents\\My Games\\Terraria\\Worlds</code></li>\n</ul>\n<p>可以将本地开服的世界文件存放到服务器对应位置，然后继续玩之前的图。</p>\n<p>ps. Windows下Terraria用户文件存放在<code>C:\\Users\\&#123;username&#125;\\Documents\\My Games\\Terraria\\Players</code></p>\n<p>参考：<a href=\"https://terraria-zh.gamepedia.com/%E6%8C%87%E5%8D%97:%E5%BB%BA%E7%AB%8B%E6%B3%B0%E6%8B%89%E7%91%9E%E4%BA%9A%E6%9C%8D%E5%8A%A1%E5%99%A8\">指南:建立泰拉瑞亚服务器</a></p>\n<h2 id=\"使用Tmux同时运行两个服务\"><a href=\"#使用Tmux同时运行两个服务\" class=\"headerlink\" title=\"使用Tmux同时运行两个服务\"></a>使用Tmux同时运行两个服务</h2><p>这里的两个指的是mc服务以及terraria服务，当然可以更多。这里顺带记录下tmux的相关操作。</p>\n<blockquote>\n<p>维基百科：<strong>tmux</strong> 是一个优秀的<a href=\"https://zh.wikipedia.org/w/index.php?title=%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8&action=edit&redlink=1\">终端复用器</a>类<a href=\"https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6\">自由软件</a>，功能类似 <a href=\"https://zh.wikipedia.org/wiki/GNU_Screen\">GNU Screen</a>，但使用 <a href=\"https://zh.wikipedia.org/wiki/BSD%E8%AE%B8%E5%8F%AF%E8%AF%81\">BSD 许可</a>发布。用户可以通过 tmux 在一个<a href=\"https://zh.wikipedia.org/wiki/%E7%B5%82%E7%AB%AF\">终端</a>内管理多个分离的会话，窗口及面板，对于同时使用多个<a href=\"https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C\">命令行</a>，或多个任务时非常方便。</p>\n</blockquote>\n<p>tmux有点像Windows上的cmder，tmux可以在shell里面开很多个”窗口“执行命令。</p>\n<h3 id=\"安装Tmux\"><a href=\"#安装Tmux\" class=\"headerlink\" title=\"安装Tmux\"></a>安装Tmux</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install tmux</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用快捷方式\"><a href=\"#常用快捷方式\" class=\"headerlink\" title=\"常用快捷方式\"></a>常用快捷方式</h3><p>默认<code>crtl + b</code>触发：（<code>ctrl + b</code> - <code>o</code>表示同时按住<code>ctrl + b</code>，然后输入<code>o</code>，区分大小写）</p>\n<ul>\n<li><p>切分窗口：</p>\n<ul>\n<li>水平切分窗口：<code>ctrl + b</code> - <code>%</code></li>\n<li>垂直切分窗口：<code>ctrl + b</code> - <code>&quot;</code></li>\n<li>关闭当前切分窗口：<code>ctrl + d</code></li>\n<li>切换切分窗口：<code>ctrl + b</code> - <code>o</code></li>\n<li>调整切分窗口高度&#x2F;宽度：<code>ctrl + b</code> - <code>ctrl + ↑↓←→</code></li>\n</ul>\n</li>\n<li><p>新建窗口</p>\n<ul>\n<li>新建窗口：<code>ctrl + b</code> - <code>c</code></li>\n<li>回到前一个窗口：<code>ctrl + b</code> - <code>p</code></li>\n<li>切换下一个窗口：<code>ctrl + b</code> - <code>n</code></li>\n<li>关闭当前窗口（分离会话）：<code>ctrl + b</code> - <code>d</code></li>\n<li>以交互方式选择并附加到会话：<code>ctrl + b</code> - <code>s</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li><p>新建名为<code>test</code>的会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmux new -s <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmux <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmux kill-session -t 会话名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联&#x2F;切换会话</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmux attach -t 会话名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发送命令到 tmux 窗口执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命名当前窗口为 &quot;start&quot;</span></span><br><span class=\"line\">tmux rename-window -t <span class=\"string\">&quot;minecraft&quot;</span> start</span><br><span class=\"line\"><span class=\"comment\"># 发送命令到会话minecraft的start窗口执行 top 命令</span></span><br><span class=\"line\">tmux send -t <span class=\"string\">&quot;minecraft:start&quot;</span> <span class=\"string\">&quot;top&quot;</span> Enter</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>玩了一波自己搭的服，很舒服😀（冲冲冲）</p>\n<p>tmux很方便的实现多任务，很香🤣</p>\n<p>一直以来，对Linux有点懵逼（觉得很难），也没有很懂「Linux下，一切即文件」的概念，但自己折腾一波，好像有点懂了，对于Linux操作及命令，只能说熟能生巧吧。</p>\n","categories":["日常","游戏"],"tags":["Linux","Game","Tmux","Debian","Minecraft","Terraria"]},{"title":"RocketMQ 安装使用指北(Windows)","url":"/p/ff7236e0/","content":"<p>RocketMQ 官方推荐在 Linux&#x2F;Unix&#x2F;Mac 下使用，文档给出的 <a href=\"https://rocketmq.apache.org/docs/quick-start/\">Quick Start</a> 没有关于 Windows 的。<br>Windows 下使用还是有几多坑的，记录一下</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>下载RocketMQ 二进制文件</p>\n<ul>\n<li>官网：<a href=\"https://rocketmq.apache.org/\">https://rocketmq.apache.org/</a></li>\n<li>Github：<a href=\"https://github.com/apache/rocketmq/releases2\">https://github.com/apache/rocketmq/releases2</a>.</li>\n</ul>\n</li>\n<li><p>创建系统变量&#x2F;用户变量</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">变量名</th>\n<th align=\"center\">变量值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ROCKETMQ_HOME</td>\n<td align=\"center\">RocketMQ的解压目录(<code>...\\rocketmq-all-4.5.2-bin-release</code>)</td>\n</tr>\n</tbody></table>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>进入 <code>...\\rocketmq-all-4.5.2-bin-release\\bin</code>，使用命令行进行启动，<strong>弹出的窗口不要关闭</strong>。</p>\n<ol>\n<li><p>启动 <code>nameserver</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start mqnamesrv.cmd</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>建议使用 <strong>JDK 8</strong>，之前用的12，配置一直有问题（如下），Github 相关 issue 里也有人反映在 JDK 9 出现类似问题。</p>\n<p>ps. 在  JDK 9+ 环境下，JDK 对 JVM 部分做了调整，感觉 RocketMQ 提供的配置是基于 JDK 8 的</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated <span class=\"keyword\">in</span> version 9.0 and will likely be removed <span class=\"keyword\">in</span> a future release.</span><br><span class=\"line\">Unrecognized VM option <span class=\"string\">&#x27;UseCMSCompactAtFullCollection&#x27;</span></span><br><span class=\"line\">Error: Could not create the Java Virtual Machine.</span><br><span class=\"line\">Error: A fatal exception has occurred. Program will <span class=\"built_in\">exit</span>.</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>启动 Broker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"配置插件（rocketmq-console）\"><a href=\"#配置插件（rocketmq-console）\" class=\"headerlink\" title=\"配置插件（rocketmq console）\"></a>配置插件（rocketmq console）</h2><blockquote>\n<p>类似 RabbitMQ 的 Web Management</p>\n</blockquote>\n<ul>\n<li><p>进入<code>...\\rocketmq-externals\\rocketmq-console\\src\\main\\resources\\application.properties</code>搜索相关配置项进行修改：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改 web 管理服务端口，访问localhost:&lt;server.port&gt; 打开管理页面</span></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">8080</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 namesrv（注册中心）的地址</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.config.namesrvAddr</span>=<span class=\"string\">127.0.0.1:9876</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>namesrvAddr </code>默认是 localhost:9876，<strong>但配置里留空了，要自己填写</strong>。</p>\n<p>否则会出问题：<code>org.apache.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;null&gt; failed</code></p>\n</blockquote>\n</li>\n<li><p>使用 maven 打包为<code>rocketmq-console-ng-1.0.1.jar</code>，具体步骤：</p>\n<ul>\n<li>cmd 进入<code>...\\rocketmq-externals\\rocketmq-console</code></li>\n<li>执行 <code>mvn clean package -Dmaven.test.skip=true</code></li>\n<li>jar 包位于目录 <code>...\\rocketmq-externals\\rocketmq-console\\target</code></li>\n</ul>\n</li>\n<li><p>运行插件（先运行RocketMQ）</p>\n<ul>\n<li><code>java -jar rocketmq-console-ng-1.0.1.jar</code></li>\n<li>web 管理页面 <code>localhost:8080</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>遇到类似这样的Error：<code>No topic route info in name server for the topic: %RETRY%FILTERSRV_CONSUMER</code></p>\n<p>解决办法：在管理页面的消费者 tab 中把它删了</p>\n<p>参考：<a href=\"http://laciagin.me/2017/12/07/RocketMQ%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%88%A8%E5%9D%91/\">RocketMQ搭建及刨坑</a></p>\n</blockquote>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>在搞这个的时候，我一直在想 Rabbit 的好 …</p>\n<blockquote class=\"blockquote-center\">\n<p>十五的月亮十六圆</p>\n<p>中秋快乐</p>\n\n</blockquote>\n","categories":["Java Web","MQ"],"tags":["Windows","Software","RocketMQ"]},{"title":"Spring 之 ActiveMQ 学习","url":"/p/a0b6ba05/","content":"<p>记录一下对ActiveMQ的理解以及使用Spring整合。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"消息队列简介\"><a href=\"#消息队列简介\" class=\"headerlink\" title=\"消息队列简介\"></a>消息队列简介</h2><p><strong>Q: ActiveMQ是什么？</strong></p>\n<blockquote><p>Apache ActiveMQ™ is the most popular and powerful open source messaging and <a href=\"http://activemq.apache.org/enterprise-integration-patterns\">Integration Patterns</a> server.</p>\n<p>Apache ActiveMQ is fast, supports many <a href=\"http://activemq.apache.org/cross-language-clients\">Cross Language Clients and Protocols</a>, comes with easy to use <a href=\"http://activemq.apache.org/enterprise-integration-patterns\">Enterprise Integration Patterns</a> and many <a href=\"http://activemq.apache.org/features\">advanced features</a> while fully supporting <a href=\"http://java.sun.com/products/jms/\">JMS 1.1</a> and J2EE 1.4. Apache ActiveMQ is released under the <a href=\"http://www.apache.org/\">Apache</a> <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">2.0 License</a></p>\n<footer><strong>官方介绍</strong><cite><a href=\"http://activemq.apache.org/components/classic/\">activemq.apache.org/components/classic</a></cite></footer></blockquote>\n\n<p><br/>Apache ActiveMQ™是最流行和最强大的<strong>开源消息传递</strong>和集成模式服务器。<br>Apache ActiveMQ <strong>速度很快</strong>，<strong>支持许多跨语言</strong>客户端和协议，具有易于使用的企业集成模式和许多高级特性，同时<strong>完全支持 JMS 1.1和 J2EE 1.4</strong>。 Apache ActiveMQ 是在 Apache 2.0许可协议下发布的。</p>\n<p><strong>Q: 消息队列是什么？有什么用？</strong><br>字面意思就是存放消息的队列，事实上也是这样。考虑一下使用场景就很好理解：</p>\n<p><img data-src=\"/p/a0b6ba05/001.png\" alt=\"图源:《大型网站技术架构》\"></p>\n<blockquote>\n<p>在不使用消息队列的时候，用户的请求数据直接写入数据库，在高并发的情况下数据库压力剧增，使得响应速度变慢。但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。– 参考《大型网站技术架构：核心原理与案例分析》</p>\n</blockquote>\n<p><img data-src=\"/p/a0b6ba05/002.png\" alt=\"图源:《大型网站技术架构》\"></p>\n<blockquote>\n<p>消息队列具有很好的削峰作用——即通过异步处理，将短时间高并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。在电子商务网站促销活动中，合理使用消息队列，可有效抵御促销活动刚开始大量涌入的订单对系统造成的冲击。 – 参考《大型网站技术架构：核心原理与案例分析》</p>\n</blockquote>\n<h2 id=\"Activate使用\"><a href=\"#Activate使用\" class=\"headerlink\" title=\"Activate使用\"></a>Activate使用</h2><p>在不使用Spring整合之前，标准 API 涉及到创建许多中间对象。 要发送消息，执行以下“ API”步骤:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ConnectionFactory-&gt;Connection-&gt;Session-&gt;MessageProducer-&gt;send</span><br></pre></td></tr></table></figure>\n\n<p>在 ConnectionFactory 和 Send 操作之间，创建并销毁了三个中间对象。</p>\n<p><img data-src=\"/p/a0b6ba05/jms-programmingModel.gif\" alt=\"jms-programmingModel\"></p>\n<blockquote>\n<p>图源：<a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/bnceh.html\">The Java EE 6 Tutorial</a></p>\n</blockquote>\n<h3 id=\"Using-Spring-JMS\"><a href=\"#Using-Spring-JMS\" class=\"headerlink\" title=\"Using Spring JMS\"></a>Using Spring JMS</h3><p>Jmstemplate 类是 JMS 核心包中的中心类。 它简化了 JMS 的使用，因为它在发送或同步接收消息时处理资源的创建和释放。</p>\n<blockquote><p><code>JmsTemplate</code> : Additionally, we have configured a <a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jms/core/JmsTemplate.html\">JmsTemplate</a> which provides an abstraction , hiding all the complexities of JMS communication. Without JmsTemplate, you will be forced to create <code>connections/sessions/MessageProducers/MessageConsumers</code> and catch all the nasty exception platform may throw. With JmsTemplate ,you get simple API’s to work with , and spring behind-the-scenes take care of all the JMS complexities. It takes care of creating a connection, obtaining a session, and finally sending [as well as synchronous receiving] of message. We will be using JmsTemplate for sending the message. Do note that JmsTemplate also provides possibilities for receiving message but that is synchronous[blocks the listening application], and usually not preferred when asynchronous communication is possible.</p>\n<footer><strong>WebSystique</strong><cite><a href=\"http://websystique.com/springmvc/spring-4-mvc-jms-activemq-annotation-based-example/\">websystique.com/springmvc/spring-4-mvc-jms-activemq-annotation-based-example</a></cite></footer></blockquote>\n\n<p><br/>JmsTemplate: 它提供了一个抽象，隐藏了 JMS 通信的所有复杂性。 如果没有 JmsTemplate，您将被迫创建连接 <code>session / Messageproducers / MessageConsumers</code>，并捕获可能抛出的所有讨厌的异常平台。 使用 JmsTemplate，您可以使用简单的 API，并在幕后处理所有的 JMS 复杂性。 它负责创建连接，获取会话，最后发送(以及同步接收)消息。 我们将使用 JmsTemplate 发送消息。 请注意，JmsTemplate 也提供了接收消息的可能性，但这是同步的(阻塞监听应用程序)，而且在可能进行的异步通信时通常不会首选。</p>\n<h3 id=\"程序清单\"><a href=\"#程序清单\" class=\"headerlink\" title=\"程序清单\"></a>程序清单</h3><blockquote>\n<p>以上，使用 Jmstemplate 可以简化整个消息队列的创建和使用过程，程序清单：</p>\n</blockquote>\n<h4 id=\"配置-Message-Config\"><a href=\"#配置-Message-Config\" class=\"headerlink\" title=\"配置 Message Config\"></a>配置 Message Config</h4><p>上面说到，Spring 简化了我们对消息队列中对象的创建，这里体现出来了，我们只需要关注<code>ConnectionFactory </code>和<code>JmsTemplate </code>，剩下的事情交给 Spring 来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessagingConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_BROKER_URL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">SendDes</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test-topic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ActiveMQConnectionFactory <span class=\"title function_\">connectionFactory</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个ActiveMQ连接工厂</span></span><br><span class=\"line\">        <span class=\"type\">ActiveMQConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveMQConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置代理地址</span></span><br><span class=\"line\">        connectionFactory.setBrokerURL(DEFAULT_BROKER_URL);</span><br><span class=\"line\">        <span class=\"comment\">// 设置受信任的包</span></span><br><span class=\"line\">        connectionFactory.setTrustedPackages(Arrays.asList(<span class=\"string\">&quot;org.js.umm&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> connectionFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JmsTemplate <span class=\"title function_\">jmsTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建一个Jms模板</span></span><br><span class=\"line\">        <span class=\"type\">JmsTemplate</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JmsTemplate</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置连接工厂</span></span><br><span class=\"line\">        template.setConnectionFactory(connectionFactory());</span><br><span class=\"line\">        <span class=\"comment\">// true--topic; false--queue(default)</span></span><br><span class=\"line\">        template.setPubSubDomain(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置默认的消息目的地址</span></span><br><span class=\"line\">        template.setDefaultDestinationName(SendDes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置MessgaeListener-Config\"><a href=\"#设置MessgaeListener-Config\" class=\"headerlink\" title=\"设置MessgaeListener Config\"></a>设置MessgaeListener Config</h4><p>消息监听配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableJms</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessagingListenerConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    ConnectionFactory connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultJmsListenerContainerFactory <span class=\"title function_\">jmsListenerContainerFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultJmsListenerContainerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultJmsListenerContainerFactory</span>();</span><br><span class=\"line\">        factory.setConnectionFactory(connectionFactory);</span><br><span class=\"line\">        <span class=\"comment\">// 设置factory的并发性</span></span><br><span class=\"line\"><span class=\"comment\">//        factory.setConcurrency(&quot;1-1&quot;);</span></span><br><span class=\"line\">        factory.setPubSubDomain(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h4><p>注册一个组件，给生产者发送消息调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendMessage</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    JmsTemplate jmsTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">messageSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        jmsTemplate.send(session -&gt; session.createTextMessage(<span class=\"string\">&quot;test message&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接收消息\"><a href=\"#接收消息\" class=\"headerlink\" title=\"接收消息\"></a>接收消息</h4><p>JmsListener注解进行消息异步监听，这样不会阻塞进程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveMessage</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JmsTemplate jmsTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ReceiveDes</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test-topic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@JmsListener(destination = ReceiveDes)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">(<span class=\"keyword\">final</span> TextMessage message)</span> <span class=\"keyword\">throws</span> JMSException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;get the test message: &quot;</span> + message.getText());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSend</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(TestSend.class);</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    SendMessage sendMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/send&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;Sending message...&quot;</span>);</span><br><span class=\"line\">        sendMessage.messageSend();</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问<code>localhost:8080/send</code>，控制台打印出日志以及发送的测试消息就ok了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>消息队列，简单使用不难，主要是了解「消息队列」这个概念。</p>\n<p>期间遇到的 bug 就是依赖冲突（具体表现为，tomcat启动时报错，war包无法打包部署到服务器），&#x2F;十分苦涩。第一次遇到，懵了，然后查了一波，是依赖的问题，然后 IDEA -&gt; Show Dependencies 查看冲突的包，Exclude 一下就解决了。</p>\n<p>心态要好，慢慢查问题，每一次bug也是积累经验的过程（喵喵喵）。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/bnceh.html\">The Java EE 6 Tutorial</a></li>\n<li><a href=\"http://activemq.apache.org/components/classic/\">ActiveMQ 官方介绍</a></li>\n<li><a href=\"http://websystique.com/springmvc/spring-4-mvc-jms-activemq-annotation-based-example/\">Websystique</a></li>\n<li>《大型网站技术架构：核心原理与案例分析》</li>\n</ol>\n","categories":["Java Web"],"tags":["Java","Spring","ActiveMQ"]},{"title":"Spring 之 Kafka学习","url":"/p/82f3be8d/","content":"<p>Kafka 结合 Spring 的学习和使用</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>Kafka 接触起来和之前的 RocketMQ 有点像，生产者发消息到Topic，然后消费者监听Topic并消费消息。</p>\n<ul>\n<li>topic：主题，消息通过主题进行分类</li>\n<li>partition：分区，一个主题下有若干个分区，Kafka 通过分区来实现数据冗余和伸缩性。</li>\n<li>broker：一个独立的 kafka 服务器称为 broker，broker 接收生产者发送来的消息，并为消息设置偏移量，提交到磁盘保存</li>\n</ul>\n<h2 id=\"Spring-for-Kafka\"><a href=\"#Spring-for-Kafka\" class=\"headerlink\" title=\"Spring for Kafka\"></a>Spring for Kafka</h2><p>Spring 中使用Kafka，主要是依赖，主题、生产者和消费者的配置</p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.kafka<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-kafka<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Topic-Config\"><a href=\"#Topic-Config\" class=\"headerlink\" title=\"Topic Config\"></a>Topic Config</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TopicConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;kafka.bootstrapAddress&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bootstrapAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> KafkaAdmin <span class=\"title function_\">kafkaAdmin</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; props = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// kafka 服务器地址</span></span><br><span class=\"line\">        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaAdmin</span>(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NewTopic <span class=\"title function_\">topic1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建 topic</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NewTopic</span>(<span class=\"string\">&quot;topicName&quot;</span>, <span class=\"number\">1</span>, (<span class=\"type\">short</span>) <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Q：为什么要添加一个叫 KafkaAdmin的Bean？</p>\n<p>A：因为KafkaAdmin会在Kafka中自动为 NewTopic 类型的 Bean 创建主题</p>\n<h3 id=\"Producer-Config\"><a href=\"#Producer-Config\" class=\"headerlink\" title=\"Producer Config\"></a>Producer Config</h3><p>生产者配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&#123;&quot;org.js.umm&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KafkaProducerConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;kafka.bootstrapAddress&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bootstrapAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ProducerFactory&lt;String, String&gt; <span class=\"title function_\">producerFactory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, Object&gt; configProps = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);</span><br><span class=\"line\">        <span class=\"comment\">// key / value 序列化方式</span></span><br><span class=\"line\">        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class=\"line\">        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultKafkaProducerFactory</span>&lt;&gt;(configProps);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> KafkaTemplate&lt;String, String&gt; <span class=\"title function_\">kafkaTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KafkaTemplate</span>&lt;&gt;(producerFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Q：ProducerFactory 的作用<br>A：configure a <a href=\"https://docs.spring.io/spring-kafka/api/org/springframework/kafka/core/ProducerFactory.html\"><em>ProducerFactory</em></a> which sets the strategy for creating Kafka <a href=\"https://kafka.apache.org/0100/javadoc/org/apache/kafka/clients/producer/Producer.html\"><em>Producer</em></a> instances.<br>ps. 如果需要发送自定义类型消息（如对象），可以使用<code>Jsonserializer</code>作为 value 的序列化类。（要添加依赖<code>Jackson Databind</code>）</p>\n<p>另外，上面这种发送方式属于发了之后不管了（不确认消息是否送达）<br>还有两种使用KafkaTemplate发送消息的方式：</p>\n<ul>\n<li>同步发送（阻塞进程）：get方法等待消息返回结果</li>\n<li>异步发送（不阻塞进程）：通过回调函数实现消息确认</li>\n</ul>\n<p>具体可以参考<a href=\"https://docs.spring.io/spring-kafka/docs/current/reference/html/#kafka-template\">Sending Messages-Using KafkaTemplate</a></p>\n<h3 id=\"Consumer-Config\"><a href=\"#Consumer-Config\" class=\"headerlink\" title=\"Consumer Config\"></a>Consumer Config</h3><p>消费者配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableKafka</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KafkaConsumerConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;kafka.bootstrapAddress&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bootstrapAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConsumerFactory&lt;String, String&gt; <span class=\"title function_\">consumerFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;String, Object&gt; props = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);</span><br><span class=\"line\">        <span class=\"comment\">// 这里要注意是反序列化 Deserializer</span></span><br><span class=\"line\">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class=\"line\">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultKafkaConsumerFactory</span>&lt;&gt;(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt;</span><br><span class=\"line\">    <span class=\"title function_\">kafkaListenerContainerFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory</span><br><span class=\"line\">                = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();</span><br><span class=\"line\">        factory.setConsumerFactory(consumerFactory());</span><br><span class=\"line\">        <span class=\"comment\">// 设置并发数</span></span><br><span class=\"line\">        <span class=\"comment\">// factory.setConcurrency(3);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>@EnableKafka</code> annotation is required on the configuration class to enable detection of <code>@KafkaListener</code> annotation on spring managed beans</p>\n<p>配置类上需要添加<code>@EnableKafka</code>注解，以启用<code>@KafkaListener</code> 注解。</p>\n</li>\n</ul>\n<h3 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h3><p>消费者注册监听服务消费消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@KafkaListener(topics = &quot;aaa&quot;, groupId = &quot;foo&quot;, id = &quot;bar&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">listen</span><span class=\"params\">(ConsumerRecord&lt;String, String&gt; data)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Received Message from aaa: &quot;</span> + data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@KafkaListener(topics = &quot;bbb&quot;, groupId = &quot;foo&quot;, id = &quot;bar2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">listen2</span><span class=\"params\">(String data )</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Received Message from bbb: &quot;</span> + data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h3><h4 id=\"生产者发送消息\"><a href=\"#生产者发送消息\" class=\"headerlink\" title=\"生产者发送消息\"></a>生产者发送消息</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        kafkaTemplate.send(<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;send a msg to aaa&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试发送\"><a href=\"#测试发送\" class=\"headerlink\" title=\"测试发送\"></a>测试发送</h4><p>首先要添加测试依赖：<code>junit</code>，<code>spring-test</code></p>\n<blockquote>\n<p>要注意的是<code>junit</code>的版本应该在 4.12+，<code>spring-test</code>的版本要和<code>spring-kafka</code>中使用的spring版本一致，避免出现依赖冲突的问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(classes = &#123;KafkaProducerConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">testProducer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Producer1 producer1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSend</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        producer1.sendMsg();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里加了一个延时是因为有的时候生产者发送消息结束，测试就结束了，时间太短了，消息监听服务在那段时间可能来不及启动，整个服务没有完成（消费了消息但没有在控制台打印出消息），会让我们误以为消息没有被监听到（我第一次就有这样的错觉，坑）。</p>\n<h2 id=\"Kafka-Manager\"><a href=\"#Kafka-Manager\" class=\"headerlink\" title=\"Kafka Manager\"></a>Kafka Manager</h2><blockquote>\n<p>A tool for managing Apache Kafka.<br>项目地址：<a href=\"https://github.com/yahoo/kafka-manager\">https://github.com/yahoo/kafka-manager</a></p>\n</blockquote>\n<p>顾名思义，就是Kafka的管理工具，yahoo开源。<br>这里简单记录下安装过程以及遇到的问题。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>Windows 下安装可参考：<a href=\"https://github.com/yahoo/kafka-manager/issues/5\">https://github.com/yahoo/kafka-manager/issues/5</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/yahoo/kafka-manager.git</span><br><span class=\"line\">sbt clean dist</span><br><span class=\"line\">unzip ../kafka-manager/target/universal/kafka-manager-1.0-SNAPSHOT.zip to wherever</span><br><span class=\"line\">/opt/kafka-manager-1.0-SNAPSHOT/bin/kafka-manager -Dhttp.port=9002 ( i had to use 9002 because of the conflicting port)</span><br><span class=\"line\"><span class=\"keyword\">then</span> open the browser to :9092 and you are good</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>下载<code>kafka-manager</code></p>\n</li>\n<li><p>下载<code>sbt</code><br>下载地址：<a href=\"https://www.scala-sbt.org/download.html\">https://www.scala-sbt.org/download.html</a></p>\n<blockquote>\n<p>下载全平台的 zip，解压，将<code>\\bin</code>目录添加到环境变量中，方便后面操作。</p>\n</blockquote>\n</li>\n<li><p>编译项目（走代理，不然很慢 -_-!）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sbt clean dist</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译项目结束会解压编译生成的压缩包，位置在<code>kafka-manager/target/universal/kafka-manager-1.0-SNAPSHOT.zip</code></p>\n<blockquote>\n<p>这里要注意的一点是，解压后要把这个文件夹放在比较浅的目录（比如盘的根目录下），不然会出现输入行过长的神奇错误：<br> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">The input line is too long.</span><br><span class=\"line\">The syntax of the <span class=\"built_in\">command</span> is incorrect.</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"启动Kafka-Manager\"><a href=\"#启动Kafka-Manager\" class=\"headerlink\" title=\"启动Kafka Manager\"></a>启动Kafka Manager</h3><ul>\n<li><p>在解压的文件夹根目录下执行</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\bin\\kafka-manager</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认运行在 9000 端口，如果遇到端口被占用，可以修改端口号：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\bin\\kafka-manager -Dhttp.port=9099</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>参考资料以及推荐阅读</p>\n<ol>\n<li><a href=\"https://www.baeldung.com/spring-kafka\">Intro to Apache Kafka with Spring</a></li>\n<li><a href=\"https://docs.spring.io/spring-kafka/api/\">Spring Kafka API文档</a></li>\n<li><a href=\"https://docs.spring.io/spring-kafka/docs/current/reference/html/\">Spring Kafka Reference</a></li>\n<li>《Kafka 权威指南》</li>\n</ol>\n","categories":["Java Web","MQ"],"tags":["Note","Spring","Kafka"]},{"title":"Spring 之 RabbitMQ 学习","url":"/p/72dcc3fd/","content":"<p>RabbitMQ 结合 Spring 的学习笔记。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>RabbitMQ 里比较重要的概念：</p>\n<ul>\n<li><code>Producer</code> 生产者（生产消息）</li>\n<li><code>Consumer</code> 消费者（消费消息）</li>\n<li><code>Queue</code> 队列（存放消息）</li>\n<li><code>Exchange</code>  交换机（转发消息）</li>\n<li><code>Routing Key</code> 路由键（消息转发的规则）</li>\n<li><code>Connection</code> TCP连接（和<code>RabbitMQ Broker</code>建立TCP连接）</li>\n<li><code>Channel</code> 信道（建立在<code>Connection</code>之上的虚拟连接）</li>\n</ul>\n<p>交换机有四类，直连、主题、扇出和 Headers：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">EXCHANGE TYPE</th>\n<th align=\"center\">BEHAVIOUR</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Direct</td>\n<td align=\"center\">The binding key must match the routing key exactly - no wildcard support.<br>「绑定键必须与路由键完全匹配，不支持通配符」</td>\n</tr>\n<tr>\n<td align=\"center\">Topic</td>\n<td align=\"center\">Same as Direct, but wildcards are allowed in the binding key. ‘#’ matches zero or more dot-delimited words and ‘*‘ matches exactly one such word. <br>「与 Direct 相同，但在绑定键中允许使用通配符 ‘#’ 匹配零个或多个点分隔的单词，’*‘ 匹配一个这样的单词」</td>\n</tr>\n<tr>\n<td align=\"center\">Fanout</td>\n<td align=\"center\">The routing and binding keys are ignored - all published messages go to all bound queues.<br>「路由键和绑定键被忽略——所有发布的消息都转到所有绑定队列」</td>\n</tr>\n<tr>\n<td align=\"center\">Headers</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody></table>\n<p>关于 Routing Key：</p>\n<ol>\n<li><p><code>#</code> 可以匹配零个或多个点分隔的单词（正则表达式里的<code>*</code>）</p>\n</li>\n<li><p><code>*</code> 可以匹配一个点分隔的单词（正则表达式里的<code>.</code>）</p>\n</li>\n</ol>\n<h2 id=\"Spring-with-Rabbit\"><a href=\"#Spring-with-Rabbit\" class=\"headerlink\" title=\"Spring with Rabbit\"></a>Spring with Rabbit</h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p><img data-src=\"/p/72dcc3fd/SpringwithRabbit.jpg\"></p>\n<p>主要是spring 框架的相关 jar 包（<code>spring-core</code>、<code>spring-context</code>）以及<code>spring-rabbit</code>，可能会存在依赖冲突，建议检查一下。</p>\n<p>还有一点是，<code>spring-rabbit</code> 依赖了<code>slf4j-api</code>，这个包要给它加一个实现类，不然会抛出异常：</p>\n<blockquote>\n<p>SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”</p>\n<p>SLF4J: Defaulting to no-operation (NOP) logger implementation</p>\n<p>SLF4J: See <a href=\"http://www.slf4j.org/codes.html#StaticLoggerBinder\">http://www.slf4j.org/codes.html#StaticLoggerBinder</a> for further details.</p>\n</blockquote>\n<h4 id=\"SLF4J-常见异常处理\"><a href=\"#SLF4J-常见异常处理\" class=\"headerlink\" title=\"SLF4J 常见异常处理\"></a>SLF4J 常见异常处理</h4><p>访问错误信息给出的来链接，官方解释以及解决方法：</p>\n<blockquote>\n<p><code>org.slf4j.impl.StaticLoggerBinder </code>类无法加载到内存中， 类路径上找不到适当的 SLF4J 绑定时，就会发生这种情况。</p>\n<p>将<code>slf4j-nop.jar</code>、<code>slf4j-simple.jar</code>、<code>slf4j-log4j12.jar</code>、<code>slf4j-jdk14.jar</code> 或<code>logback-classic.jar</code> 的一个(且只有一个)放在类路径上应该可以解决这个问题。</p>\n</blockquote>\n<p>解决办法就是加个实现了<code>StaticLoggerBinder</code>的 jar 包，比如<code>slf4j-simple</code>。注意<code>slf4j-simple</code>的版本选择应该与<code>slf4j-api</code>的版本相同，避免出现依赖冲突。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有一点要额外注意的是，我们可以在<code>mvnrepository.com</code>这个网站上查询 jar 包的相关依赖（<code>Compile Dependencies</code>和<code>Test Dependencies</code>），也可以很方便的直接复制 jar 包的 maven &#x2F; Gradle &#x2F; SBT &#x2F; … 的配置信息。</p>\n<p>但是给出的依赖配置中可能会存在默认的 scope （限制依赖包的作用范围），<code>slf4j-simple</code>默认被<code>mvnrepository.com</code>加上了 test 的 scope，限制其在测试的时候生效。</p>\n<p>带来的问题就是解决不了<code>SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;</code>的问题。把默认加上的 scope 限制去掉（什么 scope 都不加），使得<code>slf4j-simple</code>处于默认的 scope(compile)下，使其在项目的整个运行生命周期中都生效。</p>\n</blockquote>\n<h3 id=\"配置类\"><a href=\"#配置类\" class=\"headerlink\" title=\"配置类\"></a>配置类</h3><p>定义 <code>ConnectionFactory</code>、<code>SimpleRabbitListenerContainerFactory</code>、<code>AmqpAdmin</code>、<code>RabbitTemplate</code>，同时声明队列、交换机以及它们之间的绑定关系。</p>\n<ul>\n<li><p>创建队列：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Queue <span class=\"title function_\">myQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(Hello_Queue_Name, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建交换机</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title function_\">myExchange</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TopicExchange</span>(<span class=\"string\">&quot;hello.world.exchange&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建队列与交换机之间的绑定关系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">Binding <span class=\"title function_\">binding</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(myQueue()).to(myExchange()).with(<span class=\"string\">&quot;*.world.*&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建ConnectionFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ConnectionFactory <span class=\"title function_\">connectionFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">CachingConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CachingConnectionFactory</span>(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">    connectionFactory.setUsername(<span class=\"string\">&quot;guest&quot;</span>);</span><br><span class=\"line\">    connectionFactory.setPassword(<span class=\"string\">&quot;guest&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> connectionFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个简单的监听容器工厂，用于启动消息监听（Spring Boot会自动生成一个默认的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SimpleRabbitListenerContainerFactory <span class=\"title function_\">rabbitListenerContainerFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SimpleRabbitListenerContainerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleRabbitListenerContainerFactory</span>();</span><br><span class=\"line\">    factory.setConnectionFactory(connectionFactory());</span><br><span class=\"line\">    factory.setConcurrentConsumers(<span class=\"number\">3</span>);</span><br><span class=\"line\">    factory.setMaxConcurrentConsumers(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Q：为什么要创建呢？</p>\n<p>A：一开始没有注意到这个细节直接运行的时候报错了，然后查了一下，看到官方api文档里有给出了<a href=\"https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html\">解释</a>，下面摘出一点：</p>\n<blockquote>\n<p>Enable Rabbit listener annotated endpoints that are created under the cover by a <a href=\"https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp/rabbit/listener/RabbitListenerContainerFactory.html\"><code>RabbitListenerContainerFactory</code></a>.</p>\n<p>The <code>RabbitListenerContainerFactory</code> is responsible to create the listener container responsible for a particular endpoint. Typical implementations, as the <a href=\"https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp/rabbit/config/SimpleRabbitListenerContainerFactory.html\"><code>SimpleRabbitListenerContainerFactory</code></a> used in the sample above, provides the necessary configuration options that are supported by the underlying <a href=\"https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp/rabbit/listener/MessageListenerContainer.html\"><code>MessageListenerContainer</code></a>.</p>\n<p><code>RabbitListenerContainerFactory</code>负责创建特定端点的侦听器容器。 典型的实现，如示例中使用的<code>SimpleRabbitListenerContainerFactory</code>，提供了基础MessageListenerContainer支持的<strong>必要配置选项</strong>。</p>\n</blockquote>\n<p><code>@EnableRabbit</code> 注解用于启用 RabbitMQ 监听注解，如<code>@RabbitListener</code>。使用<code>@EnableRabbit</code>需要<code>RabbitListenerContainerFactory</code>的帮助。在Spring Boot 下，如果自己没有创建，框架则会使用自带的。</p>\n</li>\n<li><p>创建RabbitTemplate，用来生产消息，也可以接收消息（<strong>同步</strong>），会阻塞进程，不推荐</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RabbitTemplate <span class=\"title function_\">rabbitTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RabbitTemplate</span>(connectionFactory());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建AmqpAdmin</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> AmqpAdmin <span class=\"title function_\">amqpAdmin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RabbitAdmin</span>(connectionFactory());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Config上的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRabbit</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&#123;&quot;org.js.umm&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitConfig</span> &#123; <span class=\"comment\">// ... &#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h3><p>发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitSend</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        rabbitTemplate.convertAndSend(Hello_Queue_Name,<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;send msg for hello.world.queue&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h3><p>消费（接收）消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@RabbitListener(queues = &#123;Hello_Queue_Name&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitRecv</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getMessage</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Get: &quot;</span> + msg);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------------&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>运行测试方法会发送一个消息，然后该消息会被监听器监听到，执行消费者类里写的<code>getMessage</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(classes = &#123;RabbitConfig.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">testSend</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitSend rabbitSend;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        rabbitSend.sendMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"死信队列\"><a href=\"#死信队列\" class=\"headerlink\" title=\"死信队列\"></a>死信队列</h3><p>模型图：</p>\n<p><img data-src=\"/p/72dcc3fd/dlx-model.jpg\"></p>\n<p>消息传递到 normal queue ，等到消息过期，normal queue 队列会把消息丢弃，由于设置了死信的相关属性，那么队列会把过期消息丢给设置的死信交换机（这里用的是同一个交换机），死信交换机根据死信路由把消息传递到指定队列。</p>\n<p>死信交换机(Dead Letter Exchange)和普通的交换机并没有什么区别，只是处理消息是 Dead Letter（被丢弃&#x2F;过期的消息）。用死信队列可以实现在延迟队列的功能，比如定义一个消息的过期时间为 x min，添加死信队列的消费者，那么就可以实现 x min 后消费者执行 xxx。</p>\n<p>实现死信队列，主要是修改配置，设置队列的死信属性以及消息过期时间。</p>\n<ul>\n<li><p>Config<br>  定义队列同上，这里主要记一下设置属性，以及</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置队列的死信属性</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Queue <span class=\"title function_\">directQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> HashMap&lt;String, Object&gt; paramMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置死信交换机</span></span><br><span class=\"line\">    paramMap.put(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>, DIRECT_EXCHANGE);</span><br><span class=\"line\">    <span class=\"comment\">// 设置死信路由键</span></span><br><span class=\"line\">    paramMap.put(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>, <span class=\"string\">&quot;dlx-1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;normalQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, paramMap);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">Binding <span class=\"title function_\">bindNormal</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class=\"string\">&quot;normal-1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 死信队列与交换机绑定</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">Binding <span class=\"title function_\">bindDlx</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BindingBuilder.bind(dlxQueue()).to(directExchange()).with(<span class=\"string\">&quot;dlx-1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生产者</p>\n<p> 发送带有过期属性的消息</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DlxSender</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RabbitTemplate rabbitTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">send</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">messageBody</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dlx test msg&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">MessageProperties</span> <span class=\"variable\">props</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MessageProperties</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置消息过期时间</span></span><br><span class=\"line\">        props.setExpiration(<span class=\"string\">&quot;5000&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Message</span>(messageBody.getBytes(), props);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Send a dead letter message&quot;</span>);</span><br><span class=\"line\">        rabbitTemplate.send(DIRECT_EXCHANGE, <span class=\"string\">&quot;normal-1&quot;</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendDlxMsg</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    dlxSender.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  测试的时候，上面的过期时间可以设长一点，观察 Rabbit 的 web management ，测试方法执行的时候，队列<code>normalQueue</code>中会有一条消息，通过 Get Messages 可以查看消息的细节，到了过期时间，队列<code>normalQueue</code>的消息会消失。</p>\n<p>  然后查看队列<code>dlxQueue</code>，再 Get Messages ，发现就是刚刚的那条消息。这次消息不会再过期了，过期的属性被用掉了，现在的属性显示的是<code>original-expiration: 5000</code>。</p>\n</li>\n</ul>\n<p>队列中的消息属性：<br><img data-src=\"/p/72dcc3fd/dlq-prop.png\"></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><h3 id=\"消息类型\"><a href=\"#消息类型\" class=\"headerlink\" title=\"消息类型\"></a>消息类型</h3><p>发送消息的类型可以为对象，但要对其进行序列化，如果没有序列化会出现以下Error：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SimpleMessageConverter only supports String, byte[] and Serializable payloads</span><br></pre></td></tr></table></figure>\n\n<p>上面的 Error 信息说明 Producer 通过默认模板发送消息，消息的类型只支持 String、byte[]、和序列化后的消息。所以这时候要对 User 类（对象）进行序列化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123; <span class=\"comment\">// ... &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Routing-Key-匹配\"><a href=\"#Routing-Key-匹配\" class=\"headerlink\" title=\"Routing Key 匹配\"></a>Routing Key 匹配</h3><ul>\n<li><p>绑定键为 <code>*</code> 的队列会取到一个路由键为空的消息吗？</p>\n<blockquote>\n<p>答：不能</p>\n</blockquote>\n</li>\n<li><p>绑定键为 <code>#.*</code> 的队列会获取到一个名为<code>..</code>的路由键的消息吗？它会取到一个路由键为单个单词的消息吗？</p>\n<blockquote>\n<p>答：<br>   会获取到一个名为<code>..</code>的路由键的消息<br>   会取到一个路由键为单个单词的消息</p>\n</blockquote>\n</li>\n<li><p><code>a.*.#</code> 和 <code>a.#</code>的区别在哪儿？</p>\n<blockquote>\n<p>答：区别在于<code>a.*.#</code>的<code>*</code>处必须有东西，</p>\n<p><code>a.#</code>的路由键可以为单个单词， <code>a.*.#</code>不能。</p>\n<p><code>a.#</code>可以接收到路由键为 <code>a</code>的消息，而<code>a.*.#</code>不行。</p>\n</blockquote>\n</li>\n<li><p>如何确保消息不丢失？</p>\n<blockquote>\n<p>答：为了确保消息不会丢失，RabbitMQ 支持消息确认，以及队列&#x2F;交换机设置持久化。消费者发送回一个 ack (确认消息) ，告诉 RabbitMQ 已经接收并处理了一条特定消息，并且 RabbitMQ 可以自由删除该消息。持久化，设置<code>durable</code>属性为 true</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>RabbitMQ 和其他 MQ 不一样的地方在于交换机，根据 Routing Key 路由队列。整个过程做了两件事：</p>\n<ul>\n<li><p>配置类，在Config中声明 Queue、Exchange 以及 它们之间的绑定关系，并注册为 Bean</p>\n</li>\n<li><p>生产&#x2F;消费者，进行消息的生产发送，消费接收，以及对消息的处理等</p>\n</li>\n</ul>\n<h3 id=\"推荐阅读及参考\"><a href=\"#推荐阅读及参考\" class=\"headerlink\" title=\"推荐阅读及参考\"></a>推荐阅读及参考</h3><ul>\n<li><p><a href=\"https://docs.spring.io/spring-amqp/docs/2.1.10.RELEASE/reference/html/\">Spring AMQP官方文档</a></p>\n<blockquote>\n<p>Each <strong>Spring project</strong> has its own; it explains in great details how you can use <strong>project features</strong> and what you can achieve with them.</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://spring.io/projects/spring-amqp\">Spring AMQP</a></p>\n</li>\n<li><p><a href=\"https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/\">Understanding AMQP, the protocol used by RabbitMQ</a></p>\n</li>\n<li><p><a href=\"https://www.rabbitmq.com/getstarted.html\">RabbitMQ Tutorials</a></p>\n</li>\n<li><p><a href=\"https://www.baeldung.com/rabbitmq-spring-amqp\">RabbitMQ Message Dispatching with Spring AMQP</a></p>\n</li>\n<li><p>《RabbitMQ实战指南》</p>\n</li>\n</ul>\n","categories":["Java Web","MQ"],"tags":["Java","Spring Boot","Spring","RabbitMQ"]}]